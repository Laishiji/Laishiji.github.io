<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="https://www.w3.org/2005/Atom">
  <title>TheMasterplan</title>
  
  <subtitle>TheMasterplan</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://thmasterplan.cn/"/>
  <updated>2019-11-19T09:44:21.576Z</updated>
  <id>http://thmasterplan.cn/</id>
  
  <author>
    <name>LSJ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java高级</title>
    <link href="http://thmasterplan.cn/2019/11/19/Java%E9%AB%98%E7%BA%A7/"/>
    <id>http://thmasterplan.cn/2019/11/19/Java%E9%AB%98%E7%BA%A7/</id>
    <published>2019-11-19T09:33:47.000Z</published>
    <updated>2019-11-19T09:44:21.576Z</updated>
    
    <content type="html"><![CDATA[<p><strong>JAVA**</strong>复习笔记**</p><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image001.png" alt="img"></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image002.png" alt="img"></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image004.jpg" alt="img"></p><p><strong>String**</strong>常用方法：**</p><p>1)   比较</p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image005.png" alt="img"></p><p>2)   获取</p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image007.jpg" alt="img"></p><p>3)   截取子串</p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image009.jpg" alt="img"></p><p>4)   转换</p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image011.jpg" alt="img"></p><p>5)   分割</p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image012.png" alt="img"></p><p>补充：boolean <a href="http://tool.oschina.net/uploads/apidocs/jdk_7u4/java/lang/String.html#endsWith(java.lang.String)" target="_blank" rel="noopener">endsWith</a>(<a href="http://tool.oschina.net/uploads/apidocs/jdk_7u4/java/lang/String.html" target="_blank" rel="noopener">String</a> suffix);判断字符串是否是以suffix为后缀。</p><h1 id="Static关键字"><a href="#Static关键字" class="headerlink" title="Static关键字"></a>Static关键字</h1><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image013.png" alt="img"></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image014.png" alt="img"></p><p>1)   内存图：</p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image015.png" alt="img"></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image016.png" alt="img"></p><p>2)   静态代码块：</p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image017.png" alt="img"></p><h1 id="Arrays常用方法"><a href="#Arrays常用方法" class="headerlink" title="Arrays常用方法"></a>Arrays常用方法</h1><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image018.png" alt="img"></p><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image019.png" alt="img"></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image021.jpg" alt="img"></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image022.png" alt="img"></p><h1 id="抽象类与接口"><a href="#抽象类与接口" class="headerlink" title="抽象类与接口"></a>抽象类与接口</h1><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image023.png" alt="img"></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image024.png" alt="img"></p><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image025.png" alt="img"></p><p>向上转型，即父类引用指向子类对象，则引用无法调用原本<strong>子类特有的方法</strong>，例如Animal a = new Cat();</p><p>向下转型，也即<strong>还原</strong>a的类型为cat，使其可以访问cat特有的方法，例如Cat cat = (Cat) a;[类似于强制类型转换]。</p><h1 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h1><p>1)   修饰类：当前类不能有任何子类。</p><p>2)   修饰方法：该方法不能被子类覆盖重写。（显然对于类、方法来说，abstract和final无法同时使用）</p><p>3)   修饰局部变量：该变量（引用类型不能再指向其他变量）不能再改变。</p><p>4)   修饰成员变量：该变量必须直接赋值或者在构造方法中赋值。</p><h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h1><p>1)   成员内部类</p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image026.png" alt="img"></p><p>在内部类中访问重名的外部类成员变量：</p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image027.png" alt="img"></p><p>2)   局部内部类</p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image028.png" alt="img"></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image029.png" alt="img"></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image030.png" alt="img"></p><p>3)   局部内部类中的匿名内部类：</p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image031.png" alt="img"></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image032.png" alt="img"></p><h1 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h1><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image033.png" alt="img"></p><p>自动装箱与自动拆箱。</p><p>基本类型与字符串的转换：</p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image034.png" alt="img"></p><h1 id="集合框架"><a href="#集合框架" class="headerlink" title="集合框架"></a>集合框架</h1><p>+<img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image036.jpg" alt="img"></p><p><strong>1)</strong>   <strong>Collection</strong></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image037.png" alt="img"></p><p><strong>2)</strong>   <strong>Iterator接口</strong></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image038.png" alt="img"></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image039.png" alt="img"></p><p><strong>3)</strong>   <strong>泛型</strong></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image040.png" alt="img"></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image041.png" alt="img"></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image042.png" alt="img"></p><p><strong>4)</strong>   <strong>List</strong></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image043.png" alt="img"></p><p><strong>List的子类：</strong></p><p><strong>A.</strong>   <strong>ArrayList:此实现不是同步的，底层是一个数组，增删慢，查询快。</strong></p><p><strong>B.</strong>   <strong>LinkedList:此实现不是同步的，底层是双向链表，增删快，查询慢。</strong></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image044.png" alt="img"></p><p><strong>C.</strong>   <strong>Vector:底层是数组，同步，了解即可</strong></p><p><strong>5)</strong>   <strong>Set:set在调用add方法时，会调用元素的hashCode方法和equals方法判断元素是否重复，在存储自定义类型元素时，前提是需要重写对象中的hashCode和equals方法。</strong></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image045.png" alt="img"></p><p><strong>A.</strong>   <strong>HashSet:不同步，底层是哈希表（查询速度快），无序。</strong></p><p><strong>哈希值：十进制整数，逻辑地址值，由哈希函数计算而得。</strong></p><p><strong>哈希表：jdk1.8之后，哈希表由数组+链表/红黑树构成。</strong></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image046.png" alt="img"></p><p><strong>B.</strong>   <strong>LinkedHashSet:相较于HashSet多了一条链表记录元素的存储顺序，保证元素有序。</strong></p><p><strong>6)</strong>   <strong>可变参数：</strong></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image047.png" alt="img"></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image048.png" alt="img"></p><p><strong>7)</strong>   <strong>Collections集合工具类：</strong></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image049.png" alt="img"></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image050.png" alt="img"></p><p><strong>Comparator:</strong></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image051.png" alt="img"></p><p><strong>Comparable:</strong></p><p><strong>要比较的类需要实现Comparable接口，同时覆盖compareTo方法：</strong></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image052.png" alt="img"></p><p><strong>8)</strong>   <strong>Map</strong></p><p><strong>A.</strong>   <strong>概述</strong></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image053.png" alt="img"></p><p><strong>B.</strong>   <strong>Map接口常用方法：</strong></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image054.png" alt="img"></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image055.png" alt="img"></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image056.png" alt="img"></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image057.png" alt="img"></p><p><strong>C.</strong>   <strong>Map遍历方法：</strong></p><p><strong>a)</strong>   <strong>键找值：</strong></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image058.png" alt="img"></p><p><strong>b)</strong>   <strong>Entry键值对对象：Map.Entry，在Map接口中有一个内部接口Entry,Map集合一创建就会创建一个Entry对象，记录键值对对象。</strong></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image059.png" alt="img"></p><p><strong>D.</strong>   <strong>HashMap存储自定义类型键值为防止键重复，必须重写自定义类型的hashCode和equals方法。</strong></p><p><strong>9)</strong>   <strong>HashTable:</strong></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image060.png" alt="img"></p><h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image061.png" alt="img"></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image062.png" alt="img"></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image063.png" alt="img"></p><p>自定义异常：</p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image065.jpg" alt="img"></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image067.jpg" alt="img"></p><h1 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h1><p><strong>1.</strong>   <strong>线程状态图：</strong></p><p>​                         </p><p>​                                <img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image068.jpg" alt="img"></p><p>等待-唤醒案例：</p><p><img src="clip_image069.png" alt="img"></p><p>notifyAll唤醒所有waiting状态的线程，唤醒之后的线程要与其他线程竞争锁，获取锁之后才能继续执行wait()方法之后的代码。</p><p><strong>2.</strong>   <strong>创建线程第一种方法：</strong></p><p><img src="clip_image070.png" alt="img"></p><p>每个线程都有自己的栈空间。</p><p><strong>3.</strong>   <strong>Thread**</strong>类构造方法和常用方法：**</p><p><img src="clip_image071.png" alt="img"></p><p><strong>4.</strong>   <strong>创建线程第二种方法：实现Runnable接口</strong></p><p><img src="clip_image072.png" alt="img"></p><p><strong>5.</strong>   <strong>两种创建方式的区别</strong></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image073.png" alt="img"></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image074.png" alt="img"></p><p><strong>6.</strong>   <strong>匿名内部类两种方式创建线程：</strong></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image075.png" alt="img"></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image076.png" alt="img"></p><p><strong>7.</strong>   <strong>线程安全与线程同步：</strong></p><p><strong>1)</strong>   <strong>同步代码块</strong></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image077.png" alt="img"></p><p><strong>（可以直接用synchronized(this){</strong></p><p>​      <strong>///////////**</strong>代码块**</p><p><strong>}**</strong>）this代表Runnable的实现类对象，唯一。**</p><p>同步中的线程，没有执行完代码块中的内容不会释放锁，其余线程没有锁就算获取cpu执行权也会阻塞；同步保证了只能有一个线程在同步中执行共享数据，保证了安全；但是程序频繁地判断锁，获取锁，释放锁，程序效率会降低。</p><p><strong>2)</strong>   <strong>同步方法</strong></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image078.png" alt="img"></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image079.png" alt="img"></p><p><strong>静态同步方法：</strong></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image080.png" alt="img"></p><p><strong>3)</strong>   <strong>加lock锁</strong></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image081.png" alt="img"></p><p><strong>8.</strong>   <strong>线程池：一个容纳多个线程的容器（例如LinkedList），其中的线程可以反复使用，无需反复创建线程而消耗过多资源。</strong></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image082.png" alt="img"></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image083.png" alt="img"></p><p><strong>9.</strong>   <strong>Lambda**</strong>表达式：省略了实现接口，重写方法等。**</p><p><strong>例：</strong><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image084.png" alt="img"></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image085.png" alt="img"></p><h1 id="File"><a href="#File" class="headerlink" title="File"></a>File</h1><p><strong>1.</strong>   <strong>File类的静态成员变量：</strong></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image086.png" alt="img"></p><p><strong>2.</strong>   <strong>File类构造方法</strong></p><p>1)   File（String pathname){}；</p><p>2)   File(String Parent, String child){}：这个构造意思是根据一个目录和子目录得到File对象。如果我们想对某一个文件路径下的多个文件进行操作，这个时候采用这个构造函数就显示优势。</p><p>3)   File(File parent, String child){}：这个函数的好处就是可以对parent进行File相关的操作，例如打印父路径下有多少个文件等。</p><p><strong>3.</strong>   <strong>获取类方法：</strong></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image087.png" alt="img"></p><p><strong>4.</strong>   <strong>判断类方法：</strong></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image088.png" alt="img"></p><p><strong>5.</strong>   <strong>创建删除类方法：</strong></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image089.png" alt="img"></p><p><strong>6.</strong>   <strong>目录遍历</strong></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image090.png" alt="img"></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image091.png" alt="img"></p><p><strong>7.</strong>   <strong>文件过滤器：FileFilter接口</strong></p><p><strong>listFiles(传递过滤器实现类对象，可直接用lambda表达式简化)。例如：</strong></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image092.png" alt="img"></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image094.jpg" alt="img"></p><h1 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h1><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image096.png" alt="img"></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image097.png" alt="img"></p><p><strong>1.</strong>   <strong>OutputStream:</strong></p><p><strong>1)</strong>   <strong>FileOutputStream</strong></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image098.png" alt="img"></p><p><strong>2)</strong>   <strong>一次写一个字节</strong></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image099.png" alt="img"></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image100.png" alt="img"></p><p><strong>3)</strong>   <strong>一次写多个字节</strong></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image101.png" alt="img"></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image102.png" alt="img"></p><p><strong>4)</strong>   <strong>续写与换行</strong></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image103.png" alt="img"></p><p><strong>2.</strong>   <strong>InputStream&amp;FileInputStream</strong></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image104.png" alt="img"></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image105.png" alt="img"></p><p><strong>1)</strong>   <strong>一次读一个字节，read()方法返回一个ASCII码值。</strong></p><p><strong>2)</strong>   <strong>一次读多个字节：</strong></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image107.jpg" alt="img"></p><p><strong>若未读取到字节，则同样返回-1.</strong></p><p><strong>3.</strong>   <strong>练习：文件复制操作：</strong></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image108.png" alt="img"></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image109.png" alt="img"></p><p><strong>4.</strong>   <strong>使用字节流读取中文时，会出现乱码的问题；一个中文字符：GBK占2个字节，UTF-8占3个字节。因此需要使用字符流。</strong></p><p><strong>5.</strong>   <strong>Reader&amp;FileReader</strong></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image110.png" alt="img"></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image111.png" alt="img"></p><p><strong>6.</strong>   <strong>writer&amp;FileWriter</strong></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image112.png" alt="img"></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image113.png" alt="img"></p><p><strong>7.</strong>   <strong>IO中的异常处理</strong></p><p><strong>1)</strong>   <strong>常规</strong></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image115.jpg" alt="img"></p><p><strong>2)</strong>   <strong>JDK7新特性</strong></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image116.png" alt="img"></p><p><strong>8.</strong>   <strong>属性集</strong></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image117.png" alt="img"></p><p><strong>1)</strong>   <strong>setProperty/getProperty/stringPropertyNames</strong></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image119.jpg" alt="img"></p><p><strong>2)</strong>   <strong>store</strong></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image120.png" alt="img"></p><p><strong>3)</strong>   <strong>load</strong></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image121.png" alt="img"></p><p><strong>9.</strong>   <strong>缓冲流</strong></p><p><strong>1)</strong>   <strong>BufferedOutputStream</strong></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image122.png" alt="img"></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image123.png" alt="img"></p><p><strong>2)</strong>   <strong>BufferedInputStream</strong></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image124.png" alt="img"></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image125.png" alt="img"></p><p><strong>3)</strong>   <strong>BufferedWriter</strong></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image126.png" alt="img"></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image127.png" alt="img"></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image128.png" alt="img"></p><p><strong>4)</strong>   <strong>BufferedReader</strong></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image129.png" alt="img"></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image130.png" alt="img"></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image131.png" alt="img"></p><p><strong>10.</strong>  <strong>转换流</strong></p><p><strong>1)</strong>   <strong>字符编码和字符集：</strong></p><p><strong>A.</strong>   <strong>字符编码：一套自然语言的字符与二进制数之间的对应规则。</strong></p><p><strong>B.</strong>   <strong>字符集：即编码表，生活中文字与二进制对应规则</strong></p><p><strong>C.</strong>   <strong>常用字符集：</strong></p><p><strong>a)</strong>   <strong>ASCII：美国</strong></p><p><strong>b)</strong>   <strong>ISO：欧洲</strong></p><p><strong>c)</strong>   <strong>GBxxx:GB2312,GBK,GB18030国标。GBK两个字节表示一个汉字。</strong></p><p><strong>d)</strong>   <strong>Unicode：万国码。UTF-8/UTF-16/UTF-32。UTF-8三个字节表示一个汉字。</strong></p><p><strong>2)</strong>   <strong>编码引出的问题：</strong></p><p><strong>FileReader可以读取IDE默认编码格式UTF-8的文件，但是读取系统默认编码为GBK时会产生乱码。</strong></p><p><strong>FileReader底层调用的是FileInputStream方法读取字节流，再通过字符集转换为字符，其父类为InputStreamReader.</strong></p><p><strong>FileWriter同理。</strong></p><p><strong>3)</strong>   <strong>OutputStreamWriter</strong></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image132.png" alt="img"></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image133.png" alt="img"></p><p><strong>4)</strong>   <strong>InputStreamReader</strong></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image134.png" alt="img"></p><p><strong>11.</strong>  <strong>序列化流</strong></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image135.png" alt="img"></p><p><strong>1)</strong>   <strong>ObjectOutputStream</strong></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image136.png" alt="img"></p><p><strong>只需要序列化的类implements Serializable接口即可，并不需要实现任何方法。</strong></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image137.png" alt="img"></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image138.png" alt="img"></p><p><strong>2)</strong>   <strong>ObjectInputStream</strong></p><p><strong>与序列化相似。</strong></p><p><strong>3)</strong>   <strong>静态变量不能被序列化或反序列化。</strong></p><p><strong>4)</strong>   <strong>使用transient关键字修饰变量避免序列化。</strong></p><p><strong>A.</strong>   <strong>一旦变量被transient修饰，变量将不再是对象持久化的一部分，该变量内容在序列化后无法获得访问。</strong></p><p><strong>B.</strong>   <strong>transient关键字只能修饰变量，而不能修饰方法和类。注意，本地变量是不能被transient关键字修饰的。变量如果是用户自定义类变量，则该类需要实现Serializable接口。</strong></p><p><strong>C.</strong>   <strong>被transient关键字修饰的变量不再能被序列化，一个静态变量不管是否被transient修饰，均不能被序列化。</strong></p><p><strong>5)</strong>   <strong>InvalidClassException:</strong></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image139.png" alt="img"></p><p><strong>序列化一个类后，又修改类的内容后，序列号会改变，反序列化时会出现InvalidClassException。</strong></p><p><strong>12.</strong>  <strong>PrintStream打印流</strong></p><h1 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h1><p><strong>1.</strong>   <strong>客户端：</strong></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image140.png" alt="img"></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image141.png" alt="img"></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image142.png" alt="img"></p><p>注意：在客户端发送完毕之后，要调用socket的shutdownOutput()方法，以免服务端的inputStream.read()方法阻塞。</p><p><strong>2.</strong>   <strong>服务器端</strong></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image143.png" alt="img"></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image144.png" alt="img"></p><h1 id="JDK8新特性：函数式接口"><a href="#JDK8新特性：函数式接口" class="headerlink" title="JDK8新特性：函数式接口"></a>JDK8新特性：函数式接口</h1><p><strong>1.</strong>   <strong>概念：函数式接口在Java中是指：有且仅有一个抽象方法的接口；</strong></p><p><strong>@FunctionalInterface注解：可以检测接口是否为一个函数式接口。</strong></p><p><strong>注意：使用匿名内部类编译时会有匿名内部类class文件，而lambda表达式不会有，效率更高。</strong></p><p><strong>2.</strong>   <strong>函数式编程：</strong></p><p><strong>Lambda表达式延迟加载：作为参数（即接口的实现）时会判断其他参数是否满足条件，如若不满足调用者的条件则不会执行lambda表达式方法体，提高性能。</strong></p><p><strong>3.</strong>   <strong>Java.util.function：</strong></p><p><strong>1)</strong>   <strong>Supplier</strong></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image145.png" alt="img"></p><p><strong>2)</strong>   <strong>Consumer</strong></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image146.png" alt="img"></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image147.png" alt="img"></p><p><img src="C:/Users/%E8%B5%96%E4%B8%96%E7%BA%AA/Desktop/%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/clip_image148.png" alt="img"></p><p><strong>3)</strong>   <strong>Predicate</strong></p><p><strong>4)</strong>   <strong>Function</strong></p><p><strong>5)</strong>   <strong>Stream流</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;JAVA**&lt;/strong&gt;复习笔记**&lt;/p&gt;
&lt;h1 id=&quot;字符串&quot;&gt;&lt;a href=&quot;#字符串&quot; class=&quot;headerlink&quot; title=&quot;字符串&quot;&gt;&lt;/a&gt;字符串&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;C:/Users/%E8%B5%96%
      
    
    </summary>
    
    
      <category term="Java" scheme="http://thmasterplan.cn/categories/Java/"/>
    
    
      <category term="Java" scheme="http://thmasterplan.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式及SHELL编程</title>
    <link href="http://thmasterplan.cn/2019/11/19/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8F%8ASHELL%E7%BC%96%E7%A8%8B/"/>
    <id>http://thmasterplan.cn/2019/11/19/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8F%8ASHELL%E7%BC%96%E7%A8%8B/</id>
    <published>2019-11-19T05:07:05.000Z</published>
    <updated>2019-11-19T05:08:19.097Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="Linux" scheme="http://thmasterplan.cn/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://thmasterplan.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>文件权限与用户组管理</title>
    <link href="http://thmasterplan.cn/2019/11/18/%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E4%B8%8E%E7%94%A8%E6%88%B7%E7%BB%84%E7%AE%A1%E7%90%86/"/>
    <id>http://thmasterplan.cn/2019/11/18/%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E4%B8%8E%E7%94%A8%E6%88%B7%E7%BB%84%E7%AE%A1%E7%90%86/</id>
    <published>2019-11-17T16:16:20.000Z</published>
    <updated>2019-11-19T05:04:52.858Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Linux的文件权限与用户组管理"><a href="#Linux的文件权限与用户组管理" class="headerlink" title="Linux的文件权限与用户组管理"></a>Linux的文件权限与用户组管理</h3><ul><li><p>文件权限：<code>-rw-r--r-- 1 root root 4.0K 07-19 01:02 abc.log</code>:</p><ul><li>第1位：<ul><li>-：表示普通文件；</li><li>d：目录</li><li>b：设备文件（块文件，即可以用来存储的设备文件）</li><li>c：设备文件（字符文件，不能用来存储的设备文件）</li><li>l：软链接（快捷方式）</li></ul></li><li>p：管道文件pipe<ul><li>s：套接字文件socket</li></ul></li><li>后9位：r可读，w可写，x可执行。<ul><li>2-4位：用户的权限范围</li><li>5-7位：组的权限范围</li><li>8-10位：其余人的权限范围</li></ul></li><li>1表示该文件的硬链接数</li><li>第一个root表示该文件的所有者</li><li>第二个root表示该文件所属的组</li><li>4.0K表示该文件的大小</li><li>后面为最后一次修改的时间戳和文件名</li></ul></li><li><p>r/w/x权限对于目录的意义：</p><ul><li>r权限：可读取目录结构列表，即可查看目录下的文件名和子目录名。[注：不能查看文件内容]</li><li>w权限：可创建文件和目录，可删除，可重命名，可转移</li><li>x权限：可进入该目录。</li></ul></li><li><p>更改权限：<code>chmod</code></p><ul><li><code>chmod u+x,g+w,o-r abc.log</code>：abc.log权限由<code>-rw-r--r--</code>变为：<code>-rwxrw----</code></li><li><code>chmod a=r file</code>或者<code>chmod +r file</code>:表示对file的u,g,o同时都赋予可读权限</li><li>另一种更简单的权限赋予方式，令r = 4, w = 2, x = 1,则u,g,o的权限分别可用一个整数表示，例如<code>chmod 741 file</code>表示file的u,g,o权限为<code>-rwxr----x</code></li><li>参数-R：R及recursive（递归）；<code>chmod -R 741 directory</code>，表示改变目录及目录下所有文件的权限为741。</li></ul></li><li><p>更改文件的所有者：<code>chown</code></p><ul><li><code>chown user file</code>:将file的所有者改为user</li><li><code>chown user.group file</code>:将file的所有者改为user,同时更改其组为group</li><li><code>chown -R user directory</code>：若要更改目录的权限，则需要加-R才能将其里面所有内容的权限更改</li></ul></li><li><p>更改文件的所有组：<code>chgrp</code></p><ul><li><code>chgrp root file</code>: 将file的所有组改为root</li></ul></li><li><p>Linux组的类别：</p><ul><li>用户的主要组：用户必须属于一个且只有一个主组，组名同用户名，且仅包含用户自己。</li><li>用户的附加组：一个用户可属于0或多个附加组。</li><li><code>id 用户名</code>：查看用户的uid、gid（主组）、groups的id。管理员root的uid和gid为0。</li></ul></li><li><p>用户和组的配置文件：</p><ul><li><code>/etc/passwd</code>：用户及其属性信息(名称、UID、主组ID)。</li><li><code>/etc/group</code>：组及其属性信息。</li><li><code>/etc/shadow</code>：用户密码及其相关属性。</li><li><code>/etc/gshadow</code>：组密码及其相关信息。</li></ul></li><li><p>用户、组的增删改：</p><ul><li><code>useradd</code>，<code>userdel</code>，<code>usermod</code></li><li><code>groupadd</code>，<code>groupdel</code>，<code>groupmod</code></li><li><code>/etc/default/useradd</code>：创建用户时的默认设置</li></ul></li><li><p>文件与目录的默认权限与隐藏权限</p><ul><li><p>文件预设权限:在没有umask的情况下，目录默认权限为777，文件默认权限为666；<code>umask 022</code>，表示创建文件和目录，g和o都过滤掉写(2)权限。</p></li><li><p><code>lsattr -a</code>:显示所有隐藏属性</p></li><li><p><code>chattr [-RV][-v][+/-/=&lt;属性&gt;] [文件或目录]</code>:</p><ul><li><p>-R：递归处理，将指定目录下的所有文件及子目录一并处理</p></li><li><p>-v：&lt;版本编号&gt; 设置文件或目录版本</p></li><li><p>-V： 显示指令执行过程</p></li><li><p>+&lt;属性&gt;： 开启文件或目录的该项属性</p></li><li><p>-&lt;属性&gt; ：关闭文件或目录的该项属</p></li><li><p>=&lt;属性&gt;： 指定文件或目录的该项属性</p></li><li><p>属性：</p><ul><li><strong>a：让文件或目录只能加数据</strong>。</li><li><strong>i：不得任意更动文件或目录</strong>。</li><li>b：不更新文件或目录的最后存取时间。</li><li>c：将文件或目录压缩后存放。</li><li>d：将文件或目录排除在倾倒操作之外。</li><li>s：保密性删除文件或目录。</li><li>S：即时更新文件或目录。</li><li>u：预防意外删除。</li></ul></li><li><p>例如<code>chattr +a /var/log/messages</code>:让某个文件只能往里面追加数据，但不能删除，适用于各种日志文件</p></li></ul></li></ul></li><li><p>文件特殊权限</p><ul><li><p><strong>SUID</strong>（最常用）：<code>chmod u+s file</code>：使file文件x权限上显示为s，非用户(u)执行者可以获得u的所有权限</p><ul><li>SUID权限仅对二进制程序有效，不能用在脚本和目录上</li><li>执行者对于该程序有x的可执行权限</li><li>SUID权限仅在执行程序的过程中有效</li><li>让本没有相应权限的用户运行该程序时，可以获得其原本没有权限访问的资源</li></ul></li><li><p>SGID：非组(g)成员获得该组的权限</p><ul><li>非组成员对于该程序需要具备x的权限</li><li>SGID<strong>主要用于目录, 在该目录下创建的任何文件及子目录属于该目录所拥有的组</strong> 。</li></ul></li><li><p>SBIT: 目前只针对目录有效，切只能分配给其他人（o）;对于目录的作用是：当用户在该目录下建立文件或目录时，仅有<strong>自己与 root</strong>才有权力<strong>删除</strong>，例如/tmp。</p></li><li><p><strong>SUID/SGID/SBIT权限设置</strong> ：</p><ul><li><strong>文字法</strong> ：SUID: <strong>u+s</strong> ，SGID: <strong>g+s</strong>，SBIT: <strong>o+t</strong></li><li><em>数字法*</em>：将原来的三位数扩展为四位数即可，SUID为4，SGID为2，SBIT为1，把它们放在权限数字的最开头。例如设置SUID，可以写成<strong>4777</strong>，设置SGID可以写成，<strong>2777</strong> 。</li></ul></li></ul></li><li><p>ACL(Access Control List)实现灵活权限控制：</p><ul><li><p><code>setfacl -m u/g:用户名/组名:权限 file</code>。例如<code>setfacl -m u:Tom:rw abc.txt</code>，即Tom对abc.txt具有r和w权限，若不给权限则权限写<code>0</code>。</p></li><li><p><code>setfacl -x u/g:用户名/组名 file</code>：删除权限。</p></li><li><p><code>setfacl -R -b dir/</code>：删除dir下所有的ACL权限。</p></li><li><p><code>getfacl file</code>：显示file的ACL权限。</p></li><li><p>权限优先级：所有者&gt;ACL权限(用户&gt;组&gt;other)</p></li></ul></li></ul><ul><li><p>权限与指令间的关系(在用户模式下)</p><ul><li><p>用户能进入某目录：需要权限x</p><ul><li>进入目录后能利用ls查阅:需要权限r</li><li>进入目录后能够创建文件和目录:需要权限w</li></ul></li><li><p>用户在目录内打开读取文件：</p><ul><li>目录需要权限x</li><li>文件需要权限r</li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Linux的文件权限与用户组管理&quot;&gt;&lt;a href=&quot;#Linux的文件权限与用户组管理&quot; class=&quot;headerlink&quot; title=&quot;Linux的文件权限与用户组管理&quot;&gt;&lt;/a&gt;Linux的文件权限与用户组管理&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;文件权限：
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://thmasterplan.cn/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://thmasterplan.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>文件链接</title>
    <link href="http://thmasterplan.cn/2019/11/18/%E6%96%87%E4%BB%B6%E9%93%BE%E6%8E%A5/"/>
    <id>http://thmasterplan.cn/2019/11/18/%E6%96%87%E4%BB%B6%E9%93%BE%E6%8E%A5/</id>
    <published>2019-11-17T16:15:31.000Z</published>
    <updated>2019-11-17T16:32:05.287Z</updated>
    
    <content type="html"><![CDATA[<h3 id="文件链接"><a href="#文件链接" class="headerlink" title="文件链接"></a>文件链接</h3><ul><li>硬链接：一个inode号对应多个文件名，硬链接也即同一个文件使用了多个别名，由命令<code>ln oldfile newfile</code>创建。<ul><li>文件有相同的inode和data block</li><li>只能对<strong>已存在的文件</strong>进行创建，链接计数加1</li><li><strong>不能交叉文件系统</strong>进行硬链接的创建</li><li>不能对目录进行创建，只可对文件创建</li><li>删除一个硬链接文件并不影响其他有相同inode号的文件</li></ul></li><li>软链接（符号链接）：软链接的data block中存放的内容是另一文件的路径名的指向。软链接有自己的inode号和data block。由命令<code>ln -s oldfile newfile</code>创建，其中<code>oldfile</code>的相对路径为相对于<code>newfile</code>的，而<code>newfile</code>的相对路径是相对于当前工作目录的。<code>rm -rf a.link/</code>删除的是链接指向的文件，而<code>rm -rf a.link</code>删除的才是链接。<ul><li>软链接有自己的文件属性及权限</li><li>可对不存在的文件或目录创建软链接</li><li>软链接可交叉文件系统</li><li>软链接可对文件或目录创建</li><li>创建软链接时，链接计数不会增加</li><li>删除软链接并不影响被指向的文件，但若被指向的原文件被删除，则相关软连接被称为死链接（即 dangling link，若被指向路径文件被重新创建，死链接可恢复为正常的软链接）</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;文件链接&quot;&gt;&lt;a href=&quot;#文件链接&quot; class=&quot;headerlink&quot; title=&quot;文件链接&quot;&gt;&lt;/a&gt;文件链接&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;硬链接：一个inode号对应多个文件名，硬链接也即同一个文件使用了多个别名，由命令&lt;code&gt;ln oldfil
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://thmasterplan.cn/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://thmasterplan.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>目录配置与文件目录管理</title>
    <link href="http://thmasterplan.cn/2019/11/18/%E7%9B%AE%E5%BD%95%E9%85%8D%E7%BD%AE%E4%B8%8E%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E7%AE%A1%E7%90%86/"/>
    <id>http://thmasterplan.cn/2019/11/18/%E7%9B%AE%E5%BD%95%E9%85%8D%E7%BD%AE%E4%B8%8E%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E7%AE%A1%E7%90%86/</id>
    <published>2019-11-17T16:14:20.000Z</published>
    <updated>2019-11-17T16:33:05.292Z</updated>
    
    <content type="html"><![CDATA[<h3 id="目录配置与文件目录管理"><a href="#目录配置与文件目录管理" class="headerlink" title="目录配置与文件目录管理"></a>目录配置与文件目录管理</h3><ul><li><p>目录配置：可参考FHS标准</p><ul><li><code>/bin</code>:存放二进制文件，常用命令</li><li><code>/boot</code>：系统启动项文件,内核</li><li><code>/dev</code>:设备文件，硬盘等</li><li><code>/etc</code>：配置文件</li><li><code>/home</code>:用户家目录，每一个用户在/home下都有一个文件夹</li><li><code>/lib</code>：链接库文件</li><li><code>/media</code>：媒体自动挂载点，比如U盘，光盘等</li><li><code>/mnt</code>：媒体挂载点，手动挂载</li><li><code>/opt</code>：自定义软件安装处，默认安装处为/usr/local</li><li><code>/root</code>：超级用户目录</li><li><code>/sbin</code>：存放系统管理员所能执行的命令</li><li><code>/tmp</code>：临时文件</li><li><code>/usr</code>：类似于二层根目录</li><li><code>/var</code>:存放缓存，日志，数据库文件；该文件夹需要分配的空间较大，因此在磁盘分区时挂载在/var的分区要大一些。</li><li><code>/proc</code>：内存中的进程信息</li><li><code>/sys</code>：硬件相关信息</li></ul></li><li><p>文件与目录管理</p><ul><li><p>常用命令：</p><ul><li><code>cd ~</code>:切换到home;<code>cd -</code>:切换到上一次所在目录</li><li><code>pwd</code>：打印当前目录</li><li><code>basename 和 dirname</code>：分别获取当前路径的文件名和目录名</li><li><code>touch xx</code>:若xx不存在，则创建一个新文件xx。若xx存在，把xx的修改时间改为当前。</li><li><code>&gt; xx</code>：若文件不存在，则创建一个空文件xx；若文件存在，则清空现有文件xx(可用于清空大文件)。</li><li><code>mkdir 目录名 目录名 目录名 ...</code></li><li><code>mkdir -p test/{a,b,c}/{d,e}</code>:递归创建目录，分别在a,b,c三个目录下创建d,e两个目录。</li><li><code>rmdir 目录名</code>:只能删除空目录</li><li><code>rm -rf</code>目录:删除目录下所有东西（慎用<code>rm</code>）</li><li><code>cp [选项] /PATH1/xx /PATH2/yy</code>:若yy是一个目录，则把文件xx拷贝到yy下；若yy不是一个目录，则把文件xx拷贝到PATH2目录下并<strong>重命名</strong>为yy。cp不能直接拷贝目录，需要加选项参数，<code>cp -rfp /目录1 /目录2 == cp -a /目录1 /目录2</code>：将目录1及其所有子目录及文件拷贝到目录2。参数：-r即递归，-f即强制,-p同时复制属性信息。</li><li><code>mv [选项] /PATH1/xx /PATH2/yy</code>：若yy是一个目录，则把文件xx剪切到yy下；若yy不是一个目录，则把文件xx剪切到PATH2目录下并<strong>重命名</strong>为yy。例如<code>mv xx yy</code>:就是把xx重命名为yy。</li><li><code>rename .log .logabc *</code>：重命名，把所有文件名中的<code>.log</code>改为<code>.logabc</code></li></ul></li><li><p>关于执行文件路径的变量：执行程序必须在其所在目录下才能执行，亦可使用绝对路径调用，若要直接敲命令就可以执行，则需要设置PATH，把命令所在目录添加在PATH后面。</p></li><li><p>文件的三个时间属性:</p><ul><li><code>atime</code>:access time</li><li><code>mtime</code>:modify time</li><li><code>ctime</code>:change time</li></ul></li><li><p>文件名规则：</p><ul><li>文件名最长255字节</li><li>蓝色–&gt;目录；绿色–&gt;可执行文件；红色–&gt;压缩文件；浅蓝色–&gt;链接文件；黄色–&gt;设备文件；粉色–&gt;套接字文件；棕色–&gt;管道文件；灰色–&gt;其他文件</li></ul></li><li><p>文件通配符：</p><ul><li><code>*</code>：匹配0个或多个字符</li></ul></li><li><p><code>?</code>：匹配任意一个字符</p><ul><li><code>[1-5]</code>：匹配字符1,2,3,4,5</li><li><code>[a-c]</code>：匹配字符a、A、b、B、c(没有C)。</li><li><code>[A-C]</code>：匹配A，b，B，c，C</li><li><code>[^abcd]</code>：匹配除abcd外的所有单个字母</li><li><img src="filematch.jpg" alt=""></li></ul></li><li><p>文件内容查阅</p><ul><li><code>cat 文件名</code>:显示所有文件内容，适合查看小文件，参数-n显示行数。<code>cat -n 文件名== nl 文件名</code>。</li><li><code>tac</code>：从最后一行显示，倒数显示。</li><li><code>more/less 文件名</code>:按空格一屏一屏地显示，按回车一行一行地显示。同时在文档下方输入<code>/字符串</code>即可查找文档中的字符串。</li><li><code>head -n 21 文件名</code>:查看文件的前21行</li><li><code>tail -n 21 文件名</code>:查看文件的尾21行；参数-f,监测日志，实时监测日志的变化。</li><li><code>od</code>:查看非文本文档，比如二进制文件。</li></ul></li><li><p>命令与文件的查询：</p><ul><li><p><code>which -a 命令</code>:在PATH路径中搜寻命令位置</p></li><li><p><code>whereis 命令</code>:返回命令路径及其帮助文档的路径；参数-b只返回命令路径。</p></li><li><p><code>locate 字符串</code>:在<code>/var/lib/mlocate/mlocate.db</code>中查询所有文件名中包含该字符串的文件并返回，该数据库每天定时更新，亦可通过<code>updatedb</code>更新。</p></li><li><p><code>find [paths] [expression] [actions]</code>:</p><ul><li><p>若不写paths则默认在当前目录下递归查找；</p></li><li><p>expression:</p><ol><li>根据文件名检索</li></ol><p>find 命令中的 <code>-name</code> 选项可以根据文件名称进行检索（<strong>区分大小写</strong>）。如需要忽略文件名中的大小写，可以使用 <code>-iname</code> 选项。</p><p><code>-name</code> 和 <code>-iname</code> 两个选项都支持 <strong>wildcards</strong> 。如：</p><ul><li><code>?</code> 可以表示任意一个单一的符号</li><li><code>*</code> 可以表示任意数量（包括 0）的未知符号</li></ul><p><code>find /usr -name &#39;*.txt&#39;</code> 查找 /usr 目录下所有文件名以 <code>.txt</code> 结尾的文件<br><code>find /usr -name &#39;????&#39;</code> 查找 /usr 目录下所有文件名刚好为 4 个字符的文件</p><p>有些时候，你需要在搜索时匹配某个文件或目录的<strong>完整路径</strong>，而不仅仅是匹配文件名。可以使用 <code>-path</code> 或 <code>-ipath</code> 选项。</p><p>如查找 /usr 下所有文件名以 <code>.txt</code> 结尾的文件或目录，且该文件的父目录必须是 <code>src</code>。可以使用以下命令：<br> <code>find /usr -path &#39;*/src/*.txt&#39;</code></p><ol start="2"><li>根据文件类型检索</li></ol><p>如果只想搜索得到文件<strong>或</strong>目录，即不想它们同时出现在结果中。可以使用 <code>-type</code> 选项指定文件类型。</p><p><code>-type</code> 选项最常用的参数如下：</p><ul><li>f: 文件</li><li>d: 目录</li><li>l: 符号链接</li></ul><p><code>find /usr -type d -name &#39;python*&#39;</code> 检索 /usr 下所有文件名以 <code>python</code> 开头的<strong>目录</strong></p><ol start="3"><li>检索空文件</li></ol><p>find 命令支持 <code>-empty</code> 选项用来检索<strong>为空</strong>的文件或目录。空文件即文件里没有任何内容，空目录即目录中没有任何文件或子目录。</p><p><code>find ~ -type d -empty</code> 检索用户主目录下所有的空目录</p><ol start="4"><li>反义匹配</li></ol><p>find 命令也允许用户对当前的匹配条件进行<strong>“反义”</strong>（类似于<strong>逻辑非</strong>操作）。</p><p>如需要检索 /usr 下所有文件名<strong>不</strong>以 <code>.txt</code> 为后缀的文件。可以使用以下命令：<br> <code>find /usr -type f ! -name &#39;*.txt&#39;</code></p><p>也可以“翻转”任何其他的筛选条件，如：<br> <code>find /usr -type f ! -empty</code> 检索 /usr 下所有内容不为空的文件</p><ol start="5"><li>根据文件的所属权检索</li></ol><p>为了检索归属于特定用户的文件或目录，可以使用 <code>-user</code> 选项。</p><p><code>find / -type f -user starky</code> 检索根目录下所有属主为 starky 的文件</p><p>类似于 <code>-user</code>选项，<code>-group</code> 选项则可以根据文件或目录的<strong>属组</strong>进行检索。</p><ol start="6"><li>根据时间日期进行检索</li></ol><p>有些时候，需要根据文件创建或修改的时间进行检索。</p><p>Linux 系统中，与文件相关联的时间参数有以下三种：</p><ul><li>修改时间（Modification time）：最后一次文件内容有过更改的时间点</li><li>访问时间（Access time）：最后一次文件有被读取过的时间点</li><li>变更时间（Change time）：最后一次文件有被<strong>变更</strong>过的时间点（如内容被修改，或权限等 metadata 被修改）</li></ul><p>与此对应的是 find 命令中的 <code>-mtime</code>，<code>-atime</code> 和 <code>-ctime</code> 三个选项。</p><p>这三个选项的使用遵循以下示例中的规则：</p><ul><li><code>-mtime 2</code>：该文件 2 天前被修改过</li><li><code>-mtime -2</code>：该文件 2 天<strong>以内</strong>被修改过</li><li><code>-mtime +2</code>：该文件距离上次修改已经<strong>超过</strong> 2 天时间</li></ul><p><code>find /usr -type f -mtime 2</code> 检索 /usr 下两天前被修改过的文件</p><p>如果觉得 <code>-mtime</code> 等选项以<strong>天</strong>为单位时间有点长，还可以使用 <code>-mmin</code>，<code>-amin</code>，<code>-cmin</code> 三个选项：<br> <code>find /usr -type f -mtime +50 -mtime -100</code> 检索 /usr 下 50 到 100 天之前修改过的文件<br> <code>find /usr -type f -mtime 2 -amin 5</code> 检索 /usr 下两天前被修改过且 5 分钟前又读取过的文件</p><ol start="7"><li>根据文件大小检索</li></ol><p><code>-size</code> 选项允许用户通过文件大小进行搜索（只适用于文件，目录没有大小……）。</p><p>表示文件大小的单位由以下字符组成：</p><ul><li><code>c</code>：字节</li><li><code>k</code>：Kb</li><li><code>M</code>：Mb</li><li><code>G</code>：Gb</li></ul><p>另外，还可以使用 <code>+</code> 或 <code>-</code> 符号表示<strong>大于</strong>或<strong>小于</strong>当前条件。</p><p><code>find / -size +1G</code> 检索文件大小高于 1 GB 的文件</p><ol start="8"><li>根据文件权限检索</li></ol><p>find 命令可以使用 <code>-perm</code> 选项以文件权限为依据进行搜索。</p><h6 id="使用符号形式"><a href="#使用符号形式" class="headerlink" title="使用符号形式"></a>使用符号形式</h6><p>如需要检索 /usr 目录下权限为 <code>rwxr-xr-x</code> 的文件，可以使用以下命令：<br> <code>find /usr -perm u=rwx,g=rx,o=rx</code></p><p>搜索 /usr 目录下所有权限为 <code>r-xr-xr-x</code>（即系统中的所有用户都只有读写权限）的文件和目录，可以使用以下命令：<br> <code>find /usr -perm a=rx</code></p><p>很多时候，我们只想匹配文件权限的一个<strong>子集</strong>。比如，检索可以直接被任何用户执行的文件，即只关心文件的执行权限，而不用管其读写权限是什么。</p><p>上述的需求可以通过以下命令实现：<code>find / -type f -perm /a=x</code><br> 其中 <code>a=x</code> 前面的 <code>/</code> 符号即用来表示只匹配权限的某个子集（执行权限），而不用关心其他权限的具体设置。</p><h6 id="使用数字形式"><a href="#使用数字形式" class="headerlink" title="使用数字形式"></a>使用数字形式</h6><p><code>-perm</code> 选项也支持数字形式的文件权限标记。</p><p><code>find /usr -perm 644</code> 搜索 /usr 目录下权限为 <strong>644</strong>（即 <code>rwxr-xr-x</code>）的文件</p><ol start="9"><li>限制遍历的层数</li></ol><p>find 命令默认是以<strong>递归</strong>的方式检索项目的，这有时候会导致得到的结果数量非常巨大。可以使用 <code>-maxdepth</code> 限制 find 命令递归的层数。</p><p><code>find / -maxdepth 3</code> 搜索时向下递归的层数最大为 3</p><ol start="10"><li>逻辑组合</li></ol><p>在之前的例子中有出现多个搜索条件的<strong>组合</strong>以及对某个搜索条件的<strong>反转</strong>。<br> 实际上 find 命令支持 <strong>“and”</strong> 和 <strong>“or”</strong> 两种逻辑运算，对应的命令选项分别是 <code>-a</code> 和 <code>-o</code>。通过这两个选项可以对搜索条件进行更复杂的组合。</p><p>此外还可以使用<strong>小括号</strong>对搜索条件进行<strong>分组</strong>。注意 <code>find</code> 命令中的小括号常需要用<strong>单引号</strong>包裹起来。因小括号在 Shell 中有特殊的含义。</p><p>如检索 /usr 下文件名以 <code>python</code> 开头且类型为目录的文件<br> <code>find /usr -type d -name &#39;python*&#39;</code></p><p>该命令等同于：<br> <code>find /usr -type d -a -name &#39;python*&#39;</code></p><p>更复杂的组合形式如：<br> <code>find / &#39;(&#39; -mmin -5 -o -mtime +50 &#39;)&#39; -a -type f</code></p></li><li><p>对搜索结果执行actions：</p><ol><li>删除文件</li></ol><p><code>-delete</code> 选项可以用来删除搜索到的文件和目录。</p><p>如删除 home 目录下所有的空目录：<br> <code>find ~ -type d -empty -delete</code></p><ol start="2"><li>执行自定义命令</li></ol><p><code>-exec</code> 选项可以对搜索到的结果执行特定的命令。</p><p>如需要将 home 目录下所有的 MP3 音频文件复制到移动存储设备（假设路径是 <code>/media/MyDrive</code>），可使用下面的命令：<br> <code>find ~ -type f -name &#39;*.mp3&#39; -exec cp {} /media/MyDrive &#39;;&#39;</code></p><p>其中的<strong>大括号</strong>（<code>{}</code>）作为检索到的文件的 <strong>占位符</strong> ，而分号（ <code>;</code>）作为命令结束的标志。因为分号是 Shell 中有特殊含义的符号，所以需要使用单引号括起来。<br> 每当 find 命令检索到一个符合条件的文件，会使用其完整路径取代命令中的 <code>{}</code>，然后执行 <code>-exec</code> 后面的命令一次。</p><p>另一个很重要的用法是，在多个文件中检索某个指定的字符串。<br> 如在用户主目录下的所有文件中检索字符串 <code>hello</code> ，可以使用如下命令：<br> <code>find ~ -type f -exec grep -l hello {} &#39;;&#39;</code></p><h6 id="exec-选项中的-符号"><a href="#exec-选项中的-符号" class="headerlink" title="-exec 选项中的 + 符号"></a>-exec 选项中的 + 符号</h6><p>创建 Gzip 格式的压缩文件的命令为：<code>tar -czvf filename.tar.gz</code></p><p>现在假设需要将用户主目录下所有的 MP3 文件添加到压缩包 <code>music.tar.gz</code> 中，直观的感觉是，其命令应为如下形式：<br> <code>find ~ -type f -name &#39;*.mp3&#39; -exec tar -czvf music.tar.gz {} &#39;;&#39;</code></p><p>实际情况是，这样得到的 <code>music.tar.gz</code> 其实只包含一个 MP3 文件。<br> 原因是 find 命令<strong>每次</strong>发现一个音频文件，都会再执行一次 <code>-exec</code> 选项后面的压缩命令。导致先前生成的压缩包被覆盖。</p><p>可以先让 find 命令检索出所有符合条件的音频文件，再将得到的<strong>文件列表</strong>传递给后面的压缩命令。完整的命令如下：<br> <code>find ~ -type f -name &#39;*.mp3&#39; -exec tar -czvf music.tar.gz {} +</code></p><h6 id="显示文件信息"><a href="#显示文件信息" class="headerlink" title="显示文件信息"></a>显示文件信息</h6><p>如果想浏览搜索到的文件（目录）的详细信息（如权限和大小等），可以直接使用 <code>-ls</code> 选项。</p><p><code>find / -type file -size +1G -ls</code> 浏览所有 1G 以上大小的文件的详细信息</p></li></ul></li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;目录配置与文件目录管理&quot;&gt;&lt;a href=&quot;#目录配置与文件目录管理&quot; class=&quot;headerlink&quot; title=&quot;目录配置与文件目录管理&quot;&gt;&lt;/a&gt;目录配置与文件目录管理&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;目录配置：可参考FHS标准&lt;/p&gt;
&lt;ul&gt;
&lt;l
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://thmasterplan.cn/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://thmasterplan.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>磁盘与文件系统简介</title>
    <link href="http://thmasterplan.cn/2019/11/18/%E7%A3%81%E7%9B%98%E4%B8%8E%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%AE%80%E4%BB%8B/"/>
    <id>http://thmasterplan.cn/2019/11/18/%E7%A3%81%E7%9B%98%E4%B8%8E%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%AE%80%E4%BB%8B/</id>
    <published>2019-11-17T16:12:54.000Z</published>
    <updated>2019-11-17T17:49:39.647Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Linux磁盘与文件系统简介-centOS7之后使用xfs，centOS6使用ext4"><a href="#Linux磁盘与文件系统简介-centOS7之后使用xfs，centOS6使用ext4" class="headerlink" title="Linux磁盘与文件系统简介(centOS7之后使用xfs，centOS6使用ext4)"></a>Linux磁盘与文件系统简介(centOS7之后使用xfs，centOS6使用ext4)</h3><ul><li><p>文件系统特性</p><ul><li>索引式文件系统：对于linux，文件的权限和属性放置到inode中，文件的实际数据放在data block中。<ul><li>superblock:记录此filesystem的整体信息，包括inode/block的总量、使用量、剩余量,以及文件系统的格式与相关信息等。</li><li>inode:记录文件的属性，一个文件占用一个inode，同时记录此文件的数据所在的block号码。</li><li>block:实际记录文件的内容，若文件过大一般会占用多个block。</li></ul></li></ul></li><li><p>linux的EXT2</p><ul><li><p>ext2文件系统示意图</p><p><img src="ext2.jpg" alt=""></p></li><li><p>data clock：ext2文件系统所支持的block大小有1K,2K和4K三种</p><table><thead><tr><th align="center">Block大小</th><th>1KB</th><th>2KB</th><th>4KB</th></tr></thead><tbody><tr><td align="center">最大单一文件限制</td><td>16GB</td><td>256GB</td><td>2TB</td></tr><tr><td align="center">最大文件系统总容量</td><td>2TB</td><td>8TB</td><td>16TB</td></tr></tbody></table><ul><li>除非重新格式化，block的大小与数量在格式化完就不能再改变</li><li>每个blcok内最多只能放置一个文件的数据</li><li>若文件大于block,则一个文件占用多个block；若文件小于block，则该blcok的剩余容量就不能再被使用。</li></ul></li><li><p>inode table:记录文件的权限，拥有者与群组，容量，建立、最近一次读取、更改的时间。。。</p><ul><li>每个inode大小均为固定128字节（ext4和xfs可设定到256字节）</li><li>每个文件仅占用一个inode</li><li>系统读取文件时需要先找到inode，并分析inode所记录的权限与用户是否符合。</li></ul></li><li><p>superblock：一般为1024字节</p></li><li><p><code>dumpe2fs</code>：查询EXT系列superblock信息的指令</p></li></ul></li><li><p>文件系统与目录树的关系</p><ul><li>目录：当在linux下的文件系统建立一个目录时，文件系统会分配一个inode与至少一块block给该目录，其中inode记录该目录的相关权限和属性，并记录分配的那块block号码，而block则记录在这个目录下的文件名与该文件名占用的inode号；<code>ls -i</code>查询当前目录下文件的inode号码。</li><li>文件:在ext2建立一个文件时，ext2会分配一个inode和相对于该文件大小的block数量。</li><li>目录树:例如读取/etc/passwd过程:<code>/的inode -&gt; /的block -&gt; etc/的inode -&gt; etc/的block -&gt; passwd的inode -&gt; passwd的block</code>。</li></ul></li><li><p>日志式文件系统</p></li><li><p>挂载点的意义：挂载点一定是目录，该目录为进入该文件系统的入口。</p></li><li><p>Linux VFS用于管理所有类型的filesystem</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Linux磁盘与文件系统简介-centOS7之后使用xfs，centOS6使用ext4&quot;&gt;&lt;a href=&quot;#Linux磁盘与文件系统简介-centOS7之后使用xfs，centOS6使用ext4&quot; class=&quot;headerlink&quot; title=&quot;Linux磁
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://thmasterplan.cn/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://thmasterplan.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>常用命令入门</title>
    <link href="http://thmasterplan.cn/2019/11/18/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%85%A5%E9%97%A8/"/>
    <id>http://thmasterplan.cn/2019/11/18/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%85%A5%E9%97%A8/</id>
    <published>2019-11-17T16:11:48.000Z</published>
    <updated>2019-11-17T17:02:15.820Z</updated>
    
    <content type="html"><![CDATA[<h3 id="常用命令入门"><a href="#常用命令入门" class="headerlink" title="常用命令入门"></a>常用命令入门</h3><ul><li><p>Xwindow与命令行界面的切换：<code>ctrl + alt + f1...f7</code>，其中只有f7为图形化界面，启动图形化界面也可以用<code>startx</code>命令。</p></li><li><p>命令帮助：</p><ul><li><p><code>whatis 命令</code>：列出命令的作用以及man帮助的章节。</p></li><li><p><code>命令 --help</code>：命令用法</p></li><li><p><code>man 章节号 命令</code>：命令更详细的用法</p></li><li><p><code>info 命令</code></p></li><li><p><code>man -k 字符串</code>:查找所有包含该字符串的命令</p></li><li><p><code>help</code>：列出所有的内部命令</p></li></ul></li><li><p>常见命令与快捷键：</p><ul><li><p><code>ls -a/-l</code>:列出当前目录所有文件；<code>ls -l == ll</code>;<code>ls -d .*/</code>：列出所有目录</p></li><li><p><code>date</code>:获取当前日期</p></li><li><p><code>cal</code>:获取日历</p></li><li><p><code>bc</code>:进入计算器,<code>scale = n</code>,n表示计算的精度</p></li><li><p><code>[Tab]</code>:命令、文件名、选项、参数补全，连续两次<code>Tab</code>键可列出所有选项</p></li><li><p><code>ctrl c</code>:终止目前程序</p></li><li><p><code>ctrl d</code> :等同于输入exit</p></li><li><p><code>shift pageup/pagedown</code>:翻页</p></li><li><p><code>nano</code>:一个简单的文本编辑器</p></li><li><p><code>reboot/shutdown -r</code>:重启；<code>shutdown/poweroff</code>:关机；<code>shutdown -h 1</code>:定时1分钟关机；<code>shutdown -h 8:20</code>:8:20关机</p></li><li><p><code>su -/su root</code>：获取root权限</p></li><li><p><code>sync</code>：将内存中的数据写入磁盘，防止丢失</p></li><li><p><code>clear</code>:清屏</p></li><li><p><code>file 文件名</code>:查看文件类型</p></li><li><p><code>tree</code>:查询当前目录的树形结构,需要安装；选项<code>-d</code>只显示目录；选项<code>-L</code>显示指定层级；例如<code>tree -d /boot -L 1</code>。</p></li><li><p><code>passwd</code>：更改密码</p></li><li><p><code>hostname</code>：查看主机名；<code>hostnamectl set-hostname 名字</code>：更改主机名。</p></li><li><p><code>ls -l $(which passwd)</code>：命令的嵌套执行，用$()表示。</p></li><li><p>修改提示符颜色:修改<code>PS1</code>变量的值，并保存在配置文件<code>/etc/profile.d/env.sh</code>中。</p></li><li><p><code>type 命令</code>：查看命令类型，内部命令集成在shell中。</p></li><li><p><code>enable</code>：查看所有内部命令；<code>enable -n 命令</code>:禁用内部命令</p></li><li><p><code>Hash缓存表:</code>系统初始hash表为空，当<strong>外部命令</strong>执行时，默认会从PATH路径下寻找该命令，找到后会将该命令的路径记录到hash表中，当再次使用该命令时，shell解释器首先查看hash表，存在则执行命令，不存在则去PATH路径下寻找，利用hash缓存表可大大提高命令的调用速率。</p><ul><li><code>hash</code>：显示hash缓存</li></ul></li><li><p>将外部命令路径添加到<code>/etc/profile</code>文件的<code>PATH=$PATH:/xxx/yy</code>中，再用<code>source /etc/profile</code>即可在任意路径下使用该外部命令。</p></li><li><p><code>alias 别名 = &#39;常用命令&#39;：</code>设立别名；在centos7中，需在<code>/root/.bashrc</code>中保存。</p><ul><li><code>alias</code>可列出所有别名。</li><li>命令执行优先级:别名&gt;内部命令&gt;外部命令hash表&gt;$PATH。</li><li>若别名与原命令同名，可通过<code>\命令名</code>执行原命令。</li><li>编辑配置文件不会立即生效，可通过<code>. 配置文件名</code>使bash进程重新读取配置文件使编辑生效。</li></ul></li><li><p>多个命令可以用<code>;</code>分开一起执行，一个长命令可以用<code>\</code>分成多行。</p></li><li><p><code>echo：</code>回显字符串；显示变量</p><ul><li>单引号：单引号中的内容就是字符串</li><li>反向单引号：其中的内容命令和变量均能识别。例如：<code>touch `date +%F`.log</code>：创建以当前时间命名的文件。反向单引号等价于<code>$()</code>。</li><li>双引号：能识别变量不能识别命令</li><li><code>{}</code>：打印重复字符串；例如<code>touch file{1..10}</code>：创建了10个文件分别为file1,file2,,,file10。</li></ul></li><li><p><code>Alt 数字n</code>:重复显示字符n次</p></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;常用命令入门&quot;&gt;&lt;a href=&quot;#常用命令入门&quot; class=&quot;headerlink&quot; title=&quot;常用命令入门&quot;&gt;&lt;/a&gt;常用命令入门&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Xwindow与命令行界面的切换：&lt;code&gt;ctrl + alt + f1...f7&lt;/
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://thmasterplan.cn/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://thmasterplan.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>标准IO和重定向</title>
    <link href="http://thmasterplan.cn/2019/11/18/%E6%A0%87%E5%87%86IO%E5%92%8C%E9%87%8D%E5%AE%9A%E5%90%91/"/>
    <id>http://thmasterplan.cn/2019/11/18/%E6%A0%87%E5%87%86IO%E5%92%8C%E9%87%8D%E5%AE%9A%E5%90%91/</id>
    <published>2019-11-17T16:09:31.000Z</published>
    <updated>2019-11-17T16:30:58.678Z</updated>
    
    <content type="html"><![CDATA[<h3 id="标准IO和重定向"><a href="#标准IO和重定向" class="headerlink" title="标准IO和重定向"></a>标准IO和重定向</h3><ul><li>三种I/O设备<ul><li>标准输入(STDIN)：（文件描述符0） 默认接收来自键盘的输入</li><li>标准输出（STDOUT）：（文件描述符1） 默认输出到终端窗口</li><li>标准错误（STDERR）：（文件描述符2） 默认输出到终端窗口</li></ul></li><li>I/O重定向至文件<ul><li>标准输出重定向：<code>&gt;</code>；例如<code>hostname &gt; /dev/pts/2</code>将输出重定向至另一设备；若为文件，则清空文件再写入。<code>&gt;&gt;</code>则是追加，而不清空原文件；例如<code>hostname &gt;&gt; /data/abc.log</code>。</li><li>标准错误重定向：<code>2&gt;</code>；<code>&gt;&gt;</code>则是追加。</li><li><code>&amp;&gt;</code>：标准输出和标准错误一起重定向。</li><li>标准输入重定向：<code>&lt;</code>；例如<code>bc &lt; bc.txt</code>，将bc.txt文件作为输入用bc计算。</li><li><code>tr [选项] set1 set2</code> ：将输入的文本中所有的s1替换为s2。·<ul><li><code>-d</code>：删除所有属于set1的字符。</li><li><code>-s</code>：把连续重复的字符以单独一个字符表示。</li><li><code>-t</code>：把set1对应字符转换为set2对应字符。</li></ul></li><li><code>cat &gt; abc.log</code>：标准输入单行重定向到文件；<code>cat &lt;&lt;EOF &gt;abc.log</code>标准输入多行重定向至文件，输入EOF才写入文件。</li></ul></li><li>使用管道<ul><li>管道<code>命令1 | 命令2 | 命令3 | ...</code>：将命令1的STDOUT发送给命令2的STDIN，再将命令2的STDOUT发送给命令3的STDIN。。。</li><li>STDERR默认不能通过管道转发，可利用<code>|&amp;</code>实现。</li><li>例子：<code>echo {1..100} | tr &#39; &#39; + | bc</code>：计算1到100的和。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;标准IO和重定向&quot;&gt;&lt;a href=&quot;#标准IO和重定向&quot; class=&quot;headerlink&quot; title=&quot;标准IO和重定向&quot;&gt;&lt;/a&gt;标准IO和重定向&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;三种I/O设备&lt;ul&gt;
&lt;li&gt;标准输入(STDIN)：（文件描述符0） 默认接
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://thmasterplan.cn/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://thmasterplan.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>VIM的简单使用</title>
    <link href="http://thmasterplan.cn/2019/11/18/VIM%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>http://thmasterplan.cn/2019/11/18/VIM%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</id>
    <published>2019-11-17T16:08:02.000Z</published>
    <updated>2019-11-17T16:29:57.944Z</updated>
    
    <content type="html"><![CDATA[<h3 id="VIM：一个模式编辑器"><a href="#VIM：一个模式编辑器" class="headerlink" title="VIM：一个模式编辑器"></a>VIM：一个模式编辑器</h3><ul><li>三种主要模式：<ul><li>Normal（命令）模式：默认模式，可移动光标，剪切/粘贴文本。<ul><li><code>-&gt; Insert模式：输入i,a,o,I,A,O任意一个</code>；</li><li><code>-&gt; extended command模式:输入:</code>；</li><li><code>h:左; l:右; j:下; k:上</code>；</li><li><code>)</code>：下一句；<code>(</code>：上一句</li><li><code>}</code>：下一段；<code>{</code>：上一段</li><li><code>ctrl d</code>：向下翻半屏</li><li><code>ctrl u</code>：向上翻半屏</li><li><code>/字符串</code>：全文查找字符串</li></ul></li><li>Insert(编辑)模式：可修改文本。<ul><li><code>-&gt; Normal模式:ESC键</code>；</li></ul></li><li>扩展命令(extended command)模式：保存，退出等。<ul><li><code>-&gt; Normal模式：ESC键</code>；</li><li><code>wq</code>：存盘退出；</li><li><code>q!</code>：不存盘退出；</li><li><code>w</code>：临时保存，类似于win下的ctrl+s；</li><li><code>r filename</code>：将filename的文件内容读到当前文件中；</li><li><code>w filename</code>：将当前文件内容写入filename文件中；</li><li><code>!命令</code>：在不退出vim的情况下执行命令；</li></ul></li><li><code>r!命令</code>：在不退出vim的情况下，将执行命令的结果写入当前文件。<ul><li><code>set number</code>：显示行号；输入数字再输入<code>+</code>或<code>-</code>则向下或向上跳相应行数。</li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;VIM：一个模式编辑器&quot;&gt;&lt;a href=&quot;#VIM：一个模式编辑器&quot; class=&quot;headerlink&quot; title=&quot;VIM：一个模式编辑器&quot;&gt;&lt;/a&gt;VIM：一个模式编辑器&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;三种主要模式：&lt;ul&gt;
&lt;li&gt;Normal（命令）模式
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://thmasterplan.cn/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://thmasterplan.cn/tags/Linux/"/>
    
  </entry>
  
</feed>
