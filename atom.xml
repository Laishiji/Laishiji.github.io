<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="https://www.w3.org/2005/Atom">
  <title>TheMasterplan</title>
  
  <subtitle>TheMasterplan</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://thmasterplan.cn/"/>
  <updated>2020-02-09T11:06:47.339Z</updated>
  <id>http://thmasterplan.cn/</id>
  
  <author>
    <name>LSJ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>双指针</title>
    <link href="http://thmasterplan.cn/%E9%9D%A2%E8%AF%95%E5%88%B7%E9%A2%98/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    <id>http://thmasterplan.cn/%E9%9D%A2%E8%AF%95%E5%88%B7%E9%A2%98/%E5%8F%8C%E6%8C%87%E9%92%88/</id>
    <published>2020-02-09T11:05:21.000Z</published>
    <updated>2020-02-09T11:06:47.339Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>升序数组的TwoSum:167</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">if</span>(numbers == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>, end = numbers.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(start &lt; end)&#123;</span><br><span class="line">            <span class="keyword">if</span>(numbers[start] + numbers[end] == target)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;start+<span class="number">1</span>, end+<span class="number">1</span>&#125;;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(numbers[start] + numbers[end] &lt; target)&#123;</span><br><span class="line">                start++;</span><br><span class="line">            &#125; <span class="keyword">else</span> end--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>判断某个数是否为平方数之和：633</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">judgeSquareSum</span><span class="params">(<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(c &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>, end = (<span class="keyword">int</span>)Math.sqrt(c);</span><br><span class="line">        <span class="keyword">while</span>(start &lt;= end)&#123;</span><br><span class="line">            <span class="keyword">int</span> squareSum = start*start + end*end;</span><br><span class="line">            <span class="keyword">if</span>(squareSum == c) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(squareSum &lt; c) start++;</span><br><span class="line">            <span class="keyword">else</span> end--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>反转字符串中的元音字母：345</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">reverseVowels</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        HashSet&lt;Character&gt; vowels = <span class="keyword">new</span> HashSet&lt;&gt;(</span><br><span class="line">        Arrays.asList(<span class="string">'a'</span>, <span class="string">'e'</span>, <span class="string">'i'</span>, <span class="string">'o'</span>, <span class="string">'u'</span>, <span class="string">'A'</span>, <span class="string">'E'</span>, <span class="string">'I'</span>, <span class="string">'O'</span>, <span class="string">'U'</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>, end = s.length() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">char</span>[] result = <span class="keyword">new</span> <span class="keyword">char</span>[s.length()];</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">while</span>(start &lt;= end)&#123;</span><br><span class="line">            <span class="keyword">char</span> startC = s.charAt(start);</span><br><span class="line">            <span class="keyword">char</span> endC = s.charAt(end);</span><br><span class="line">            <span class="keyword">if</span>(!vowels.contains(startC))&#123;</span><br><span class="line">                result[start++] = startC;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(!vowels.contains(endC))&#123;</span><br><span class="line">                result[end--] = endC;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result[start++] = endC;</span><br><span class="line">                result[end--] = startC;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>给定一个非空字符串 <code>s</code>，<strong>最多</strong>删除一个字符。判断是否能成为回文字符串:680</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = s.length() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.charAt(left) == s.charAt(right))&#123;</span><br><span class="line">                left++;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">return</span> isPalindrome(s, left+<span class="number">1</span>, right) || isPalindrome(s, left, right-<span class="number">1</span>);<span class="comment">//如果左右不对称，则判断删除s.charAt(left)或者s.charAt(right)后的子字符串是否为回文串</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(String s, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.charAt(left) != s.charAt(right)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                left++;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>合并两个有序数组：88</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span> m, <span class="keyword">int</span>[] nums2, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = m - <span class="number">1</span>, j = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> k = m+n-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &gt;= <span class="number">0</span> &amp;&amp; j &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums2[j] &gt; nums1[i]) nums1[k--] = nums2[j--];</span><br><span class="line">            <span class="keyword">else</span> nums1[k--] = nums1[i--];</span><br><span class="line">        &#125;<span class="comment">//从两个数组尾部开始比较大小</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//将剩余的某个数组中未比较的元素写入nums1</span></span><br><span class="line">        <span class="keyword">while</span>(i &gt;= <span class="number">0</span>)</span><br><span class="line">            nums1[k--] = nums1[i--];</span><br><span class="line">        <span class="keyword">while</span>(j &gt;= <span class="number">0</span>)</span><br><span class="line">            nums1[k--] = nums2[j--];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>判断链表中是否有环：141（快慢指针）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        <span class="keyword">while</span>(slow != <span class="keyword">null</span> &amp;&amp; fast!= <span class="keyword">null</span> &amp;&amp; fast.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">                slow = slow.next;</span><br><span class="line">                fast = fast.next.next;</span><br><span class="line">                <span class="keyword">if</span>(fast == slow)</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过删除字母匹配到字典里最长单词：524</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findLongestWord</span><span class="params">(String s, List&lt;String&gt; d)</span> </span>&#123;</span><br><span class="line">        String result = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">int</span> maxLength = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(String target : d)&#123;</span><br><span class="line">            <span class="keyword">int</span> targetLen = target.length();</span><br><span class="line">            <span class="keyword">if</span>(isSubStr(s, target))&#123;</span><br><span class="line">               <span class="keyword">if</span>(maxLength &lt; targetLen)&#123;</span><br><span class="line">                   maxLength = targetLen;</span><br><span class="line">                   result = target;</span><br><span class="line">               &#125;<span class="keyword">else</span> <span class="keyword">if</span>(maxLength == targetLen)&#123;</span><br><span class="line">                   <span class="keyword">if</span>(result.compareTo(target) &lt; <span class="number">0</span>) <span class="keyword">continue</span>;<span class="comment">//比较字符串之间的字典顺序使用compareTo方法</span></span><br><span class="line">                   <span class="keyword">else</span> result = target;</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isSubStr</span><span class="params">(String s, String target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//遍历字符串s,每匹配一个target的字符j加1</span></span><br><span class="line">        <span class="keyword">while</span>(i &lt; s.length() &amp;&amp; j &lt; target.length())&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.charAt(i) == target.charAt(j)) j++;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> j == target.length();<span class="comment">//若j等于target.length(),说明target是s的一部分</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;升序数组的TwoSum:167&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
      <category term="面试刷题" scheme="http://thmasterplan.cn/categories/%E9%9D%A2%E8%AF%95%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="leetcode" scheme="http://thmasterplan.cn/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>for foreach iterator</title>
    <link href="http://thmasterplan.cn/JAVA/for-foreach-iterator/"/>
    <id>http://thmasterplan.cn/JAVA/for-foreach-iterator/</id>
    <published>2020-01-31T08:23:18.000Z</published>
    <updated>2020-01-31T08:36:35.141Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、形式"><a href="#一、形式" class="headerlink" title="一、形式"></a>一、形式</h3><ol><li>for: <code>for（int i=0;i&lt;arr.size();i++）{...}</code></li><li>foreach:<code>for（int　i：arr）{...}</code></li><li>iterator:<code>Iterator it = arr.iterator();while(it.hasNext()){ object o =it.next(); ...}</code></li></ol><h3 id="二、差别"><a href="#二、差别" class="headerlink" title="二、差别"></a>二、差别</h3><ol><li>for需要指定集合的大小和集合元素的类型。</li><li>foreach需要知道集合元素的类型。</li><li>iterator既不需要指定集合元素的类型也不需要指定集合的大小。</li><li>foreach是iterator的语法糖，其底层使用iterator实现。</li><li>不能使用foreach语句进行add/remove操作。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、形式&quot;&gt;&lt;a href=&quot;#一、形式&quot; class=&quot;headerlink&quot; title=&quot;一、形式&quot;&gt;&lt;/a&gt;一、形式&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;for: &lt;code&gt;for（int i=0;i&amp;lt;arr.size();i++）{...}&lt;/code&gt;&lt;
      
    
    </summary>
    
    
      <category term="JAVA" scheme="http://thmasterplan.cn/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://thmasterplan.cn/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Java容器</title>
    <link href="http://thmasterplan.cn/JAVA/Java%E5%AE%B9%E5%99%A8/"/>
    <id>http://thmasterplan.cn/JAVA/Java%E5%AE%B9%E5%99%A8/</id>
    <published>2020-01-18T07:35:59.000Z</published>
    <updated>2020-01-18T07:44:02.102Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Java容器关系图"><a href="#Java容器关系图" class="headerlink" title="Java容器关系图"></a>Java容器关系图</h3><p><img src="Java容器.jpg" alt=""></p><ul><li>图片来源：<a href="https://zhuanlan.zhihu.com/p/29421226" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/29421226</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Java容器关系图&quot;&gt;&lt;a href=&quot;#Java容器关系图&quot; class=&quot;headerlink&quot; title=&quot;Java容器关系图&quot;&gt;&lt;/a&gt;Java容器关系图&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;Java容器.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li
      
    
    </summary>
    
    
      <category term="JAVA" scheme="http://thmasterplan.cn/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://thmasterplan.cn/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>接口与抽象类</title>
    <link href="http://thmasterplan.cn/JAVA/%E6%8E%A5%E5%8F%A3%E4%B8%8E%E6%8A%BD%E8%B1%A1%E7%B1%BB/"/>
    <id>http://thmasterplan.cn/JAVA/%E6%8E%A5%E5%8F%A3%E4%B8%8E%E6%8A%BD%E8%B1%A1%E7%B1%BB/</id>
    <published>2020-01-14T03:50:19.000Z</published>
    <updated>2020-01-14T04:16:11.139Z</updated>
    
    <content type="html"><![CDATA[<h3 id="接口与抽象类的异同"><a href="#接口与抽象类的异同" class="headerlink" title="接口与抽象类的异同"></a>接口与抽象类的异同</h3><p><img src="接口与抽象类的区别.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;接口与抽象类的异同&quot;&gt;&lt;a href=&quot;#接口与抽象类的异同&quot; class=&quot;headerlink&quot; title=&quot;接口与抽象类的异同&quot;&gt;&lt;/a&gt;接口与抽象类的异同&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;接口与抽象类的区别.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="JAVA" scheme="http://thmasterplan.cn/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://thmasterplan.cn/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>进程管理</title>
    <link href="http://thmasterplan.cn/Linux/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
    <id>http://thmasterplan.cn/Linux/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</id>
    <published>2019-12-09T05:54:57.000Z</published>
    <updated>2019-12-11T07:28:24.900Z</updated>
    
    <content type="html"><![CDATA[<h3 id="进程管理工具"><a href="#进程管理工具" class="headerlink" title="进程管理工具"></a>进程管理工具</h3><ul><li><p><code>lscpu</code>：显示cpu信息</p></li><li><p><code>pstree -p</code>：打印进程树</p></li><li><p><code>ps</code>：(process state)，Linux系统各进程的相关信息均保存在/proc/PID下</p><ul><li><p>BSD选项，选项前没有<code>-</code>：</p><ul><li><p><code>a</code>：打印所有终端中的进程</p><ul><li><p>STAT：</p><p><img src="STAT.jpg" alt=""></p></li></ul></li><li><p><code>x</code>：与终端无关的进程，例如守护进程</p></li><li><p><code>u</code>：额外显示进程的USER，CPU/MEM占比，RSS（常驻内存集，不包括交换分区）与VSZ（分配给进程的虚拟内存，包括交换分区），START（开始运行的时间）。</p></li><li><p><code>f</code>：显示进程父子关系</p></li><li><p><code>k -%cpu</code>：倒序排序显示cpu占比，<code>-</code>表示倒序</p></li><li><p><code>o</code>：只显示某些选项，后面跟要显示的选项；例如<code>ps axo psr</code>：显示命令使用哪个CPU核</p></li><li><p>Linux优先级：<code>o ni,pri,rtprio</code></p><p><img src="Linux优先级.jpg" alt=""></p></li></ul></li></ul></li><li><p>搜索进程</p><ul><li><p>按预定义的模式：<code>pgrep [options] pattern</code>：</p><ul><li><code>-u uid</code>：有效用户</li><li><code>-U uid</code>：运行命令者</li><li><code>-t terminal</code>：与指定终端相关的进程</li><li><code>-l</code>：显示进程名，例如<code>pgrep -l &#39;^ba.*&#39;</code></li><li><code>-a</code>：显示完整格式的进程名</li><li><code>-P pid</code>：显示指定进程的子进程</li></ul></li><li><p>按程序名称: <code>pidof 程序名</code></p></li></ul></li><li><p>进程管理工具：<code>top</code>，内置命令：</p><ul><li>排序：<code>P</code>：按%CPU；<code>M</code>：按%MEM；<code>T</code>：按累积占据CPU时长(TIME+)</li><li><p>首部信息显示：</p><ul><li>uptime信息：<code>l</code></li><li>tasks及cpu信息：<code>t</code></li><li>cpu内核分别显示：<code>1</code></li><li>内存信息：<code>m</code></li></ul></li><li><p>退出：<code>q</code></p></li><li>修改刷新时间间隔：<code>s</code></li><li>终止进程：<code>k</code></li><li>保存当前进程信息：<code>W</code></li><li><p>栏位信息：</p><ul><li><code>us</code>：用户空间</li><li><code>sy</code>：内核空间</li><li><code>ni</code>：调整nice时间</li><li><code>id</code>：空闲</li><li><code>wa</code>：等待IO时间</li><li><code>hi</code>：硬中断</li><li><code>si</code>：软中断</li><li><code>st</code>：虚拟机偷走的时间</li></ul></li><li><p>选项：</p><ul><li><code>-b</code>：显示所有进程（默认只显示前一部分）</li><li><code>-p</code>：指定显示某些进程</li><li><code>-H</code>：线程模式；示例：<code>top -H -p PID</code>，指定显示某个进程的所有线程</li></ul></li><li><p>EPEL源的<code>htop</code>，功能更丰富的进程管理工具</p></li></ul></li><li><p>内存空间使用状态：<code>free</code></p><ul><li><code>-h</code>：易读格式</li><li><code>-s n</code>：指定刷新间隔为n秒</li></ul></li><li><p>查看虚拟内存使用状态：<code>vmstat</code></p></li><li><p>系统监控工具：</p><ul><li><p><code>iostat</code>：统计CPU和设备IO信息</p></li><li><p><code>iftop</code>：显示带宽使用情况，EPEL源</p></li><li><p><code>dstat</code>：替代iostat,vmstat,ifstat</p></li><li><p><code>iotop</code>：I/O监视器</p></li><li><p><code>nload</code>：查看网络实时吞吐量</p></li><li><p><code>lsof</code>：list open files；恢复文件：</p><p><img src="恢复文件.jpg" alt=""></p></li></ul></li><li><p>进程信号与计划任务实现</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;进程管理工具&quot;&gt;&lt;a href=&quot;#进程管理工具&quot; class=&quot;headerlink&quot; title=&quot;进程管理工具&quot;&gt;&lt;/a&gt;进程管理工具&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;lscpu&lt;/code&gt;：显示cpu信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://thmasterplan.cn/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://thmasterplan.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>matplotlib</title>
    <link href="http://thmasterplan.cn/Python/matplotlib/"/>
    <id>http://thmasterplan.cn/Python/matplotlib/</id>
    <published>2019-12-05T04:50:04.000Z</published>
    <updated>2019-12-06T06:38:21.568Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>基本用法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.linspace(<span class="number">-1</span>,<span class="number">1</span>,<span class="number">50</span>)</span><br><span class="line">y = x**<span class="number">3</span>+<span class="number">1</span></span><br><span class="line">plt.plot(x,y)</span><br><span class="line">plt.show</span><br></pre></td></tr></table></figure></li><li><p>figure</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.linspace(<span class="number">-1</span>,<span class="number">1</span>,<span class="number">50</span>)</span><br><span class="line">y = x**<span class="number">3</span>+<span class="number">1</span></span><br><span class="line">y2 = x**<span class="number">2</span><span class="number">-2</span></span><br><span class="line"></span><br><span class="line">plt.figure() <span class="comment">#创建一张图</span></span><br><span class="line">plt.plot(x,y,label=<span class="string">'up'</span>)</span><br><span class="line">plt.plot(x,y2,color=<span class="string">'red'</span>,linewidth=<span class="number">1.5</span>,linestyle=<span class="string">'--'</span>,label=<span class="string">'down'</span>)</span><br><span class="line"></span><br><span class="line">plt.legend()<span class="comment">#设置图例，需在调用plot()方法时指定label</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#plt.annotate()该方法对图中数据作详细注释</span></span><br><span class="line"><span class="comment">#plt.text()该方法在作简单的文本注释</span></span><br><span class="line"></span><br><span class="line">plt.xlim((<span class="number">-1</span>,<span class="number">2</span>)) <span class="comment">#设置x轴范围</span></span><br><span class="line">plt.ylim((<span class="number">-2</span>,<span class="number">3</span>)) <span class="comment">#设置y轴范围</span></span><br><span class="line"><span class="comment">#plt.xticks(np.linspace(-1,2,5)) #设置x轴范围并均匀划分为5段</span></span><br><span class="line"><span class="comment">#plt.yticks([-2,0,3],['bad','normal','good']) #以文字代替数字表示y轴范围</span></span><br><span class="line">plt.xlabel(<span class="string">'This is x'</span>) <span class="comment">#设置x轴的标签</span></span><br><span class="line">plt.ylabel(<span class="string">'This is y'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li><li><p>散点图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">plt.figure()</span><br><span class="line">X = np.random.normal(<span class="number">0</span>,<span class="number">1</span>,<span class="number">1024</span>)</span><br><span class="line">Y = np.random.normal(<span class="number">0</span>,<span class="number">1</span>,<span class="number">1024</span>)</span><br><span class="line">T = np.arctan2(Y,X)</span><br><span class="line">plt.scatter(X,Y,s=<span class="number">75</span>,c=T,alpha=<span class="number">0.5</span>)</span><br><span class="line"><span class="comment">#plt.bar()柱状图</span></span><br><span class="line">plt.xlim((<span class="number">-1.5</span>,<span class="number">1.5</span>))</span><br><span class="line">plt.ylim((<span class="number">-1.5</span>,<span class="number">1.5</span>))</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li><li><p>subplot</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">plt.figure()</span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">plt.plot([<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">plt.plot([<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">plt.plot([<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>)</span><br><span class="line">plt.plot([<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;基本用法&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2
      
    
    </summary>
    
    
      <category term="Python" scheme="http://thmasterplan.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="http://thmasterplan.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Numpy_Pandas</title>
    <link href="http://thmasterplan.cn/Python/Numpy-Pandas/"/>
    <id>http://thmasterplan.cn/Python/Numpy-Pandas/</id>
    <published>2019-12-05T04:49:23.000Z</published>
    <updated>2019-12-05T13:27:39.968Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Numpy"><a href="#Numpy" class="headerlink" title="Numpy"></a>Numpy</h3><ul><li><p>创建数组：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">arr = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line"></span><br><span class="line">print(arr)</span><br><span class="line">print(<span class="string">'元素类型：'</span>,arr.dtype) <span class="comment">#默认为int32，也可在np.array()中指定参数dtype=np.float/np.float32/...</span></span><br><span class="line">print(<span class="string">'维度:'</span>,arr.ndim) <span class="comment">#2</span></span><br><span class="line">print(<span class="string">'形状:'</span>,arr.shape) <span class="comment">#（2，3）</span></span><br><span class="line">print(<span class="string">'大小：'</span>,arr.size) <span class="comment">#6</span></span><br><span class="line"></span><br><span class="line">arr = np.zeros((<span class="number">3</span>,<span class="number">4</span>)) <span class="comment">#返回3行4列全为0的二维数组</span></span><br><span class="line"></span><br><span class="line">arr = np.ones((<span class="number">2</span>,<span class="number">2</span>)) <span class="comment">#返回2行2列全为1的二维数组</span></span><br><span class="line"></span><br><span class="line">arr = np.arange(<span class="number">12</span>,<span class="number">20</span>, <span class="number">2</span>).reshape((<span class="number">2</span>,<span class="number">2</span>)) <span class="comment">#arange返回一个一维数组，取值区间为[12,20)步长为2，数组的reshape方法将其变为2行2列的二维数组并返回</span></span><br><span class="line"></span><br><span class="line">arr = np.linspace(<span class="number">1</span>,<span class="number">10</span>,<span class="number">10</span>) <span class="comment">#生成等差数列</span></span><br></pre></td></tr></table></figure></li><li><p>基础运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>])</span><br><span class="line">b = np.arange(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">print(a-b) <span class="comment">#[2 3 4 5]</span></span><br><span class="line">print(b**<span class="number">2</span>) <span class="comment">#[0 1 4 9]</span></span><br><span class="line">print(np.sin(a)) <span class="comment">#[ 0.90929743 -0.7568025  -0.2794155   0.98935825]</span></span><br><span class="line">print(<span class="number">10</span>*np.cos(b)) <span class="comment">#[10.     5.40302306 -4.16146837 -9.89992497]</span></span><br><span class="line">print(b==<span class="number">2</span>) <span class="comment">#[False False  True False]</span></span><br><span class="line"></span><br><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>],</span><br><span class="line">          [<span class="number">0</span>,<span class="number">1</span>]])</span><br><span class="line">b = np.arange(<span class="number">4</span>).reshape(<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">print(a*b) <span class="comment">#对应位置做乘法：[[0 2] [0 3]]</span></span><br><span class="line">print(a.dot(b)) <span class="comment">#矩阵乘法：[[4 7] [2 3]]</span></span><br><span class="line"></span><br><span class="line">a = np.random.random((<span class="number">2</span>,<span class="number">2</span>)) <span class="comment">#随机生成两行两列的二维数组</span></span><br><span class="line"></span><br><span class="line">print(a)</span><br><span class="line">print(np.sum(a)) <span class="comment">#求数组a中所有元素之和</span></span><br><span class="line">print(np.min(a,axis=<span class="number">1</span>)[<span class="number">1</span>]) <span class="comment">#axis=1表示取每一行的最小值，axis=0表示取每一列的最小值</span></span><br><span class="line">print(np.max(a)) <span class="comment">#求最大值</span></span><br><span class="line">print(np.argmin(a)) <span class="comment">#最小值的索引</span></span><br><span class="line">print(np.argmax(a)) <span class="comment">#最大值的索引</span></span><br><span class="line">print(np.mean(a)) <span class="comment">#求平均值</span></span><br><span class="line">print(np.median(a)) <span class="comment">#求中位数</span></span><br><span class="line">print(np.cumsum(a)) <span class="comment">#求累加和，返回一个数组</span></span><br><span class="line">print(np,sort(a)) <span class="comment">#返回每一行的排序结果（二维数组）</span></span><br><span class="line">print(a.T) <span class="comment">#转置二维数组</span></span><br></pre></td></tr></table></figure></li><li><p>访问数组：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">A = np.arange(<span class="number">1</span>,<span class="number">12</span>).reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">print(A[<span class="number">1</span>,<span class="number">1</span>:<span class="number">2</span>]) <span class="comment">#5；格式：A[行，列]，同时可分别对行、列做切片操作</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> A:</span><br><span class="line">    print(row) <span class="comment">#迭代打印每一行</span></span><br><span class="line"><span class="keyword">for</span> col <span class="keyword">in</span> A.T:</span><br><span class="line">    print(col) <span class="comment">#迭代打印A每的一列</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> A.flat:</span><br><span class="line">    print(item) <span class="comment">#迭代访问二维数组的每一个元素</span></span><br></pre></td></tr></table></figure></li><li><p>数组的合并和分割：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">A = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">B = np.array([<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line"></span><br><span class="line">print(np.vstack((A,B))) <span class="comment">#垂直合并</span></span><br><span class="line"><span class="comment">#[[1 2 3]</span></span><br><span class="line"><span class="comment"># [4 5 6]]</span></span><br><span class="line">    </span><br><span class="line">print(np.hstack((A,b))) <span class="comment">#水平合并</span></span><br><span class="line"><span class="comment">#[1 2 3 4 5 6]</span></span><br><span class="line"></span><br><span class="line">A = np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="comment"># 等量分割：np.split(A,3,axis=0) &lt;==&gt; np.vsplit(A,3)</span></span><br><span class="line">      <span class="comment">#  np.split(A,2,axis=1) &lt;==&gt; np.hsplit(A,2)</span></span><br><span class="line"><span class="comment">#不等量分割：np.array_split(A,3,axis=1)</span></span><br></pre></td></tr></table></figure></li><li><p>copy与deepcopy</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = np.arange(<span class="number">4</span>) <span class="comment"># a=[0,1,2,3]</span></span><br><span class="line">b = a <span class="comment"># b=[0,1,2,3] 浅拷贝</span></span><br><span class="line">a[<span class="number">0</span>] = <span class="number">10</span> <span class="comment"># b=[10,1,2,3],也即b是a的引用,a改变b也会改变</span></span><br><span class="line"></span><br><span class="line">b = a.copy() <span class="comment">#deep copy：b是一个新的对象</span></span><br></pre></td></tr></table></figure></li><li><p>NumPy 中包含了一个矩阵库<code>numpy.matlib</code>，该模块中的函数返回的是一个矩阵，而不是 ndarray 对象</p></li></ul><h3 id="Pandas"><a href="#Pandas" class="headerlink" title="Pandas"></a>Pandas</h3><ul><li><p>Pandas处理三类数据结构：<code>Series</code>、<code>DataFrame</code>、<code>Panel</code>，它们均构建在Numpy数组之上；<code>DataFrame</code>是<code>Series</code>的容器，<code>Panel</code>是<code>DataFrame</code>的容器。</p><ul><li><p><code>Series</code>是具有均匀数据的<strong>一维数组</strong>结构，其尺寸大小不可变</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s = pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,np.nan,<span class="number">5</span>])</span><br><span class="line">print(s)</span><br><span class="line"><span class="comment"># 0    1.0</span></span><br><span class="line"><span class="comment"># 1    2.0</span></span><br><span class="line"><span class="comment"># 2    3.0</span></span><br><span class="line"><span class="comment"># 3    NaN</span></span><br><span class="line"><span class="comment"># 4    5.0</span></span><br><span class="line"><span class="comment"># dtype: float64</span></span><br></pre></td></tr></table></figure></li><li><p><code>DataFrame</code>是一个具有异构数据的<strong>二维数组</strong>，一个表格其每一列的数据类型可以不同</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">dates = pd.date_range(<span class="string">'20190101'</span>,periods=<span class="number">6</span>)</span><br><span class="line">df = pd.DataFrame(np.random.randn(<span class="number">6</span>,<span class="number">4</span>),index=dates,columns=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>])<span class="comment">#可以传入字典</span></span><br><span class="line">print(df)</span><br><span class="line"><span class="comment">#          a       b      c       d</span></span><br><span class="line"><span class="comment">#2019-01-01 -0.151005  0.193516 -2.719792 -0.889789</span></span><br><span class="line"><span class="comment">#2019-01-02  1.454217 -0.251116  0.115353  1.467178</span></span><br><span class="line"><span class="comment">#2019-01-03  2.329084 -1.141316 -0.566037 -0.012965</span></span><br><span class="line"><span class="comment">#2019-01-04  0.230406  0.466682  0.156473  1.464802</span></span><br><span class="line"><span class="comment">#2019-01-05  0.628908  0.093684 -0.342491 -0.215695</span></span><br><span class="line"><span class="comment">#2019-01-06 -1.175620  1.210320  0.352923 -0.112040</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><code>Panel</code>是具有异构数据的三维数据结构</li></ul><ul><li><p>数据选取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>,<span class="number">4</span>),index=[<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>],columns=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>])</span><br><span class="line">print(df)</span><br><span class="line"><span class="comment">#   a  b   c   d</span></span><br><span class="line"><span class="comment"># A  0  1   2   3</span></span><br><span class="line"><span class="comment"># B  4  5   6   7</span></span><br><span class="line"><span class="comment"># C  8  9   10  11</span></span><br><span class="line"></span><br><span class="line">print(df[<span class="string">'a'</span>]) <span class="comment">#或者print(df.a),打印选取的某列，不能选行，数组类型</span></span><br><span class="line"><span class="comment"># A    0</span></span><br><span class="line"><span class="comment"># B    4</span></span><br><span class="line"><span class="comment"># C    8</span></span><br><span class="line"><span class="comment"># Name: a, dtype: int32</span></span><br><span class="line"></span><br><span class="line">print(df.loc[<span class="string">'A'</span>]) <span class="comment">#打印行，数组类型 &lt;==&gt;df.iloc[0]</span></span><br><span class="line"><span class="comment"># a    0</span></span><br><span class="line"><span class="comment"># b    1</span></span><br><span class="line"><span class="comment"># c    2</span></span><br><span class="line"><span class="comment"># d    3</span></span><br><span class="line"><span class="comment"># Name: A, dtype: int32</span></span><br><span class="line"></span><br><span class="line">print(df[<span class="number">1</span>:<span class="number">2</span>]) <span class="comment">#打印行，DataFrame类型</span></span><br><span class="line"><span class="comment">#   a  b  c  d</span></span><br><span class="line"><span class="comment"># B  4  5  6  7</span></span><br><span class="line"></span><br><span class="line">print(df[<span class="string">'A'</span>:<span class="string">'B'</span>]) <span class="comment">#打印行，DataFrame类型</span></span><br><span class="line"><span class="comment">#   a  b  c  d</span></span><br><span class="line"><span class="comment"># A  0  1  2  3</span></span><br><span class="line"><span class="comment"># B  4  5  6  7</span></span><br></pre></td></tr></table></figure></li><li><p>导入导出数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data = pd.read_xxx(<span class="string">'fileName.xxx'</span>) <span class="comment">#读取哪种格式的文件就用对应的方法</span></span><br><span class="line">data.to_yyy(<span class="string">'newFileName.yyy'</span>) <span class="comment">#保存为哪种格式的文件就用对应的方法</span></span><br></pre></td></tr></table></figure></li><li><p>合并</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">df1 = pd.DataFrame(np.ones((<span class="number">2</span>,<span class="number">2</span>))*<span class="number">0</span>,columns=[<span class="string">'a'</span>,<span class="string">'b'</span>])</span><br><span class="line">df2 = pd.DataFrame(np.ones((<span class="number">2</span>,<span class="number">2</span>))*<span class="number">1</span>,columns=[<span class="string">'a'</span>,<span class="string">'b'</span>])</span><br><span class="line">df3 = pd.DataFrame(np.ones((<span class="number">2</span>,<span class="number">2</span>))*<span class="number">2</span>,columns=[<span class="string">'a'</span>,<span class="string">'b'</span>])</span><br><span class="line">print(pd.concat([df1,df2,df3],axis=<span class="number">0</span>,ignore_index=<span class="literal">True</span>))</span><br><span class="line"><span class="comment">#     a    b</span></span><br><span class="line"><span class="comment">#   0  0.0  0.0</span></span><br><span class="line"><span class="comment">#   1  0.0  0.0</span></span><br><span class="line"><span class="comment">#   2  1.0  1.0</span></span><br><span class="line"><span class="comment">#   3  1.0  1.0</span></span><br><span class="line"><span class="comment">#   4  2.0  2.0</span></span><br><span class="line"><span class="comment">#   5  2.0  2.0</span></span><br><span class="line"></span><br><span class="line">df1 = pd.DataFrame(np.ones((<span class="number">2</span>,<span class="number">2</span>))*<span class="number">0</span>,columns=[<span class="string">'a'</span>,<span class="string">'b'</span>])</span><br><span class="line">df2 = pd.DataFrame(np.ones((<span class="number">2</span>,<span class="number">2</span>))*<span class="number">1</span>,columns=[<span class="string">'b'</span>,<span class="string">'c'</span>])</span><br><span class="line">print(pd.concat([df1,df2],ignore_index=<span class="literal">True</span>))<span class="comment">#默认为外连接</span></span><br><span class="line"><span class="comment">#     a    b    c</span></span><br><span class="line"><span class="comment">#  0  0.0  0.0  NaN</span></span><br><span class="line"><span class="comment">#  1  0.0  0.0  NaN</span></span><br><span class="line"><span class="comment">#  2  NaN  1.0  1.0</span></span><br><span class="line"><span class="comment">#  3  NaN  1.0  1.0</span></span><br><span class="line">print(pd.concat([df1,df2],join=<span class="string">'inner'</span>,ignore_index=<span class="literal">True</span>))</span><br><span class="line"><span class="comment">#     b</span></span><br><span class="line"><span class="comment">#  0  0.0</span></span><br><span class="line"><span class="comment">#  1  0.0</span></span><br><span class="line"><span class="comment">#  2  1.0</span></span><br><span class="line"><span class="comment">#  3  1.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pd.merge()也可用于合并</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Numpy&quot;&gt;&lt;a href=&quot;#Numpy&quot; class=&quot;headerlink&quot; title=&quot;Numpy&quot;&gt;&lt;/a&gt;Numpy&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;创建数组：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table
      
    
    </summary>
    
    
      <category term="Python" scheme="http://thmasterplan.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="http://thmasterplan.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Fuzzy CMeans</title>
    <link href="http://thmasterplan.cn/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Fuzzy-CMeans/"/>
    <id>http://thmasterplan.cn/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Fuzzy-CMeans/</id>
    <published>2019-12-04T08:01:31.000Z</published>
    <updated>2019-12-20T08:38:20.164Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Fuzzy-C-Means-Clustering"><a href="#Fuzzy-C-Means-Clustering" class="headerlink" title="Fuzzy C-Means Clustering"></a>Fuzzy C-Means Clustering</h3><ul><li><p>算法原理</p><p>FCM基于以下目标函数的最小化：</p><script type="math/tex; mode=display">J_m=\sum_{i=1}^N\sum_{j=1}^Cu_{ij}^m\|x_i-c_j\|^2, 1\leq m<\propto</script><script type="math/tex; mode=display">约束条件为\sum_{j=1}^Cu_{ij}=1,i=1,2,3,...,n</script><p>$x_i$表示第$i$个样本点，$c_j$表示簇心，$j$表示簇的个数，$m$是任意大于1的实数，$u_{ij}$表示$x_i$属于簇$j$的概率。</p><p>通过对上述目标函数的迭代优化实现模糊划分，同时更新$u_{ij}$和簇心$c_j$：</p><script type="math/tex; mode=display">u_{ij}=\cfrac{1}{\sum_{k=1}^C(\cfrac{\|x_i-c_j\|}{\|x_i-c_k\|})^\cfrac{2}{m-1}}</script><script type="math/tex; mode=display">c_j=\cfrac{\sum_{i=1}^Nu_{ij}^m.x_i}{\sum_{i=1}^Nu_{ij}^m}</script><p>当$max_{1\leq k \leq c}{||c_{k,new}-c_{k,old}||^2 &lt; \varepsilon}$时迭代终止，$0&lt;\varepsilon&lt;1$，$k$为迭代次数，此过程收敛到局部最小值或$J_m$的鞍点。</p></li><li><p>步骤：</p><ol><li>初始化 矩阵$U=[u_{ij}],U^{(0)}$</li><li>在第$k$次迭代过程中，用$U^{(k)}$计算簇心向量$C^{(k)}=[c_j]$</li><li>更新$U^{(k)},U^{(k+1)}$</li><li>如果满足$||U^{(k+1)}-U^{(k)}|| &lt; \varepsilon$或者$max_{1\leq k \leq c}{||c_{k,new}-c_{k,old}||^2 &lt; \varepsilon}$或者迭代次数达到限制则停止，否则返回步骤2</li></ol></li><li><p>[参考链接]: <a href="https://home.deib.polimi.it/matteucc/Clustering/tutorial_html/cmeans.html" target="_blank" rel="noopener">https://home.deib.polimi.it/matteucc/Clustering/tutorial_html/cmeans.html</a></p></li><li><p>使用<code>skfuzzy.cluster</code>的<code>cmeans</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> skfuzzy.cluster <span class="keyword">import</span> cmeans</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> make_blobs</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建数据集，500个样本点，二维向量</span></span><br><span class="line">X, y = make_blobs(n_samples=<span class="number">500</span>, n_features=<span class="number">2</span>, centers=<span class="number">3</span>, random_state=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">plt.figure()</span><br><span class="line">plt.scatter(X[:,<span class="number">0</span>],X[:,<span class="number">1</span>],c=<span class="string">'r'</span>,s=<span class="number">8</span>)<span class="comment">#显示原始样本点分布</span></span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">plt.figure()</span><br><span class="line">X = X.T</span><br><span class="line">center, u, u0, d, jm, p, fpc = cmeans(X, c=<span class="number">3</span>, m=<span class="number">2</span>, error=<span class="number">0.005</span>, maxiter=<span class="number">1000</span>)</span><br><span class="line"><span class="comment">#参数：X：样本点；</span></span><br><span class="line">    <span class="comment">#c：指定聚类簇数；</span></span><br><span class="line">    <span class="comment">#m:隶属度指数，一般为2；</span></span><br><span class="line">    <span class="comment">#error：隶属度的变化值小于此则提前结束迭代；</span></span><br><span class="line">    <span class="comment">#maxiter:最大迭代次数</span></span><br><span class="line"><span class="comment">#返回值：center:簇心；</span></span><br><span class="line">    <span class="comment">#u:最后的隶属度矩阵；</span></span><br><span class="line">    <span class="comment">#u0:初始的隶属度矩阵；</span></span><br><span class="line">    <span class="comment">#jm:目标函数的优化历史值；</span></span><br><span class="line">    <span class="comment">#p:迭代次数；</span></span><br><span class="line">    <span class="comment">#fpc:评价聚类好坏的指标，取值0-1，越接近1越好</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> u:</span><br><span class="line">    label = np.argmax(u, axis=<span class="number">0</span>)<span class="comment">#从隶属度矩阵中选取每个样本点隶属度最大的标签，将其归为一类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">500</span>):</span><br><span class="line">    <span class="keyword">if</span> label[i] == <span class="number">0</span>:</span><br><span class="line">        plt.scatter(X[<span class="number">0</span>][i], X[<span class="number">1</span>][i], c = <span class="string">'r'</span>,s=<span class="number">8</span>)</span><br><span class="line">    <span class="keyword">elif</span> label[i] == <span class="number">1</span>:</span><br><span class="line">        plt.scatter(X[<span class="number">0</span>][i], X[<span class="number">1</span>][i], c = <span class="string">'g'</span>,s=<span class="number">8</span>)</span><br><span class="line">    <span class="keyword">elif</span> label[i] == <span class="number">2</span>:</span><br><span class="line">        plt.scatter(X[<span class="number">0</span>][i], X[<span class="number">1</span>][i], c = <span class="string">'b'</span>,s=<span class="number">8</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="skfuzzy_cmeans.png" alt="原始样本点图像"></p><p><img src="skfuzzy_cmeans1.png" alt="聚类后样本点图像"></p></li><li><p>python实现FCM算法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> make_blobs</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fcm</span><span class="params">(data,center,m,epsilon,maxiter)</span>:</span></span><br><span class="line">    <span class="comment">#初始化模糊矩阵U</span></span><br><span class="line">    u = np.zeros((center,data.shape[<span class="number">0</span>]))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(data.shape[<span class="number">0</span>]):</span><br><span class="line">        sum = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(center):</span><br><span class="line">            <span class="keyword">if</span>(j==center<span class="number">-1</span>):</span><br><span class="line">                u[j][i] = <span class="number">1</span>-sum</span><br><span class="line">            <span class="keyword">else</span>: </span><br><span class="line">                u[j][i]=np.random.rand()</span><br><span class="line">                sum+=u[j][i]</span><br><span class="line">            <span class="keyword">while</span> (sum &gt;= <span class="number">1</span>):</span><br><span class="line">                sum -=u[j][i]</span><br><span class="line">                u[j][i] = u[j][i]/<span class="number">2</span></span><br><span class="line">                sum +=u[j][i]</span><br><span class="line">    c = np.zeros((center,data.shape[<span class="number">1</span>]))</span><br><span class="line">    count = <span class="number">0</span> <span class="comment">#迭代次数</span></span><br><span class="line">    <span class="comment">#计算簇心向量c</span></span><br><span class="line">    <span class="keyword">while</span> count &lt; maxiter<span class="number">-1</span>:</span><br><span class="line">        u2 = u.copy()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(center):</span><br><span class="line">            sum = <span class="number">0</span></span><br><span class="line">            x = <span class="number">0</span></span><br><span class="line">            y = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(u.shape[<span class="number">1</span>]):</span><br><span class="line">                temp = u2[i][j]**m</span><br><span class="line">                x += temp*data[j][<span class="number">0</span>]</span><br><span class="line">                y += temp*data[j][<span class="number">1</span>]</span><br><span class="line">                sum += temp</span><br><span class="line">            c[i]=[x/sum,y/sum]</span><br><span class="line">        <span class="comment">#print(c)</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(u.shape[<span class="number">1</span>]):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(center):</span><br><span class="line">                sum = <span class="number">0</span></span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> range(center):</span><br><span class="line">                    temp = np.linalg.norm(data[i]-c[j])/np.linalg.norm(data[i]-c[k])</span><br><span class="line">                    sum += temp**(<span class="number">2</span>/(m<span class="number">-1</span>))</span><br><span class="line">                u[j][i] = <span class="number">1</span>/sum</span><br><span class="line">    </span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        print(np.linalg.norm(u2 - u))</span><br><span class="line">        <span class="keyword">if</span> np.linalg.norm(u2 - u) &lt; epsilon:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> u2, u, c, count</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建数据集，1000个样本点，二维向量</span></span><br><span class="line">X, y = make_blobs(n_samples=<span class="number">1000</span>, n_features=<span class="number">2</span>, centers=<span class="number">3</span>, random_state=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">plt.figure()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(y)):</span><br><span class="line">    <span class="keyword">if</span> y[i] == <span class="number">0</span>:</span><br><span class="line">        plt.scatter(X[i][<span class="number">0</span>],X[i][<span class="number">1</span>],c=<span class="string">'red'</span>,s=<span class="number">8</span>)</span><br><span class="line">    <span class="keyword">elif</span> y[i]==<span class="number">1</span>:</span><br><span class="line">        plt.scatter(X[i][<span class="number">0</span>],X[i][<span class="number">1</span>],c=<span class="string">'green'</span>,s=<span class="number">8</span>)</span><br><span class="line">    <span class="keyword">elif</span> y[i]==<span class="number">2</span>:</span><br><span class="line">        plt.scatter(X[i][<span class="number">0</span>],X[i][<span class="number">1</span>],c=<span class="string">'blue'</span>,s=<span class="number">8</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#plt.scatter(X[:,0],X[:,1],c='r',s=8)#显示原始样本点分布</span></span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">plt.figure()</span><br><span class="line"></span><br><span class="line">u, u0, center, count= fcm(X, <span class="number">3</span>, <span class="number">2</span>, <span class="number">0.005</span>, <span class="number">1000</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> u:</span><br><span class="line">    label = np.argmax(u, axis=<span class="number">0</span>)<span class="comment">#从隶属度矩阵中选取每个样本点隶属度最大的标签，将其归为一类</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">    <span class="keyword">if</span> label[i] == <span class="number">0</span>:</span><br><span class="line">        plt.scatter(X[i][<span class="number">0</span>], X[i][<span class="number">1</span>], c = <span class="string">'red'</span>,s=<span class="number">8</span>)</span><br><span class="line">    <span class="keyword">elif</span> label[i] == <span class="number">1</span>:</span><br><span class="line">        plt.scatter(X[i][<span class="number">0</span>], X[i][<span class="number">1</span>], c = <span class="string">'green'</span>,s=<span class="number">8</span>)</span><br><span class="line">    <span class="keyword">elif</span> label[i] == <span class="number">2</span>:</span><br><span class="line">        plt.scatter(X[i][<span class="number">0</span>], X[i][<span class="number">1</span>], c = <span class="string">'b'</span>,s=<span class="number">8</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Fuzzy-C-Means-Clustering&quot;&gt;&lt;a href=&quot;#Fuzzy-C-Means-Clustering&quot; class=&quot;headerlink&quot; title=&quot;Fuzzy C-Means Clustering&quot;&gt;&lt;/a&gt;Fuzzy C-Means 
      
    
    </summary>
    
    
      <category term="机器学习" scheme="http://thmasterplan.cn/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="http://thmasterplan.cn/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>磁盘管理</title>
    <link href="http://thmasterplan.cn/Linux/%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86/"/>
    <id>http://thmasterplan.cn/Linux/%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86/</id>
    <published>2019-11-29T07:26:51.000Z</published>
    <updated>2019-12-02T06:47:09.737Z</updated>
    
    <content type="html"><![CDATA[<h3 id="磁盘工作原理"><a href="#磁盘工作原理" class="headerlink" title="磁盘工作原理"></a>磁盘工作原理</h3><ul><li><p>不同硬盘标识：a-z，aa，ab…</p><p>​      /dev/sda，/dev/sdb</p></li><li><p>同一磁盘的不同分区：1，2，…</p><p>​     /dev/sda1，/dev/sda2，…</p></li><li><p>磁盘存储术语：head(磁头)，track(磁道)，cylinder(柱面)，sector(扇区)</p></li><li><p>磁盘使用步骤：磁盘分区 -&gt; 分区上创建文件系统 -&gt; 将分区挂载到目录</p></li></ul><h3 id="分区管理"><a href="#分区管理" class="headerlink" title="分区管理"></a>分区管理</h3><ul><li><p>分区原因</p><ul><li>隔离系统和程序，可安装多个OS</li><li><p>采用不同文件系统</p></li><li><p>优化I/O性能</p></li><li>实现磁盘空间配额限制</li><li>提高修复速度</li></ul></li><li><p>MBR分区管理</p><ul><li><p>分区不超过2T</p></li><li><p>一块硬盘最多有4个主分区，也可以3主分区+1扩展分区（扩展分区包含N给逻辑分区）</p></li><li><p>MBR分区结构：</p><p><img src="MBR.jpg" alt=""></p></li></ul></li><li><p>GPT分区管理</p><ul><li><p>支持128个分区，分区可达ZB级别</p></li><li><p>GPT分区结构</p><p><img src="GPT.jpg" alt=""></p></li></ul></li><li><p>分区管理命令</p><ul><li>列出块设备：<code>lsblk</code></li><li>查看块设备的UUID（通用唯一识别码）：<code>blkid</code></li><li>创建分区：<ul><li>创建MBR分区：<code>fdisk</code><ul><li><code>fdisk -l</code>查看当前分区情况</li><li><code>fdisk [device]</code>，管理分区，常用子命令：<ul><li>p：分区列表</li><li>t：更改分区ID（输入L查询，不同的ID标识分区的类型）</li><li>n：创建新分区</li><li>d：删除分区</li><li>v：校验分区</li></ul></li><li>u：转换单位</li><li>w：保存退出<ul><li>q：不保存退出</li><li>fdisk实时更改硬盘的分区，分区完成后注意与内存分区表同步（partprobe），查看内核是否已经识别新的分区<code>cat /proc/partitions</code>。</li></ul></li></ul></li><li>创建GPT分区：<code>gdisk</code>，用法与<code>fdisk</code>相似</li><li>高级分区操作：<code>parted</code><ul><li><code>parted</code>命令操作都是实时生效，需谨慎操作</li><li><code>parted /dev/sdb mklabel gpt</code>：设置<code>/dev/sdb</code>这块磁盘为gpt类型</li><li><code>parted /dev/sdb print</code>：打印<code>/dev/sdb</code>的分区信息</li><li><code>parted /dev/sdb mkpart primary 1 200</code>：设置一个分区，从1MB到200MB，大小为199MB（注意分区需是连续空间）</li><li><code>parted /dev/sdb rm 1</code>：删除第一个分区</li><li><code>parted -l</code>：列出所有硬盘的分区信息</li></ul></li></ul></li><li>重新设置内存中的内核分区表版本：<code>partprobe</code></li></ul></li></ul><h3 id="文件系统管理"><a href="#文件系统管理" class="headerlink" title="文件系统管理"></a>文件系统管理</h3><ul><li><p>查看当前OS支持的文件系统：<code>cat /proc/filesystems</code></p></li><li><p>创建文件系统：<code>mkfs -t [type] [device]</code>：例如<code>mkfs -t xfs /dev/sdb2</code>，若要创建swap类型，使用<code>mkswap /dev/xxx</code>命令</p></li><li><p>管理文件系统：</p><ul><li><p><code>tune2fs</code>：重新设定ext系列文件系统参数的值</p><ul><li><code>-l</code>：查看指定文件系统superblock信息</li><li><code>-L &#39;LABEL&#39;</code>：修改卷标</li><li><code>-O</code>：文件系统属性的启用或禁用</li></ul></li><li><p><code>dumpe2fs</code>：显示ext文件系统信息，将磁盘块分组管理</p></li><li><code>xfs_info 挂载点</code>：显示已挂载的xfs文件系统信息</li></ul></li><li><p>文件系统检测和修复：</p><ul><li>文件系统故障常发生于死机或非正常关机后，注意一定要取消挂载后执行修复命令</li><li><code>fsck</code> 、<code>e2fsck</code>、<code>xfs_repair</code></li></ul></li><li><p>常用工具：</p><ul><li><p><code>df</code>：查看文件系统和磁盘空间使用情况，常用选项<code>-T,-h</code></p></li><li><p><code>du -h /xxx/yyy</code>：查看某目录总体空间占用状态，<code>--max-depth=3</code>指定最大目录层级为3</p></li><li><p><code>dd</code>：convert and copy a file</p><ul><li>用法：<code>dd if=/x/y of=/a/b bs=# count=#</code></li><li><code>if=/x/y</code>：从指定文件读取</li><li><code>of=/a/b</code>：写入到指定文件</li><li><code>ibs=size</code>：一次读size个字节</li><li><code>obs=size</code>：一次写size个字节</li><li><code>bs=size</code>：block size，指定块大小(既是ibs也是obs)</li><li><code>cbs=size</code>：一次转换size个字节</li><li><code>skip=blocks</code>：从开头忽略blocks个ibs大小的块，只复制之后的内容</li><li><code>seek=blocks</code>：从开头忽略blocks个obs大小的块，用if中复制的内容替换blocks个obs大小的块之后的内容。</li><li><code>count=n</code>：复制n个bs</li><li><img src="dd.jpg" alt=""></li><li><p>备份：</p><ul><li><code>dd if=/dev/sdx of=/dev/sdy</code>：整盘备份到另一磁盘</li><li><code>dd if=/dev/sdx of=/xxx/image</code>：整盘备份到文件</li><li><code>dd if=/dev/sdx | gzip &gt; /xxx/image.gz</code>：整盘备份并压缩</li></ul></li><li><p>恢复：</p><ul><li><code>dd if=/xxx/image of=/dev/sdx</code></li><li><code>gzip -dc /xxx/image.gz | dd of=/dev/sdx</code></li></ul></li></ul></li></ul></li></ul><h3 id="挂载设备"><a href="#挂载设备" class="headerlink" title="挂载设备"></a>挂载设备</h3><ul><li><p>将分区挂载到目录，则该目录下的文件都存储于该分区中；若有其他分区挂载在该目录的子目录下，则子目录下的文件存储与另一分区中。</p></li><li><p>挂载点下原有文件在挂载完成后会被临时隐藏，因此挂载点目录一般为空。</p></li><li><p>一个分区可以同时挂载在多个目录下，一个目录只能与一个分区关联</p></li><li><p><strong>实现永久挂载需要写入配置文件<code>/etc/fstab</code></strong>，使用<code>blkid</code>查看UUID（也可使用设备分区名例如<code>/dev/sda2</code>）并按格式写入配置文件；若需要更改挂载点所属文件系统属性（是否启用acl，suid，exec等），亦可在该配置文件中更改，默认为defaults，然后<code>mount -o remount /dev/xxx</code>重新挂载使更改生效</p></li><li><p>swap的挂载：写入<code>/etc/fstab</code>，挂载点和文件系统均为<code>swap</code>，保存退出后键入<code>swapon -a</code>;<code>swapoff</code>命令取消交换分区。</p></li><li><p><code>mount /dev/sda2 /mnt</code>：将分区sda2挂载在/mnt目录下</p><ul><li><p><code>-r</code>：只读挂载</p></li><li><p><code>-w</code>：读写挂载，默认</p></li><li><p><code>mount -B 目录1 目录2</code>：类似与软连接的效果，两个目录的文件共享。</p></li><li><p><code>-o options</code>：挂载文件系统的选项</p><p><img src="mount.jpg" alt=""></p></li></ul></li><li><p><code>umount /mnt</code>：取消挂载</p></li><li><p><code>cat /etc/mtab</code>：查看目前的挂载情况</p></li><li><p>查看挂载情况：<code>findmnt 挂载点/设备分区</code></p></li><li><p>查看正在访问指定挂载点的进程：<code>lsof 挂载点</code>、<code>fuser -v 挂载点</code></p></li><li><p>终止所有正在访问指定挂载点的进程：<code>fuser -km 挂载点</code></p></li></ul><h3 id="外围设备使用"><a href="#外围设备使用" class="headerlink" title="外围设备使用"></a>外围设备使用</h3><ul><li><p>使用光盘：</p><ul><li>手动挂载：<code>mount /dev/cdrom /mnt</code></li><li>操作光盘：<code>eject</code>弹出光盘；<code>eject -t</code>弹入光盘</li><li>创建ISO文件：<code>cp /dev/cdrom /root/xxx.iso</code>；<code>mkisofs -r -o ./xxx.iso /etc</code>…</li></ul></li><li><p>挂载USB介质：</p><ul><li>查看USB设备是否识别：<code>lsusb</code></li><li>被内核探测为SCSI设备：<code>/dev/sdaX、/dev/sdbX</code>或类似的设备文件</li><li>手动挂载：<code>mount /dev/sdbX /mnt</code></li></ul></li></ul><h3 id="管理虚拟内存"><a href="#管理虚拟内存" class="headerlink" title="管理虚拟内存"></a>管理虚拟内存</h3><ul><li><p>swap交换分区是系统内存的补充，支持虚拟内存，当没有足够的内存保存系统处理的数据时会将数据写入swap分区</p></li><li><p>推荐系统swap空间</p><p>|  系统RAM   | 推荐的swap空间 | 允许机器休眠的swap建议 |<br>| :————: | :——————: | :——————————: |<br>|  低于2GB   |   RAM的倍数    |       RAM的三倍        |<br>| 2GB - 8GB  |    等于RAM     |       RAM的倍数        |<br>| 8GB - 64GB |      8GB       |       RAM的1.5倍       |<br>|   &gt; 64GB   |      16GB      |   不建议使用休眠功能   |</p></li><li><p><code>free</code>：查看内存使用情况</p></li></ul><h3 id="RAID管理"><a href="#RAID管理" class="headerlink" title="RAID管理"></a>RAID管理</h3><ul><li><p>RAID：Redundant Arrays of Independent Disks（独立冗余磁盘阵列）</p><ul><li>提高IO能力：磁盘并行读写</li><li>提高容错性</li><li>多块磁盘组织在一起工作</li><li>实现方式：<ul><li>外接式：通过扩展卡提供适配能力</li><li>内接式：主板集成RAID控制器，安装OS前在BIOS里配置</li><li>软件RAID：软件实现</li></ul></li></ul></li><li><p>RAID级别：</p><ul><li><p>RAID-0：同一文件分块存储在多块硬盘上，读写性能提升，无容错能力</p><p><img src="RAID-0.jpg" alt=""></p></li><li><p>RAID-1：同一文件完全一样地存储于两块磁盘（镜像），读性能提升，写性能略有下降，有容错能力，磁盘利用率只有一半</p><p><img src="RAID-1.jpg" alt=""></p></li><li><p>RAID-5：读写性能提升，至少3块磁盘，有容错能力（允许最多1块磁盘损坏），每一块磁盘都划分一部分空间充当校验位</p><p><img src="RAID-5.jpg" alt=""></p></li><li><p>RAID-6：读写性能提升，至少4块磁盘，两个校验位，允许最多2块磁盘损坏，容错性较RAID-5高</p><p><img src="RAID-6.jpg" alt=""></p></li><li><p>RAID-10与RAID-01（实际使用RAID-10，RAID-10容错性较RAID-01好）</p><p><img src="RAID-01.jpg" alt=""></p><p><img src="RAID-10.jpg" alt=""></p></li><li><p>RAID-50</p><p><img src="RAID-50.jpg" alt=""></p></li><li><p>RAID-7：自身带操作系统和管理工具，理论上性能最高的RAID模式</p></li></ul></li></ul><h3 id="LVM（逻辑卷管理器）"><a href="#LVM（逻辑卷管理器）" class="headerlink" title="LVM（逻辑卷管理器）"></a>LVM（逻辑卷管理器）</h3><ul><li><p>LVM：允许对卷进行方便操作的抽象层</p><ol><li><p>将物理块设备指定为物理卷</p></li><li><p>用多个物理卷来创建一个卷组（物理卷是用固定大小的物理区域[PE,physical extent]来定义的）</p></li><li><p>从卷组中划分逻辑卷，可在逻辑卷上创建文件系统，逻辑卷大小可扩展。</p><p>示意图：</p><p><img src="LVM-2.jpg" alt=""></p><p><img src="LVM-1.jpg" alt=""></p></li></ol></li><li><p>使用逻辑卷步骤：</p><ol><li>将设备指定为物理卷，例如<code>pvcreate /dev/sdb1 /dev/sdd</code>或<code>pvcreate /dev/sd{b1,d}</code>，同时将分区和磁盘指定为物理卷。（如果是分区，需要将分区ID改为<code>8e</code>，表示Linux LVM类型）</li><li>用多个物理卷创建卷组，<code>vgcreate [选项] vgName pv1 pv2 ...</code>，例如<code>vgcreate -s 16M vg0 /dev/sdb1 /dev/sdd</code>，选项<code>-s</code>指定PE大小。</li><li>从卷组中划分逻辑卷，<code>lvcreate -n mysql -L 8G vg0</code>，<code>-n</code>指定逻辑卷名，<code>-L</code>指定大小，<code>-l</code>也是指定大小但是单位是PE个数。</li><li><code>ll /dev/vg0/mysql</code>发现<code>/dev/vg0/mysql</code>为软链接，指向<code>/dev/dm-0</code>，其另一软链接为<code>/dev/mapper/vg0-mysql</code>，若继续创建逻辑卷，其真实设备名依次为<code>/dev/dm-1</code>、<code>/dev/dm-2</code>…</li><li>在逻辑卷上创建文件系统，<code>mkfs.xfs /dev/vg0/mysql</code></li><li>挂载，<code>mount /dev/vg0/mysql /mnt/mysql</code>；将挂载写入配置文件<code>/etc/fstab</code>，在vim扩展命令模式下键入<code>r!blkid /dev/vg0/mysql</code>进行修改</li></ol></li><li><p>列出现有的物理卷：<code>pvs</code>、<code>pvdisplay</code></p></li><li><p>列出现有卷组：<code>vgs</code>、<code>vgdisplay</code></p></li><li><p>列出现有逻辑卷：<code>lvs</code>、<code>lvdisplay</code></p></li><li><p>扩展现有逻辑卷：<code>lvextend -l +48%free /dev/vg0/mysql</code>：剩余卷组的48%分配给逻辑卷，亦可使用PE数进行分配<code>lvextend -l +200 /dev/vg0/mysql</code>；此时使用<code>lsblk</code>或者<code>fdisk -l</code>查看已分配成功，但是<code>df</code>查看并未改变，还需要<strong>为新扩展的逻辑卷创建相同的文件系统</strong></p><ul><li><p>xfs：<code>xfs_growfs 挂载点</code></p></li><li><p>ext：<code>resize2fs 逻辑卷名</code>（注意xfs与ext的区别）</p></li><li>亦可一次搞定（加上<code>-r</code>选项）：<code>lvextend -r -l +xxx /dev/vg0/mysql</code></li></ul></li><li><p>扩展现有的卷组：<code>vgextend vg0 PV名</code></p></li><li><p>删除逻辑卷、卷组、物理卷：迁移数据 -&gt; <code>umount /mnt/mysql</code> -&gt; <code>lvremove /dev/vg0/mysql</code> -&gt; <code>vgremove vg0</code> -&gt; <code>pvremove /dev/sdb1 /dev/sdd</code> </p></li><li><p>LVM快照管理：</p><ul><li>逻辑卷的快照需要与该逻辑卷在同一个卷组，且快照的容量小于等于逻辑卷</li><li>逻辑卷中每一个发生修改的文件都会备份到快照中</li><li>使用快照：<ul><li><code>lvcreate -n mysql_snapshot -s -L 1G /dev/vg0/mysql</code>：创建逻辑卷mysql的快照，选项<code>-s</code>用于创建快照，快照上的文件系统与原逻辑卷相同</li><li>挂载快照到目录：<code>mount -o nouuid /dev/vg0/mysql_snapshot /mnt/snap</code>，由于快照的UUID与原逻辑卷一样，所以挂载时需要指定nouuid选项，不然挂载不上（xfs是这样，ext4不用）</li><li>还原快照到逻辑卷（逻辑卷恢复为快照）：<ul><li><code>umount /mnt/snap</code>,<code>umount /mnt/mysql</code>：卸载快照和逻辑卷</li><li><code>lvconvert --merge /dev/vg0/mysql_snapshot</code>：还原，此时快照已经删除</li><li><code>mount /dev/vg0/mysql /mnt/mysql</code>：重新挂载</li></ul></li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;磁盘工作原理&quot;&gt;&lt;a href=&quot;#磁盘工作原理&quot; class=&quot;headerlink&quot; title=&quot;磁盘工作原理&quot;&gt;&lt;/a&gt;磁盘工作原理&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;不同硬盘标识：a-z，aa，ab…&lt;/p&gt;
&lt;p&gt;​      /dev/sda，/dev
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://thmasterplan.cn/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://thmasterplan.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux软件安装和包管理</title>
    <link href="http://thmasterplan.cn/Linux/Linux%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E5%92%8C%E5%8C%85%E7%AE%A1%E7%90%86/"/>
    <id>http://thmasterplan.cn/Linux/Linux%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E5%92%8C%E5%8C%85%E7%AE%A1%E7%90%86/</id>
    <published>2019-11-25T04:47:01.000Z</published>
    <updated>2019-11-29T07:25:41.582Z</updated>
    
    <content type="html"><![CDATA[<h3 id="软件运行环境"><a href="#软件运行环境" class="headerlink" title="软件运行环境"></a>软件运行环境</h3><ul><li>静态链接：<code>libxxx.a</code>，程序对应的依赖库复制到程序包，占用空间多,迁移容易，升级难，需重新编译。</li><li>动态链接：<code>libxxx.so</code>，只把依赖做一个动态链接，占用空间少。</li><li><code>ldd 命令</code>：查看二进制程序所依赖的共享库文件。</li><li><code>ldconfig -p</code>：查看本机已经缓存的所有可用库文件名及文件路径映射关系。</li></ul><h3 id="程序包的来源"><a href="#程序包的来源" class="headerlink" title="程序包的来源"></a>程序包的来源</h3><ul><li><p>管理程序包：</p><ul><li>使用包管理器：<code>rpm</code></li><li>使用前端工具：<code>yum,dnf</code></li></ul></li><li><p>获取程序包的途径：官方服务器，镜像站点，epel源（Extra Packages for Enterprise Linux）</p></li></ul><h3 id="rpm包管理"><a href="#rpm包管理" class="headerlink" title="rpm包管理"></a>rpm包管理</h3><ul><li><code>rpm: redhat package manager</code>，rpm包中是已经编译好的程序文件。</li><li><code>/var/lib/rpm/</code>：数据库，其中包含了所有rpm包的名称及版本，依赖关系，功能说明，包安装后生成的各文件路径及校验码信息。</li><li><code>rpm -ivh [install-options] PACKAGE_FILES</code>：<ul><li><code>-i</code>：安装</li><li><code>-v</code>：显示安装过程</li><li><code>-h</code>：显示程序包管理执行进度</li><li><code>-q</code>：查询包是否安装，与<code>-l</code>一起使用，列出包中的文件；与<code>-f</code>使用，查询文件的所属包；<code>-a</code>，查询所有安装的包</li><li><code>-e</code>：卸载</li><li><code>-U</code>：升级</li><li><code>-V</code>：包校验</li><li>…其余查询man帮助</li></ul></li></ul><h3 id="yum管理"><a href="#yum管理" class="headerlink" title="yum管理"></a>yum管理</h3><ul><li><p>YUM：Yellowdog Update Modifier，rpm的前端程序，基于C/S架构，可解决软件包相关依赖性，可在多个库之间定位软件包</p></li><li><p>配置yum源：<code>/etc/yum.repos.d/</code>路径下<code>xxx.repo</code>中配置源服务器路径，yum命令安装时，查询本地repo源 -&gt; 查询服务器端元数据 -&gt; 下载元数据到缓冲区 -&gt; 下载rpm包到缓冲区 -&gt; 按依赖顺序安装包。</p><ul><li><p>使用本地光盘配置yum源</p><ol><li><p>检查是否安装autofs(自动挂载服务)</p></li><li><p><code>systemctl start autofs</code>：启动</p></li><li><p><code>systemctl enable autofs</code>：设置开机自启动</p></li><li><p><code>systemctl status autofs</code>：查看服务状态</p></li><li><p><code>ls /misc/cd -&gt; df</code>：光盘<code>/dev/sr0</code>已自动挂载到<code>/misc/cd</code>目录下</p></li><li><p><code>cd /etc/yum.repos.d/</code>，将原有的国外源删除（备份），创建一个新的以.repo结尾的配置文件，例如创建<code>base.repo</code>,配置如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[base]</span><br><span class="line">name=cdrom base</span><br><span class="line">baseurl=file:///misc/cd</span><br><span class="line">gpgcheck=0</span><br></pre></td></tr></table></figure></li><li><p><code>yum repolist</code>：查看可用的repo列表</p></li></ol></li><li><p>网络源配置</p><ol><li><p>可单独创建一个xxx.repo，也可在现有的repo中追加，例如在<code>base.repo</code>中追加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[epel]</span><br><span class="line">name=aliyun epel</span><br><span class="line">baseurl=https://mirrors.aliyun.com/epel/$releasever/$basearch/</span><br><span class="line">gpgcheck=0</span><br></pre></td></tr></table></figure><p>其中releasever变量代表当前OS发行版本，basearch代表cpu架构</p></li></ol></li></ul></li><li><p><code>yum clean all</code>：清空yum源缓存</p></li><li><p><code>yum list</code>：列出repo源所有包</p></li><li><p><code>yum install xxx</code>：安装</p></li><li><p><code>yum remove xxx</code>：删除</p></li><li><p><code>yum update pkgxxx</code></p></li><li><p><code>yum info xxx</code>：查看详细信息</p></li></ul><h3 id="定制yum仓库"><a href="#定制yum仓库" class="headerlink" title="定制yum仓库"></a>定制yum仓库</h3><ul><li>使用httpd定制本地yum源</li></ul><h3 id="dnf管理"><a href="#dnf管理" class="headerlink" title="dnf管理"></a>dnf管理</h3><ul><li>centos8之后默认安装</li></ul><h3 id="源码编译安装"><a href="#源码编译安装" class="headerlink" title="源码编译安装"></a>源码编译安装</h3><ul><li><p>首先使用<code>wget URL</code>下载好源码包</p></li><li><p><code>C/C++</code>：make项目管理器</p><ul><li>安装<code>gcc</code></li><li>解压，进入到源码包目录中，运行<code>./configure</code>，通过选项传递参数指定启用特性、安装路径等；执行时会参考用户的指定以及Makefile.in文件生成Makefile（安装前查看源码包中的说明帮助文档README、INSTALL等，亦可通过<code>./configure --help</code>查看可选项）</li><li><code>make -j n</code>根据Makefile文件，构建应用程序，j选项表示多线程并行编译。</li><li><code>make install</code></li><li>更改PATH</li></ul></li><li><code>Java</code>：maven</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;软件运行环境&quot;&gt;&lt;a href=&quot;#软件运行环境&quot; class=&quot;headerlink&quot; title=&quot;软件运行环境&quot;&gt;&lt;/a&gt;软件运行环境&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;静态链接：&lt;code&gt;libxxx.a&lt;/code&gt;，程序对应的依赖库复制到程序包，占用空间多,
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://thmasterplan.cn/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://thmasterplan.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>压缩与解压缩</title>
    <link href="http://thmasterplan.cn/Linux/%E5%8E%8B%E7%BC%A9%E4%B8%8E%E6%89%93%E5%8C%85/"/>
    <id>http://thmasterplan.cn/Linux/%E5%8E%8B%E7%BC%A9%E4%B8%8E%E6%89%93%E5%8C%85/</id>
    <published>2019-11-23T00:43:05.000Z</published>
    <updated>2019-11-23T13:25:30.409Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、压缩、解压缩工具"><a href="#一、压缩、解压缩工具" class="headerlink" title="一、压缩、解压缩工具"></a>一、压缩、解压缩工具</h3><ul><li><p><code>.Z</code>后缀</p><ul><li><p><code>compress</code>：压缩后会删除原文件，可读取STDOUT内容进行压缩，支持管道</p><ul><li><code>-c</code>：结果输出至标准输出，不删除原文件。常见用法：<code>compress -c file &gt; file.Z</code></li><li><code>-v</code>：显示详情</li></ul></li><li><p><code>uncompress file.Z</code></p></li><li><code>zcat file.Z</code>：不显示解压缩的前提下查看文本文件内容</li></ul></li><li><p><code>.gz</code>后缀</p><ul><li><code>gzip</code>：<ul><li><code>-c</code>：同<code>compress -c</code></li><li><code>-#</code>：#取1-9，指定压缩比，值越大压缩比越大</li></ul></li><li><code>gunzip file.gz</code></li><li><code>zcat file.Z</code></li></ul></li><li><p><code>.bz2</code>后缀</p><ul><li><p><code>bzip2</code>：</p><ul><li><code>-k</code>：</li><li><code>-#</code>：默认为9</li></ul></li><li><p><code>bunzip2 file.bz2</code></p></li><li><code>bzcat file.bz2</code></li></ul></li><li><p><code>.xz</code></p><ul><li><p><code>xz</code>：</p><ul><li><code>-k</code>：</li><li><code>-#</code>：默认为6</li></ul></li><li><p><code>unxz</code></p></li><li><code>xzcat</code></li></ul></li><li><p>一般来说压缩比：<code>xz &gt; bzip2 &gt; gz &gt; compress</code>，均不能压缩目录</p></li><li><code>.zip</code><ul><li><code>zip</code>：支持压缩目录</li><li><code>unzip</code></li></ul></li></ul><h3 id="二、打包-存档-和解包工具"><a href="#二、打包-存档-和解包工具" class="headerlink" title="二、打包(存档)和解包工具"></a>二、打包(存档)和解包工具</h3><ul><li><p><code>tar</code>常见用法：具体选项见man帮助</p><ul><li>打包，保留权限：<code>tar -cpvf xxx.tar file1 file2 file3...</code></li><li>追加文件至xxx.tar：<code>tar -rf xxx.tar file1 file2..</code>注：不支持对压缩文件追加</li><li>查看包中的文件列表：<code>tar -tf xxx.tar</code></li><li>解包<code>tar -xf xxx.tar [可选：-C /PATH]</code></li><li><p>结合压缩工具，打包并压缩：</p><ul><li><code>tar zcvf xxx.tar.gz [可选：/PATH]</code>；<code>.tar.gz</code>也可写成<code>.tgz</code></li><li><code>tar jcvf xxx.tar.bz2 [可选：/PATH]</code></li><li><code>tar Jcvf xxx.tar.xz [可选：/PATH]</code></li></ul></li><li><p><code>--eclude=/PATH/文件名</code>：打包时排除某文件：<code>tar -zcvf xxx.tgz --exclude=/a/b/abc.txt</code></p></li><li><code>-T</code>：指定打包列表；<code>-X</code>：指定排除列表<ul><li><code>tar -zcvf xxx.tgz -T /a/list -X /a/excludeList</code></li></ul></li></ul></li><li><p><code>split</code>：分割一个文件为多份小文件</p><ul><li><code>split -b SIZE  xxx.tgz yyy</code>：<code>yyy</code>为切割后的文件前缀，SIZE为每份大小</li><li>合并：<code>cat yyy* &gt; xxx.tgz</code></li></ul></li><li><p><code>cpio</code>：一种老的存档格式。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、压缩、解压缩工具&quot;&gt;&lt;a href=&quot;#一、压缩、解压缩工具&quot; class=&quot;headerlink&quot; title=&quot;一、压缩、解压缩工具&quot;&gt;&lt;/a&gt;一、压缩、解压缩工具&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;.Z&lt;/code&gt;后缀&lt;/p&gt;
&lt;ul&gt;
&lt;l
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://thmasterplan.cn/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://thmasterplan.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>文件查找工具</title>
    <link href="http://thmasterplan.cn/Linux/%E6%96%87%E4%BB%B6%E6%9F%A5%E6%89%BE%E5%B7%A5%E5%85%B7/"/>
    <id>http://thmasterplan.cn/Linux/%E6%96%87%E4%BB%B6%E6%9F%A5%E6%89%BE%E5%B7%A5%E5%85%B7/</id>
    <published>2019-11-22T07:44:54.000Z</published>
    <updated>2019-11-23T13:25:06.354Z</updated>
    
    <content type="html"><![CDATA[<h3 id="文件查找"><a href="#文件查找" class="headerlink" title="文件查找"></a>文件查找</h3><ul><li><p>在文件系统上查找符合条件的文件</p><ul><li><p>非实时查找（数据库查找）：<code>locate</code></p><ul><li><p>查询系统上预建的文件索引数据库<code>/var/lib/mlocate/mlocate.db</code></p></li><li><p>索引构建过程需要遍历整个根文件系统，极消耗资源</p></li><li><p>查找速度快，模糊查找，非实时，搜索的是文件的全路径，可手动更新<code>updatedb</code></p></li><li><p>选项：</p><ul><li><p><code>-i</code>：不区分大小写</p></li><li><p><code>-n N</code>：只列举前N个匹配项目</p></li><li><p><code>-r</code>：使用<strong>基本</strong>正则表达式</p></li></ul></li></ul></li><li><p>实时查找：<code>find</code></p><ul><li><p>通过遍历指定路径完成文件查找</p></li><li><p>查找速度略慢，精确，实时</p></li><li><p>语法：<code>find [选项] [查找路径] [查找条件] [处理动作]</code></p><ul><li><p>选项：</p><ul><li><code>-maxdepth level</code>：最大搜索目录深度，指定目录下的文件为第1级</li><li><code>-mindepth level</code>：最小搜索目录深度</li><li><code>-depth</code>：先搜索文件，再搜索目录；不加该选项时默认为先搜目录再搜文件</li></ul></li><li><p>查找路径：默认为当前目录</p></li><li><p>查找条件：可以查找文件名，大小，类型，权限等，默认为找出指定路径的所有文件</p><ul><li><p>根据<strong>文件名和inode</strong></p><ul><li><code>-name 文件名</code>：支持文件通配符</li><li><code>-iname 文件名</code>：不区分字母大小写</li><li><code>-inum n</code>：按inode号查找</li><li><code>-samefile 文件名</code>：相同inode号的文件</li><li><code>-links n</code>：链接数为n的文件</li><li><code>-regex &#39;PATTERN&#39;</code>：匹配整个文件路径而非文件名</li></ul></li><li><p>根据<strong>owner,group</strong></p><ul><li><code>-user 用户名</code></li><li><code>-group 组名</code></li><li><code>-uid UID</code></li><li><code>-gid GID</code></li><li><code>-nouser</code>：比如某个用户被删除，但其文件还存在</li><li><code>-nogroup</code></li></ul></li><li><p>根据<strong>文件类型</strong></p><ul><li><code>-type TYPE</code>：TYPE包括<code>f,d,l,s,b,c,p</code></li><li>空文件或目录：<code>-empty</code>，例如<code>find /usr -type d -empty</code></li></ul></li><li><p>根据<strong>文件大小</strong></p><ul><li><code>-size SIZE</code>，常用单位k,M,G</li><li>对于SIZE的写法，<code>-6k</code>代表[0,5k]，<code>6k</code>代表(5k,6k]，<code>+6k</code>代表(6k,+∞)</li></ul></li><li><p>根据<strong>时间</strong></p><ul><li><code>-atime</code>/<code>-mtime</code>/<code>-ctime</code></li><li><code>-amin</code>/<code>-mmin</code>/<code>-cmin</code></li><li><code>find ./ -mtime -3</code>，代表[0,3）天内被修改，<code>find ./ -mtime 3</code>代表第3天被修改，<code>find ./ -mtime +3</code>代表被修改3天以上。</li></ul></li><li><p>根据<strong>权限</strong></p><ul><li><code>-perm (/|-) MODE</code>0配<ul><li>MODE：精确权限匹配</li><li>/MODE：u,g,o中只要匹配到一个即可</li><li>-MODE：u,g,o必须同时满足指定权限</li><li>例如<code>find ./ -perm -222</code>指u,g,o均要有写权限才满足条件</li></ul></li></ul></li><li><p>不想搜索某目录时：使用<code>-path &#39;目录&#39; -a -prune</code>，例如<code>find / -path &#39;/etc&#39; -a -prune -o -name passwd</code>在根目录下除<code>/etc</code>外搜索文件名为<code>passwd</code>的文件。</p></li><li><p>组合条件：与：<code>-a</code>；或：<code>-o</code>；非：<code>-not</code>/<code>!</code>。即将以上各种条件组合使用查找。当需要使用括号时要转义。例如<code>find /usr \(-name &quot;f*&quot; -o -type f\) -ls</code>。</p></li></ul></li><li><p>处理动作：对符合条件的文件做操作，默认输出至屏幕</p><ul><li><code>-print</code>：默认的处理动作，显示至屏幕</li><li><code>-ls</code>：类似于对查找到的文件执行<code>ls -l</code>命令</li><li><code>-delete</code>：删除查找到的文件</li><li><code>-fls file</code>：查找到的所有文件的长格式信息保存至指定文件中。等价于<code>-ls &gt; file</code></li><li><code>-ok cmd {} \;</code>：对查找到的每个文件执行由<code>cmd</code>指定的命令，对于每个文件执行命令之前，都会交互式要求用户确认</li><li><code>-exec cmd {} \;</code>：对查找到的每个文件执行由<code>cmd</code>指定的命令</li><li><code>{}</code>用于引用查找到的文件名称自身，包含路径名。</li></ul></li><li><p><code>xargs</code>：<code>cmd1 | xargs [选项] cmd2</code></p><ul><li>xargs 是给命令传递参数的一个过滤器，也是组合多个命令的一个工具。</li><li>xargs 可以将管道或标准输入（stdin）数据转换成命令行参数，也能够从文件的输出中读取数据。</li><li>xargs 也可以将单行或多行文本输入转换为其他格式，例如多行变单行，单行变多行。</li><li>xargs 默认的命令是 echo，这意味着通过管道传递给 xargs 的输入将会包含换行和空白，不过通过 xargs 的处理，换行和空白将被空格取代。</li><li>xargs 是一个强有力的命令，它能够捕获一个命令的输出，然后传递给另外一个命令。</li><li>之所以能用到这个命令，关键是由于很多命令不支持|管道来传递参数，而日常工作中有有这个必要，所以就有了 xargs 命令</li><li>具体选项见man帮助</li><li>举例：<code>find linux-5.1.4/ -name &quot;*.c&quot; | xargs -n1 cat | wc -l</code>统计出linux内核一共有多少行c代码；<code>cat `find linux-5.1.4/ -name &quot;*.c&quot;`|wc -l</code>实际运行更快。</li></ul></li></ul></li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;文件查找&quot;&gt;&lt;a href=&quot;#文件查找&quot; class=&quot;headerlink&quot; title=&quot;文件查找&quot;&gt;&lt;/a&gt;文件查找&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在文件系统上查找符合条件的文件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;非实时查找（数据库查找）：&lt;code&gt;lo
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://thmasterplan.cn/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://thmasterplan.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Shell编程</title>
    <link href="http://thmasterplan.cn/shell%E7%BC%96%E7%A8%8B/Shell%E7%BC%96%E7%A8%8B/"/>
    <id>http://thmasterplan.cn/shell%E7%BC%96%E7%A8%8B/Shell%E7%BC%96%E7%A8%8B/</id>
    <published>2019-11-20T09:05:48.000Z</published>
    <updated>2019-11-23T13:23:43.860Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、shell脚本基础"><a href="#一、shell脚本基础" class="headerlink" title="一、shell脚本基础"></a>一、shell脚本基础</h3><ul><li>shell：解释型语言</li><li>在脚本首行需注释使用的解释器类型，比如<code>#!/bin/bash</code>，<code>#!/usr/bin/python</code>等。</li><li><code>bash -n xxx.sh</code>：执行语法检查</li><li><code>bash -x xxx.sh</code>：解释执行的同时一边执行一边打印执行结果。</li><li>变量不用事先声明，可随时改变类型；不同数据类型之间可直接运算而不用做类型转换；常用类型为字符，整型，浮点型。</li><li>变量命名规则：<ul><li>只能使用数字、字母及下划线，且不能以数字开头。</li><li>shell中命名建议：<ul><li>变量名大写</li><li>局部变量小写</li><li>函数名小写</li></ul></li></ul></li><li>显示已定义的所有变量：<code>set</code></li><li>注意脚本中定义别名不生效。</li></ul><h3 id="二、特殊位置变量"><a href="#二、特殊位置变量" class="headerlink" title="二、特殊位置变量"></a>二、特殊位置变量</h3><ul><li><code>pstree -p</code>：查看进程树</li><li><code>getent</code>：查看系统数据库的相关记录，例如<code>getent passwd root</code>，查看passwd库中root的信息。</li><li><code>变量BASHPID</code>：当前bash进程的pid</li><li><code>(命令列表)</code>：该语法的作用，小括号会开启一个subbash，其中的命令和变量只是<strong>临时生效</strong>，当命令列表执行完毕，将会退出subbash。要想退出当前进程，则需使用<code>{命令列表}</code>。</li><li><p>环境变量：子进程，父进程均可访问</p><ul><li>定义方式：<code>export NAME=abc</code>、<code>declare -x NAME=abc</code></li><li>变量引用：<code>$NAME</code>、<code>${NAME}</code></li><li>显示所有环境变量：<code>env</code>、<code>export</code>、<code>declare -x</code>、<code>printenv</code></li><li>删除变量：<code>unset</code></li><li>子进程更改环境变量，父进程访问相同环境变量不变。</li></ul></li><li><p>只读和位置变量：</p><ul><li><p>只读变量（常量）：只能声明，但不能修改和删除</p><ul><li>声明：<code>readonly NAME</code>、<code>declare -r NAME</code></li><li>查看：<code>readonly -p</code></li><li>退出当前bash自动删除</li></ul></li><li><p>位置变量：</p><ul><li><code>$1</code>代表脚本的第一个参数，<code>$2</code>代表脚本的第二个参数。。。</li><li><code>$*或者$@</code>：脚本的所有参数；前者全部参数合为一个字符串，后者每个参数为独立字符串。</li><li><code>$#</code>：脚本的参数个数</li><li><code>$0</code>：脚本的路径及脚本名</li><li><code>set --</code>：清空所有位置变量</li><li>例如<code>rm a b c</code>：则<code>$1</code>在脚本中代表a；<code>$*</code>为a，b，c；<code>$#</code>为3。</li></ul></li></ul></li><li><p>退出状态：进程使用退出状态来报告成功或失败，0代表成功，1-255代表失败。<code>$?</code>变量保存最近的命令退出状态。 </p></li></ul><h3 id="三、算术逻辑运算和条件测试"><a href="#三、算术逻辑运算和条件测试" class="headerlink" title="三、算术逻辑运算和条件测试"></a>三、算术逻辑运算和条件测试</h3><ul><li><p>算术运算：<code>+,-,*,/,%,**（乘方）</code>，乘法符号有些场景需要转义。</p><ul><li><code>let var=算术表达式</code></li><li><code>var=$[算术表达式]</code></li><li><code>var=$((算术表达式))</code></li><li><code>var=$(expr arg1 arg2 arg3...)</code></li><li><code>declare -i var = xxx</code></li><li><code>echo &#39;算术表达式&#39;|bc</code></li></ul></li><li><p><code>RANDOM</code>：系统随机数变量，随机生成0-32767之间的数。</p></li><li><p>逻辑运算：</p><ul><li>短路与：<code>cmd1 &amp;&amp; cmd2</code>：如果<code>cmd1</code>结果失败，不执行<code>cmd2</code>；如果<code>cmd1</code>成功，执行<code>cmd2</code>。</li><li>短路或：<code>cmd1 || cmd 2</code>：如果<code>cmd1</code>成功，不执行<code>cmd2</code>；如果<code>cmd1</code>失败，执行<code>cmd2</code>。</li><li><code>cmd1 &amp;&amp; cmd2 || cmd3</code>，<code>cmd1</code>失败，则执行<code>cmd3</code>；<code>cmd1</code>成功，则执行<code>cmd2</code>，根据<code>cmd2</code>的结果进一步判断是否执行<code>cmd3</code>，一般来说<code>cmd2</code>是执行成功的所有不会再进一步执行<code>cmd3</code>，因而该写法类似于其他语言中的<code>x ? y : z</code>。</li></ul></li><li><p>条件测试：</p><ul><li><code>test EXPRESSION</code>或者<code>[ EXPRESSION ]</code>或者<code>[[ EXPRESSION ]]</code>，<code>EXPRESSION</code><strong>前后必须要有空格</strong>，其中<strong><code>[[]]</code>语法支持正则表达式</strong>。</li><li><p><code>help test</code>：查看相关选项</p></li><li><p>脚本练习：查看磁盘最大使用率</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">var=`df | grep '/dev/sda' | sort -rn | head -1 | tr -s ' ' % | cut -d% -f5`</span><br><span class="line">test $var -gt 80 &amp;&amp; echo "disk is almost full" || echo "the use rate of the disk is $var"</span><br></pre></td></tr></table></figure></li><li><p>bash的数值测试：</p><ul><li><code>-v VAR</code>：变量VAR是否设置</li><li><code>-gt</code>：是否&gt;</li><li><code>-ge</code>：是否&gt;=</li><li><code>-eq</code>：是否=</li><li><code>-ne</code>：是否!=</li><li><code>-lt</code>：是否&lt;</li><li><code>-le</code>：是否&lt;=</li></ul></li><li><p>bash的字符串测试：</p><ul><li><code>=</code>：是否等于</li><li><code>&gt;</code>：ASCII码值是否大于</li><li><code>&lt;</code></li><li><code>!=</code></li><li><code>=~</code>：左侧字符串是否能够被右侧的PATTERN所匹配，例如<code>[[ &#39;abcde&#39; =~ [[:digit:]] ]]</code>，返回<code>false</code>，因为左侧字符串不包含数字。</li></ul></li><li><p>bash的组合测试条件</p><ul><li>判断某文件是否是<code>.sh</code>结尾并且可执行，<code>file=./test.sh; [[ $file =~ \.sh$ ]] &amp;&amp; [ -x $file ]</code> ，也可以这样写<code>[ &quot;$file =~ \.sh$&quot; -a &quot;-x $file&quot; ]</code>即使用<code>-a</code>选项。</li><li><code>[ EXPRESSION1 -a EXPRESSION2 ]</code>表示与，<code>[ EXPRESSION1 -o EXPRESSION2 ]</code>表示或。</li></ul></li></ul></li><li><p><code>read</code>：从标准输入读一行，例如<code>read -p &quot; Please input your name&quot; NAME</code>，则用户输入的值赋给<code>NAME</code>变量。</p><ul><li><code>-p</code>：指定要显示的提示</li><li><code>-s</code>：静默输入，一般用于密码</li><li><code>-n N</code>：指定输入的字符长度N</li><li><code>-d &#39;字符&#39;</code>：输入中出现该字符即结束输入。</li><li><code>-t N</code>：超时时长N秒</li></ul></li></ul><h3 id="四、条件分支"><a href="#四、条件分支" class="headerlink" title="四、条件分支"></a>四、条件分支</h3><ul><li><p>```<br>if [ EXPRESSION ];then</p><pre><code>条件为真的分支代码</code></pre><p>else</p><pre><code>条件为假的分支代码</code></pre><p>fi</p><h1 id="或者"><a href="#或者" class="headerlink" title="或者"></a>或者</h1><p>if [  ];then<br>   xxxxx<br>elif [  ];then<br>   xxxxx<br>elif [  ];then<br>   xxxxx<br>…….<br>else<br>   yyyyy<br>fi</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- ```shell</span><br><span class="line">  case $NUM in</span><br><span class="line">  1|3|5)</span><br><span class="line">     cmd1</span><br><span class="line">     ;;</span><br><span class="line">  2|4|6)</span><br><span class="line">     cmd2</span><br><span class="line">     ;;</span><br><span class="line">  ...</span><br><span class="line">  *)</span><br><span class="line">     cmdN</span><br><span class="line">     ;;</span><br><span class="line">  esac</span><br></pre></td></tr></table></figure></li></ul><h3 id="五、脚本安全"><a href="#五、脚本安全" class="headerlink" title="五、脚本安全"></a>五、脚本安全</h3><ul><li><code>set -u</code>：在脚本前加上该语句，在引用一个未设置的变量时，显示错误信息，并且不执行含有未设置变量的语句。</li><li><code>set -e</code>：如果一个命令执行失败就退出脚本。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、shell脚本基础&quot;&gt;&lt;a href=&quot;#一、shell脚本基础&quot; class=&quot;headerlink&quot; title=&quot;一、shell脚本基础&quot;&gt;&lt;/a&gt;一、shell脚本基础&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;shell：解释型语言&lt;/li&gt;
&lt;li&gt;在脚本首行需注
      
    
    </summary>
    
    
      <category term="shell编程" scheme="http://thmasterplan.cn/categories/shell%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Linux" scheme="http://thmasterplan.cn/tags/Linux/"/>
    
      <category term="shell编程" scheme="http://thmasterplan.cn/tags/shell%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="http://thmasterplan.cn/regex/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://thmasterplan.cn/regex/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2019-11-20T07:16:10.000Z</published>
    <updated>2019-11-23T13:25:39.521Z</updated>
    
    <content type="html"><![CDATA[<h3 id="元字符分类：字符匹配、匹配次数、位置锚定、分组"><a href="#元字符分类：字符匹配、匹配次数、位置锚定、分组" class="headerlink" title="元字符分类：字符匹配、匹配次数、位置锚定、分组"></a>元字符分类：字符匹配、匹配次数、位置锚定、分组</h3><h4 id="字符匹配"><a href="#字符匹配" class="headerlink" title="字符匹配"></a>字符匹配</h4><ul><li><code>.</code>：匹配任意单个字符</li><li><code>\</code>：转义字符，例如<code>\.</code>表示匹配<code>.</code>本身而非任意单个字符。</li><li><code>[]</code>：匹配指定范围内任意<strong>单个</strong>字符</li><li><code>[^]</code>：匹配指定范围外的任意<strong>单个</strong>字符</li><li><code>[:alnum:]</code>：字母和数字</li><li><code>[:alpha:]</code>：任何英文大小写字符</li><li><code>[:lower:]</code>：小写字母</li><li><code>[:upper:]</code>：大写字母</li><li><code>[:digit:]</code>：十进制数字</li><li><code>[:xdigit:]</code>：十六进制数字</li><li><code>[:blank:]</code>：空白字符（空格和制表符）</li><li><code>[:space:]</code>：水平和垂直的空白字符</li><li><code>[:cntrl:]</code>：不可打印的控制字符（退格、删除等）</li><li><code>[:graph:]</code>：可打印的非空白字符</li><li><code>[:print:]</code>：可打印字符</li><li><code>[:punct:]</code>：标点符号</li></ul><h4 id="匹配次数：用在用指定次数的字符后面，指定前面的字符出现的次数"><a href="#匹配次数：用在用指定次数的字符后面，指定前面的字符出现的次数" class="headerlink" title="匹配次数：用在用指定次数的字符后面，指定前面的字符出现的次数"></a>匹配次数：用在用指定次数的字符后面，指定前面的字符出现的次数</h4><ul><li><code>*</code>：匹配前面的字符0或多次。注意与文件名通配符里<code>*</code>的区别。</li><li><code>.*</code>：任意长度的任意字符。</li><li><code>\?</code>：匹配前面的字符0或1次。</li><li><code>\+</code>：匹配前面的字符至少1次。</li><li><code>\{n\}</code>：匹配前面的字符n次。</li><li><code>\{m,n\}</code>：匹配前面的字符至少m次，至多n次。</li><li><code>\{,n\}</code>：匹配前面的字符至多n次。</li><li><code>\{n,\}</code>：匹配前面的字符至少n次。</li></ul><h4 id="位置锚定：定位出现的位置"><a href="#位置锚定：定位出现的位置" class="headerlink" title="位置锚定：定位出现的位置"></a>位置锚定：定位出现的位置</h4><ul><li><code>^</code>：行首锚定，用于模式的最左侧。例如<code>grep ^[^#] xxx</code>表示显示xxx中所有非#开头的行，即显示非注释行。</li><li><code>$</code>：行尾锚定，用于模式的最右侧。 </li><li><code>^PATTERN$</code>：用于模式匹配整行。<code>^$</code>可表示空行。</li><li><code>\b</code>：词首或词尾锚定，用于单词模式的左/右侧。</li></ul><h4 id="分组："><a href="#分组：" class="headerlink" title="分组：\(\)"></a>分组：<code>\(\)</code></h4><ul><li><code>\(string\)</code>：其中<code>string</code>会被正则表达式引擎记录与内部的变量中，这些变量的命名方式为：<code>\1,\2,\3,...</code>。</li><li>示例：<code>\(string1\(string2\)\)</code>：<code>\1</code>：<code>string1\(string2\)</code>；<code>\2</code>：<code>string2</code>。</li><li>例如：<code>\(root\)\{1,3\}</code>：可匹配1-3个<code>root</code>字符串。</li></ul><h4 id="扩展的正则表达式：-去掉"><a href="#扩展的正则表达式：-去掉" class="headerlink" title="扩展的正则表达式： 去掉\"></a>扩展的正则表达式： 去掉<code>\</code></h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;元字符分类：字符匹配、匹配次数、位置锚定、分组&quot;&gt;&lt;a href=&quot;#元字符分类：字符匹配、匹配次数、位置锚定、分组&quot; class=&quot;headerlink&quot; title=&quot;元字符分类：字符匹配、匹配次数、位置锚定、分组&quot;&gt;&lt;/a&gt;元字符分类：字符匹配、匹配次数、位
      
    
    </summary>
    
    
      <category term="regex" scheme="http://thmasterplan.cn/categories/regex/"/>
    
    
      <category term="regex" scheme="http://thmasterplan.cn/tags/regex/"/>
    
  </entry>
  
  <entry>
    <title>常见文本处理命令</title>
    <link href="http://thmasterplan.cn/Linux/%E5%B8%B8%E8%A7%81%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E5%91%BD%E4%BB%A4/"/>
    <id>http://thmasterplan.cn/Linux/%E5%B8%B8%E8%A7%81%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E5%91%BD%E4%BB%A4/</id>
    <published>2019-11-19T11:49:20.000Z</published>
    <updated>2019-11-26T14:20:37.984Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>查看文本内容：</p><ul><li><p><code>cat</code>：适合查看小文本</p><ul><li><code>-E</code>：显示行结束符<code>$</code></li><li><code>-n</code>：对显示的每一行编号</li><li><code>-A</code>：显示所有控制符</li></ul></li><li><p><code>tac</code>：从最后一行向前反向显示</p></li><li><code>rev</code>：每一行都是反向显示</li><li><code>more、less</code>：分页查看</li></ul></li><li><p>文本截取：</p><ul><li><code>head</code><ul><li><code>-c#</code>：获取前<code>#</code>字节</li><li><code>-#</code>：获取前<code>#</code>行</li></ul></li><li><code>tail</code><ul><li><code>-c#</code>：获取后<code>#</code>字节</li><li><code>-#</code>：获取后<code>#</code>行</li><li><code>-f</code>：可用于日志监控，例如<code>tail -f /var/log/messages</code>，即时显示日志追加文本的变化。</li></ul></li></ul></li><li><p>按列抽取：</p><ul><li><code>cut</code>：<code>cut -d# -f1,3</code>：以<code>#</code>作为分隔符，截取第1列和第3列<ul><li><code>-d</code>：指明分隔符</li><li><code>-f</code>：指明字段</li></ul></li><li>练习：获取网卡ip地址：<code>ifconfig ens33  | head -2 | tail -1 | tr -s &quot; &quot; | cut -d&quot; &quot; -f3</code></li></ul></li><li><p>排序和统计：</p><ul><li><p>文本排序<code>sort</code>：把排序后的文本显示在STDOUT，不改变原始文件</p><ul><li><code>-n</code>：按照数字大小排序</li><li><code>-r</code>：反向排序</li><li><p><code>-u</code>：删除重复行</p></li><li><p><code>-t#</code>：<code>#</code>作为字段界定符</p></li><li><code>-kX</code>：选项按照使用<code>#</code>分隔的第<code>X</code>列来排序</li></ul></li><li><p><code>uniq</code>：删除连续重复的行</p><ul><li><code>-c</code>：显示重复出现的行的次数，常与<code>sort</code>命令一起使用；<code>sort a.txt| uniq -c</code>。</li></ul></li><li><p>文本数据统计<code>wc</code>：</p><ul><li><code>wc test.txt</code>：依次输出行数，单词数，字节数</li><li><code>-l</code>：只计数行数</li><li><code>-w</code>：只计数单词数</li><li><code>-c</code>：只计数字节数</li><li><code>-m</code>：只计数字符总数</li><li><code>-L</code>：显示文件中最长行的长度</li></ul></li><li><p>比较文件：<code>diff和patch</code></p></li></ul></li><li><p>按关键字抽取：</p><ul><li><code>grep</code>：<code>grep [选项] 模式 file</code>文本搜索工具，根据指定<code>模式[由正则表达式字符及文本字符所编写的过滤条件]</code>对目标文本逐行进行匹配检查，打印匹配到的行。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;查看文本内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;cat&lt;/code&gt;：适合查看小文本&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-E&lt;/code&gt;：显示行结束符&lt;code&gt;$&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-n&lt;/code&gt;：对显示的
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://thmasterplan.cn/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://thmasterplan.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>java位运算</title>
    <link href="http://thmasterplan.cn/JAVA/java%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    <id>http://thmasterplan.cn/JAVA/java%E4%BD%8D%E8%BF%90%E7%AE%97/</id>
    <published>2019-11-19T10:25:55.000Z</published>
    <updated>2019-11-24T12:45:33.112Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JAVA位运算符"><a href="#JAVA位运算符" class="headerlink" title="JAVA位运算符"></a>JAVA位运算符</h3><ol><li>&amp; ：按位与。同时为1才为1，否则为0。</li><li>| ：按位或。有一个为1则为1。</li><li>~ ：按位取反。例如3：补码：0b00000000000000000000000000000011。~3—&gt;得:0b11111111111111111111111111111100。(依旧为补码)。减一后取反得原码(原码-&gt;补码的逆运算)：0b1000000000000000000000000000100。故3取反后为-4。</li><li>^ ：按位异或。不同为1，相同为0。<ul><li>一个数据对相同的数据异或两次，值不变,常应用于加密。即a^b^b == a。</li><li>使用异或实现两个变量值交换。a = a^b; b = a^b; a = a^b。</li></ul></li><li>&lt;&lt; ：左移。左操作数乘以2的n次幂。n是右操作数，即左移的位数。右边空出两位补0，左边两位被挤掉。</li><li><strong>&gt;&gt;</strong> ：右移。左操作数除以2的n次幂。n是右操作数，即右移的位数。左边空出两位用符号位填充，右边两位被挤掉。<ul><li>例如：-32 &gt;&gt; 2 ：原码：10000000000000000000000000100000，反码：11111111111111111111111111011111，补码：11111111111111111111111111100000。右移后为：11111111111111111111111111111000。求得原码为：10000000000000000000000000001000。得-8。</li></ul></li><li><strong>&gt;&gt;&gt;</strong> ：<strong>无符号右移</strong>。左边空出的位置用0补全。例如-32 &gt;&gt;&gt; 2变成一个很大的正数。</li><li>位运算均针对<strong>补码</strong>进行。正数的符号位为0，原、反、补码均为其本身；负数的符号位为1，其反码为对原码除符号位其余所有位求反，补码为对反码+1。</li><li>对于有符号数，计算机中存储的是<strong>补码</strong>。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;JAVA位运算符&quot;&gt;&lt;a href=&quot;#JAVA位运算符&quot; class=&quot;headerlink&quot; title=&quot;JAVA位运算符&quot;&gt;&lt;/a&gt;JAVA位运算符&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&amp;amp; ：按位与。同时为1才为1，否则为0。&lt;/li&gt;
&lt;li&gt;| ：按位或
      
    
    </summary>
    
    
      <category term="JAVA" scheme="http://thmasterplan.cn/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://thmasterplan.cn/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>网络安全总结</title>
    <link href="http://thmasterplan.cn/%E5%AE%89%E5%85%A8/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%80%BB%E7%BB%93/"/>
    <id>http://thmasterplan.cn/%E5%AE%89%E5%85%A8/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%80%BB%E7%BB%93/</id>
    <published>2019-11-19T10:21:36.000Z</published>
    <updated>2019-11-23T13:24:48.513Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Security"><a href="#Security" class="headerlink" title="Security"></a>Security</h2><h3 id="一、-介绍"><a href="#一、-介绍" class="headerlink" title="一、    介绍"></a>一、    介绍</h3><ol><li><strong>网络安全五个特征</strong>：<ul><li>保密性：信息不泄露给非授权用户、实体或过程，或供其利用的特性。 </li><li>完整性：数据未经授权不能进行改变的特性。即信息在存储或传输过程中保持不被修改、不被破坏和丢失的特性。 </li><li>可用性：可被授权实体访问并按需求使用的特性。即当需要时能否存取所需网络安全解决措施的信息。例如网络环境下拒绝服务、破坏网络和有关系统的正常运行等都属于对可用性的攻击； </li><li>可控性：对信息的传播及内容具有控制能力。</li><li>不可否认性：出现的安全问题时提供依据与手段。</li></ul></li><li><strong>安全机制</strong>:<ul><li>加密机制</li><li>数字签名机制</li><li>访问控制机制</li><li>数据完整性机制</li><li>认证交换机制</li><li>通信业务流填充</li><li>路由控制</li><li>公证机制</li><li>普遍性安全机制</li></ul></li><li><strong>网络攻击方法</strong>:<ul><li>被动攻击</li><li>主动攻击</li><li>物理临近攻击</li><li>内部人员攻击</li><li>软硬件装配攻击</li></ul></li></ol><h3 id="二、-古典加密技术"><a href="#二、-古典加密技术" class="headerlink" title="二、    古典加密技术"></a>二、    古典加密技术</h3><ol><li><strong>代替密码</strong>：明文中的每个字符被替换成密文中的另一个字符<ul><li>凯撒码<ul><li><img src="1.png" alt=""></li><li>将明文转换为数字，使用加密函数E（m）=m+k(mod 26)得密文。解密函数D（c）=c-k(mod 26)。（只是字母简单的偏移）</li></ul></li><li>维吉尼亚密码<ul><li>密钥：一个字符串，对应一个数表</li><li><img src="2.png" alt=""></li><li>暴力破解需要26的k次方</li></ul></li><li>代替密码特点：<ul><li>单字母代换密码 ：明文中字母的出现频度、重复字母的模式和字母相互之间的结合模式等统计特性不变，安全性差。</li><li>多字母代替密码 ：字符块被成组加密 ，有利于抗击统计分析。</li></ul></li></ul></li><li><strong>置换密码</strong>：又称换位密码（transposition cipher） ，并没有改变明文字母，只改变了这些字母的出现顺序。<br>在对密文进行统计之后，易于判断该密文是否使用了置换密码加密方案。</li><li><strong>Kerckhoffs假设</strong>：假定密码分析者知道对方所使用的密码系统，包括明文的统计特性，加密体制（操作方式、处理方法和加/解密算法）、密钥空间及其统计特性。但是，不知道密钥。在设计一个密码系统时，目标是在Kerckhoffs假设的前提下实现安全。</li><li><strong>密码分析方法</strong>：尝试发现明文或密钥的过程<ul><li>唯密文攻击：知道部分密文试图恢复明文，并试图推算密钥</li><li>已知明文攻击：知道部分消息密文及对应明文，试图推导密钥或算法</li><li>选择明文攻击：事先选择部分明文让被攻击者加密，并得到相应密文，试图推导出密钥或算法。</li><li>选择密文攻击：密码分析者需要掌握的内容包括：加密算法、截获的部分密文、自己选择的密文消息以及相应的被解密的明文。密码分析者事先任意搜集一定数量的密文，让这些密文透过被攻击的加密算法解密，透过未知的密钥获得解密后的明文。由此能够计算出加密者的私钥或者分解模数，运用这些信息，攻击者可以恢复所有的明文。</li></ul></li><li><strong>维吉尼亚密码的密码分析</strong><ul><li>字母频率统计用于猜测</li><li>Kasiski测试法确定密钥长度</li><li>重合指数法破译密文</li></ul></li></ol><h3 id="三、-对称加密"><a href="#三、-对称加密" class="headerlink" title="三、    对称加密"></a>三、    对称加密</h3><ol><li><strong>分组密码的设计原则</strong><ul><li>混乱原则：密码设计应保证明文与密文之间的依赖关系足够复杂。</li><li>扩散原则：密码设计应保证密钥的每位数字能够影响密文中的多位数字（避免对密钥逐段破译），同时应保证明文的每位数字能够影响密文中的多位数字（隐藏明文的统计特性）。</li></ul></li><li><strong>分组密码特点</strong><ul><li>优点：易于标准化，易于实现同步</li><li>缺点：不善于隐藏明文的数据模式，对于重放、插入、删除等攻击方式的抵御能力不强。</li></ul></li><li><strong>对称加密算法</strong>：DES/AES<ul><li><img src="3.png" alt=""></li></ul></li><li><strong>分组密码工作模式</strong><ul><li>ECB（Electronic Codebook）: 电码本<ul><li>用相同的密钥分别对明文分组独立加密</li><li>对长明文不安全，因为重复的明文块在密文中也是重复的</li></ul></li><li>CBC（Cipher Block Chaining）：密文分组链接<ul><li>加密算法的输入是上一个密文组和下一个明文组的异或</li><li>优点：能够隐蔽明文的数据模式；能够一定程度上防止分组的重放、插入和删除攻击。</li><li>缺点：易导致错误传播。任意一个明文或密文组出错会导致其后的密文分组出错。</li></ul></li><li>CFB（Cipher Feedback）:密文反馈<ul><li>一次处理s位（明文和密文均是），加密算法的输入是上一块密文，加密后产生的伪随机数输出与明文异或作为下一单元的密文。</li><li>实质是一种自同步流密码</li><li>适用于必须按比特或字符对明文进行加密的情况</li></ul></li><li>OFB（Output Feedback）：输出反馈<ul><li>与CFB类似，只是加密算法的输入是上一次加密算法的输出，且使用整个分组</li><li>优点：能够克服错误传播</li><li>缺点：很难发现密文被篡改；不具备自同步能力</li></ul></li><li>CTR计数器<ul><li>每个明文分组都与一个经过加密的计数器相异或。对每个后续分组计数器递增</li><li>并行加密效率高</li></ul></li></ul></li><li><strong>分组密码典型攻击方法</strong><ul><li>依据攻击者所掌握的信息：唯密文攻击、已知明文攻击、选择明文攻击</li><li>根据采用的技术方法<ul><li>强力攻击（适用于任何分组密码算法）：穷尽密钥搜索、字典、查表、时间-存储权衡</li><li>差分密码分析</li><li>线性密码分析</li><li>差分-线性密码分析</li></ul></li><li>攻击复杂度：数据复杂度（实施攻击所需输入的数据量）和处理复杂度（处理数据所需的计算量）。</li></ul></li><li><strong>对称密钥编码问题</strong>：通信密钥太多，管理与分发困难</li></ol><h3 id="四、-公钥加密"><a href="#四、-公钥加密" class="headerlink" title="四、    公钥加密"></a>四、    公钥加密</h3><ol><li><strong>RSA原理</strong><ul><li><img src="4.png" alt=""></li></ul></li><li><strong>计算</strong>：(a x b) mod n = [(a mod n) x (b mod n)] mod n.</li><li><strong>RSA实现上的问题</strong><br>在构造n时应选择p和q的长度相差不大</li><li><strong>RSA适合低频少量数据交换，如密钥分发；不适合数据量大，实时性强的场合（因为运算量大，慢）</strong></li></ol><h3 id="五、-消息鉴别"><a href="#五、-消息鉴别" class="headerlink" title="五、    消息鉴别"></a>五、    消息鉴别</h3><ol><li><strong>概念</strong>：消息接收者对消息进行验证（真实性：确认并非假冒）（完整性：内容未被篡改）。</li><li><strong>网络通信安全威胁</strong>：泄露、伪造、篡改、行为抵赖</li><li><strong>鉴别与保密</strong>：鉴别不能自动提供保密性，保密性不能自动提供鉴别功能。</li><li><strong>报文鉴别系统功能</strong>：鉴别算法（鉴别函数f产生鉴别码），鉴别协议，鉴别函数f是决定鉴别系统特性的主要因素。</li><li><strong>鉴别函数分类</strong>：<ul><li>以整个报文的密文作为鉴别符；<ul><li>对称密钥加密：加密的同时提供保密和鉴别（强制明文具有某种结构）</li><li>附加报文鉴别结构：发送端：校验码C = f（M），密文X = Ek[M || C]; 接收端：Y = Dk(X) = [M’ || C’], 若f(M’) = C’,则报文可信。</li><li>公钥加密：提供报文鉴别和签名，不提供加密功能。</li></ul></li><li>报文鉴别码(MAC)：核心是一个类似于加密的算法Ck()（k为密钥）, Ck(M)输出一个较短的定长数据分组也即MAC。发送[MAC || M]。接收端同样计算MAC，比较两个MAC是否相同。<br>PS：MAC与加密函数比较：MAC可以是单向的，而加密函数必须可逆；MAC算法不能提供保密性。</li><li>散列函数方式（采用一个公共散列函数，将任意长度的报文映射为一个定长的散列值，并以散列值作为鉴别符）。（常用SHA-3，MD5）<br>散列函数特性：<ul><li>输入任意大小数据块，输出定长</li><li>容易计算</li><li>单向性：对任意散列值h要找到一个M使得H(M) = h不可行。</li><li>弱抗冲突性：对任意给定M，要找到M’ != M,使得H(M)=H(M’)计算上不可行。该性质可防止伪造。</li><li>强抗冲突性：要找到两报文M和N使他们散列值相同不可行。该性质指出散列函数对“生日攻击”的抵抗能力。</li></ul></li></ul></li><li><strong>生日悖论攻击</strong>：伪造消息报文使hash值不变</li><li><strong>中间符合攻击概念</strong></li></ol><h3 id="六、-密钥建立和管理"><a href="#六、-密钥建立和管理" class="headerlink" title="六、    密钥建立和管理"></a>六、    密钥建立和管理</h3><ol><li><strong>密钥建立的模式</strong>：点到点（通信双方直接通信，分布式）；密钥分配中心KDC（用户与KDC有共享主密钥，KDC生成并分配会话密钥，集中式）；密钥转换中心KTC（只负责转发，集中式）</li><li><strong>Diff-Hellman密钥交换</strong><ul><li><img src="5.png" alt=""></li><li><img src="6.png" alt=""></li><li>如图，双方都计算出密钥为2</li></ul></li><li><strong>公钥加密体制的密钥分配</strong>：公钥的分配；使用公钥体制来分配对称密钥密码体制的密钥。</li><li><strong>伪随机数生成器</strong>:线性同余算法；基于密码算法的随机数生成器（循环加密方式，DES的OFB模式）；BBS生成器；</li><li><strong>密钥控制技术</strong>：密钥标签（DES的64位密钥中的8个校验位作为控制使用这一密钥的标签）；控制矢量</li></ol><h3 id="七、-用户认证"><a href="#七、-用户认证" class="headerlink" title="七、    用户认证"></a>七、    用户认证</h3><ol><li><strong>身份认证</strong>：密码，令牌（磁条卡，存储卡，智能卡），生物识别（虹膜，视网膜，指纹，签名，声音，脸）</li><li><strong>口令破解</strong>：字典攻击，密码猜测，彩虹表攻击（可见密码不能明文存储，要求哈希后加salt，盐：随机字符）</li><li><strong>口令的脆弱性</strong>：离线字典攻击；特定账户攻击；流行密码的攻击；单个用户的密码猜测；工作站劫持；电子监控；利用用户失误</li><li><strong>Bad Passwords</strong>:过短的密码；易猜测的密码</li><li><strong>Countermeasures</strong>：阻止未经授权访问密码文件；入侵检测措施；帐户锁定机制；自动工作站注销；加密的网络链接</li></ol><h3 id="八、-身份认证协议"><a href="#八、-身份认证协议" class="headerlink" title="八、    身份认证协议"></a>八、    身份认证协议</h3><ol><li><strong>Kerberos身份认证协议</strong>：集中式的认证服务器结构，认证服务器的功能是实现用户与其访问的服务器间的相互鉴别；采用对称加密技术</li><li><strong>数字签名</strong>：直接数字签名仅涉及通信双方<ul><li>使用公钥算法进行数字签名</li><li>假定接收方知道发送方的公钥</li><li>发送方用私钥加密整个消息或者消息的散列码</li><li>接收方用公钥解密即可确认发送方的身份</li></ul></li><li><strong>公钥基础设施(PKI)</strong><ul><li>提供三种安全服务：<ul><li>认证：身份认证，采用数字签名实现</li><li>完整性：数据完整性，采用数字签名或消息认证码</li><li>机密性：采用对称加密</li></ul></li><li>包括：认证机构CA，证书库，证书撤销，密钥备份和恢复，自动密钥更新，密钥历史档案，交叉认证，时间戳…</li></ul></li><li><strong>X.509认证服务</strong>：<ul><li>X.509协议实现基于公钥加密算法和数字签名技术</li><li>证书由CA创建，CA用其私钥对证书签名，用户可用CA的公钥验证证书有效性并提取被认证的用户的公钥</li></ul></li></ol><h3 id="九、-互联网安全协议和标准"><a href="#九、-互联网安全协议和标准" class="headerlink" title="九、    互联网安全协议和标准"></a>九、    互联网安全协议和标准</h3><ol><li><strong>IPSec</strong>:提供认证、保密性、密钥管理。优点：在传输层下，因而对应用程序、用户透明；抵抗旁路攻击；保护路由架构…</li><li><strong>IPSec架构</strong>：<ul><li><img src="7.png" alt=""></li><li>IPv6强制，IPv4可选</li></ul></li><li><strong>安全关联SA</strong>：<ul><li>发送方和接收方之间的单向的关系，为数据流提供安全保障</li><li>由三个参数定义：Security Parameters Index (SPI)；IP Destination Address；Security Protocol Identifier</li><li>有一个安全关联数据库（）</li></ul></li><li><strong>SA管理</strong>：<ul><li>创建：先协商SA参数，再更新SAD；可人工创建，也可动态创建</li><li>删除：有效期过期；密钥遭破坏；另一端要求删除该SA</li></ul></li><li><strong>认证头(AH)</strong>：<ul><li>提供数据整合和IP包认证</li><li>有限地抗重播攻击</li><li>基于消息认证码（MAC）</li></ul></li><li><strong>重放攻击</strong>：攻击者发送一个目的主机已接收过的包，来达到欺骗系统的目的，主要用于身份认证过程，破坏认证的正确性。</li><li><strong>抗重播服务</strong>：<ul><li>序列号字段：创建一个新的SA时，发送者会将序列号计数器初始化为0； 每当在这一SA上发送一个数据包，序列号计数器的值就加1并将序列号字段设置成计数器的值； 当达到其最大值2³²-1时，就应建立一个新的SA。</li><li>一种滑动窗口机制：IP是无连接的、不可靠的 ，需设立窗口；窗口的最左端对应于窗口起始位置的数据包序列号N，则最右端对应于可以接收的合法分组的最高序号N+WindowSize-1</li></ul></li><li><strong>ESP</strong>:提供保密性和抗重播服务</li><li><strong>密钥管理</strong>:密钥生成和分发；AH和ESP各一对密钥；</li><li><strong>安全套接层SSL</strong>：<ul><li><img src="8.png" alt=""></li><li><img src="9.png" alt=""></li></ul></li><li><strong>SSL的两个重要概念</strong>：<ul><li>SSL连接：<ul><li>一个连接是一个提供一种合适类型服务的传输</li><li>SSL连接是端对端的</li><li>连接是暂时的</li></ul></li><li>SSL会话：<ul><li>一个SSL会话是在客户端和服务器之间的一个关联</li><li>会话由Handshake Protocal创建。会话定义了一组可供多个连接共享的加密安全参数</li><li>会话用以：避免为每一个连接提供新的安全参数所需的昂贵的谈判代价</li></ul></li></ul></li></ol><h3 id="十、-Hacking"><a href="#十、-Hacking" class="headerlink" title="十、    Hacking"></a>十、    Hacking</h3><ol><li><strong>攻击思路</strong>：信息收集，获取权限，安装后门（木马），扩大影响（攻击该网络其他主机），清除痕迹</li><li><strong>安全评估</strong></li><li><strong>TCSEC，CC</strong></li></ol><h3 id="十一、-信息收集（选择题）"><a href="#十一、-信息收集（选择题）" class="headerlink" title="十一、    信息收集（选择题）"></a>十一、    信息收集（选择题）</h3><ol><li><strong>Web与搜索引擎服务</strong></li><li><strong>目标</strong>：获取目标网络或公司的URL，获取目标网络的拓扑结构</li><li><strong>扫描目的</strong>：查看目标网络中哪些主机是存活的，查看存活的主机运行了哪些服务，查看主机提供的服务有无漏洞<ul><li>IP扫描：判断目标网络有多少台主机存活（ping）（ping使用ICMP协议）</li><li>端口扫描：判断目标主机有哪些端口是打开的(TCP端口和UDP端口)（端口是入侵的通道）<ul><li>TCP扫描：TCP Connect，SYN，FIN</li><li>UDP扫描</li></ul></li><li>漏洞扫描</li></ul></li><li><strong>操作系统类型探测</strong></li></ol><h3 id="十二、-缓冲区溢出"><a href="#十二、-缓冲区溢出" class="headerlink" title="十二、    缓冲区溢出"></a>十二、    缓冲区溢出</h3><ol><li><strong>缓冲区</strong>：应用程序保存用户输入数据，程序临时数据的内存空间。缓冲区本质：数组。位置：堆、栈、数据段</li><li><strong>溢出</strong>：用户输入数据长度超出了程序为其分配的内存空间，这些数据会覆盖其他程序数据的内存空间。</li><li><strong>危害</strong>：程序异常，系统崩溃，程序跳到恶意代码，控制权被窃</li><li><strong>溢出种类</strong>：堆溢出、栈溢出、整型溢出、格式化字符串溢出、其他溢出</li><li><strong>溢出的共性</strong>：大对象向小对象复制数据，容纳不下造成溢出</li><li><strong>避免缓冲区溢出漏洞</strong>：<ul><li>人编写正确的代码</li><li>编译器进行数组边界检查</li><li>使用类型安全语言</li><li>RunTime保护</li><li>操作系统</li><li>硬件</li></ul></li></ol><h3 id="十三、-Web脚本攻击"><a href="#十三、-Web脚本攻击" class="headerlink" title="十三、    Web脚本攻击"></a>十三、    Web脚本攻击</h3><ol><li><strong>SQL注入攻击</strong> ：把SQL命令插入到Web表单提交或输入域名或页面请求的查询字符串中，最终达到欺骗服务器执行恶意的SQL命令。<br>步骤<ul><li>绕过认证：conditions：账号密码的查询是同一条查询语句；密码没有加密保护</li><li>判断能否进行SQL注入</li><li>判断数据库类型及注入方法</li><li>猜测表名和字段名</li><li>猜测用户名和密码</li></ul></li><li><strong>预防</strong><ul><li>过滤关键字</li><li>限制输入长度</li><li>秘密字段使用散列函数保护</li></ul></li><li><strong>XSS跨站脚本攻击</strong>：通过在链接中插入恶意代码就能盗取用户信息。</li><li><strong>预防</strong><ul><li>对动态生成页面的字符进行编码</li><li>对输入进行过滤限制</li><li>对动态内容使用HTML和URL编码</li><li>设置浏览器不执行任何脚本下载</li></ul></li></ol><h3 id="十四、-DOS攻击"><a href="#十四、-DOS攻击" class="headerlink" title="十四、    DOS攻击"></a>十四、    DOS攻击</h3><ol><li><strong>概念</strong>：利用网络协议漏洞或其他系统以及应用软件的漏洞耗尽被攻击目标资源，使得被攻击目标无法正常提供服务，直至系统停止响应甚至崩溃的攻击方式。</li><li><strong>原理</strong>：攻击者向服务器发送众多的带有虚假地址的请求，服务器发送回复信息后无限等待进而无法释放资源，连接超时后攻击者再度发送虚假请求。</li><li><strong>DOS分类</strong>：SYN Flood（请求方不发送ACK），ping of death（ping请求数据包声称超过64K，接收方TCP/IP堆栈崩溃），teardrop…</li><li><strong>发现僵尸网络</strong>：IDS（提取僵尸程序指纹信息），行为监测（僵尸程序行为模式），蜜獾捕获（捕获僵尸程序样本）</li></ol><h3 id="十五、-恶意代码、病毒、蠕虫"><a href="#十五、-恶意代码、病毒、蠕虫" class="headerlink" title="十五、    恶意代码、病毒、蠕虫"></a>十五、    恶意代码、病毒、蠕虫</h3><ol><li><strong>计算机病毒</strong>：是一个指令序列，能够把自身拷贝插入到其他主程序中</li><li><strong>病毒模块</strong>：引导、传染、表现</li><li><strong>病毒按链接方式分类</strong>：<ul><li>操作系统病毒：用自己的运行逻辑取代系统的正常逻辑模块</li><li>外壳型：将病毒本身包围在宿主程序周围，对原来程序不作修改</li><li>入侵型：将病毒插入攻击目标之中，一旦感染难以发现清除</li><li>源码病毒：利用java, VBS等网络语言编写放在e-mail附件或HTML主页中。</li></ul></li><li><strong>按传染对象分类</strong>：磁盘引导型（磁盘引导区），文件型（可执行文件），宏病毒（office系列）</li><li><strong>检测病毒方法</strong>：<ul><li>特征代码法：采样，提取特征代码，特征代码纳入病毒特征数据库，打开被检测文件检索，若出现新病毒重复1-3步</li><li>校验和法：在文件被感染前根据文件内容计算校验和保存在其他文件中。优点：既可发现已知病毒又可发现未知病毒；缺点：只能判断文件是否被修改，而不能识别病毒种类和名称，且对隐蔽性病毒无效。</li><li>行为监测法：利用病毒的特有行为来监测病毒的方法。</li></ul></li><li><strong>蠕虫</strong>：一种可以通过网络连接进行自身复制的程序，与以往病毒方式不同，文件型病毒、宏病毒需要在计算机的硬盘、软盘或文件系统中繁殖，而典型的蠕虫只会在内存中维持一个活动副本，甚至根本不向硬盘写入任何信息。</li></ol><h3 id="十六、-防火墙"><a href="#十六、-防火墙" class="headerlink" title="十六、    防火墙"></a>十六、    防火墙</h3><ol><li><strong>概念</strong>：防火墙指应用于内部网络和外部网络之间的，用来保护内部网络免受非法访问和破坏的网络安全系统。</li><li><strong>主要功能</strong>：<ul><li>过滤进出网络的数据</li><li>防止不安全的协议和服务</li><li>管理进出网络的访问行为</li><li>记录通过防火墙的信息内容与活动</li><li>对网络攻击进行检测与告警</li><li>防止外部对内部网络信息的获取</li><li>提供与外部连接的集中管理</li></ul></li><li><strong>不能防范的攻击</strong>：内部威胁、病毒、应用程序漏洞、木马、社会工程、不当配置</li><li><strong>防火墙分类</strong>：按实现技术（包过滤型（静态，动态），代理型（应用代理，电路代理，NAT））；按体系结构（双宿/多宿主机，屏蔽主机（双重保护安全性更高），屏蔽子网，混合结构）。</li><li><strong>静态包过滤（传输层和网络层）</strong>：对包头内容进行简单过滤（源和目的IP，IP选项，IP上层协议，TCP和UDP源及目的端口，ICMP报文类型和代码）。</li><li><strong>防火墙规则制定策略</strong>：a.拒绝任何访问，除非被规则特别允许。b.允许任何访问，除非规则特别禁止</li><li><strong>过滤的两种基本方式</strong>：按服务过滤（如Telnet，SMTP，FTP等等）；按规则过滤。</li><li><strong>静态包过滤的优缺点</strong>：速度快，价格低，对用户透明；配置难把握，防范能力低，没有用户身份验证机制。</li><li><strong>动态包过滤（网络层）（状态检测防火墙）</strong>：不仅以一个数据包的内容作为过滤依据，还根据这个数据包在信息流位置加以判断</li><li><strong>动态包过滤优缺点</strong>：基于应用程序信息验证一个包状态的能力，记录通过的每个包的详细信息；造成网络连接的迟滞，系统资源要求较高。</li><li><strong>应用代理防火墙（应用层）</strong>：对所有规则内允许的应用程序作中转转发；牺牲了对应用程序的透明性。</li><li><strong>应用代理优缺点</strong>：可以隐藏内部网络信息，具有强大的日志审核，实现内容过滤；价格高，速度慢，失效时造成网络瘫痪。</li><li><strong>电路级代理（传输层）优缺点</strong>：隐藏内部网络信息，配置简单（无需为每个应用程序配置一个代理）；多数电路级网关都是基于TCP端口配置，不对数据包检测可能会有漏洞。</li><li><strong>NAT优缺点</strong>：管理方便并且节约IP地址资源，隐藏内部IP地址信息；外部应用程序不能方便地与NAT网关后的应用程序联系。-</li><li><strong>理解防火墙的四种体系结构</strong></li></ol><h3 id="十七、-入侵检测IDS"><a href="#十七、-入侵检测IDS" class="headerlink" title="十七、    入侵检测IDS"></a>十七、    入侵检测IDS</h3><ol><li><strong>由于防火墙无法发现和阻止</strong>:a.对合法服务的攻击。b.源自其他入口的攻击。c.来自内部网络的攻击。d.来自木马的威胁。入侵检测技术通过对计算机网络或计算机系统中若干关键点信息的收集和分析，从中发现网络或系统中是否有违反安全策略行为和被攻击迹象的一种安全技术。</li><li><img src="10.png" alt=""></li><li><strong>IDS任务</strong>：从系统正常运行产生的和攻击者进行攻击时产生的混合数据中找出入侵痕迹。</li><li><strong>通用入侵检测框架CIDF</strong>：体系结构；组件通信（事件产生器（数据获取）；事件分析器（数据分析）；事件数据库（数据管理）；响应单元（行为响应））；语言规范；编程接口。</li><li><strong>小结</strong>：入侵检测技术收集主机日志及网络流量等信息，通过模式匹配、统计分析或完整性分析，能够有效发现入侵行为。入侵检测形成了网络的纵深防御，成为防火墙技术的有益补充。网络技术的发展给入侵检测带来各种新的困难，同时也带来机遇。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Security&quot;&gt;&lt;a href=&quot;#Security&quot; class=&quot;headerlink&quot; title=&quot;Security&quot;&gt;&lt;/a&gt;Security&lt;/h2&gt;&lt;h3 id=&quot;一、-介绍&quot;&gt;&lt;a href=&quot;#一、-介绍&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="安全" scheme="http://thmasterplan.cn/categories/%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="安全" scheme="http://thmasterplan.cn/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Git笔记</title>
    <link href="http://thmasterplan.cn/git/Git%E7%AC%94%E8%AE%B0/"/>
    <id>http://thmasterplan.cn/git/Git%E7%AC%94%E8%AE%B0/</id>
    <published>2019-11-19T10:18:31.000Z</published>
    <updated>2019-11-23T13:23:14.088Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-设置"><a href="#一-设置" class="headerlink" title="一.设置"></a>一.设置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;Your Name&quot;</span><br><span class="line">git config --global user.email &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure><h3 id="二-创建版本库"><a href="#二-创建版本库" class="headerlink" title="二.创建版本库"></a>二.创建版本库</h3><ol><li>创建空目录</li><li>隐藏目录.git为版本库<br><code>git init</code></li><li>添加</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add xxx.txt</span><br><span class="line">git add xxxx.txt</span><br><span class="line">git add xxxxx.txt</span><br></pre></td></tr></table></figure><ol><li>提交<br><code>git commit -m &quot;说明文字&quot;</code></li></ol><h3 id="三-版本回退"><a href="#三-版本回退" class="headerlink" title="三.版本回退"></a>三.版本回退</h3><ol><li>查看版本日志<br><code>git log</code></li><li>回退</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard [HEAD^,HEAD^^，HEAD~100]回退到以前某个版本</span><br><span class="line">git reset --hard [回退之前的版本号] 撤销回退</span><br></pre></td></tr></table></figure><ol><li>查看命令历史，以便确定回到未来哪个版本<br><code>git reflog</code></li></ol><h3 id="四-版本库的工作区与暂存区、分支"><a href="#四-版本库的工作区与暂存区、分支" class="headerlink" title="四.版本库的工作区与暂存区、分支"></a>四.版本库的工作区与暂存区、分支</h3><p><code>git add</code>命令实际上就是把要提交的所有修改放到暂存区（Stage），然后，执行<code>git commit</code>就可以一次性把暂存区的所有修改提交到分支。</p><h3 id="五-每次修改，如果不用git-add到暂存区，那就不会commit。"><a href="#五-每次修改，如果不用git-add到暂存区，那就不会commit。" class="headerlink" title="五.每次修改，如果不用git add到暂存区，那就不会commit。"></a>五.每次修改，如果不用git add到暂存区，那就不会commit。</h3><h3 id="六-撤销修改"><a href="#六-撤销修改" class="headerlink" title="六.撤销修改"></a>六.撤销修改</h3><ol><li>直接丢弃工作区的修改，用命令<code>git checkout -- file</code>。[误删也是一种修改]</li><li>当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD &lt;file&gt;</code>，就回到了场景1，第二步按场景1操作。</li><li>已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。</li></ol><h3 id="七-删除文件"><a href="#七-删除文件" class="headerlink" title="七.删除文件"></a>七.删除文件</h3> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git rm file</span><br><span class="line">git commit</span><br></pre></td></tr></table></figure><h3 id="八-推送到github"><a href="#八-推送到github" class="headerlink" title="八.推送到github"></a>八.推送到github</h3><p>   <code>git push origin master</code></p><h3 id="九-克隆远程库到本地"><a href="#九-克隆远程库到本地" class="headerlink" title="九.克隆远程库到本地"></a>九.克隆远程库到本地</h3><p><code>git clone git@github.com:Laishiji/directoryName.git</code></p><h3 id="十-分支"><a href="#十-分支" class="headerlink" title="十.分支"></a>十.分支</h3><ol><li>查看分支：<code>git branch</code></li><li>创建分支：<code>git branch name</code></li><li>切换分支：<code>git checkout name</code></li><li>创建+切换分支：<code>git checkout -b name</code></li><li>合并某分支到当前分支：<code>git merge name</code></li><li>删除分支：<code>git branch -d name</code></li></ol><h3 id="十一-分支合并失败"><a href="#十一-分支合并失败" class="headerlink" title="十一.分支合并失败"></a>十一.分支合并失败</h3><p>当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。<br>解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。<br>用<code>git log --graph</code>命令可以看到分支合并图。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一-设置&quot;&gt;&lt;a href=&quot;#一-设置&quot; class=&quot;headerlink&quot; title=&quot;一.设置&quot;&gt;&lt;/a&gt;一.设置&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
    
      <category term="git" scheme="http://thmasterplan.cn/categories/git/"/>
    
    
      <category term="git" scheme="http://thmasterplan.cn/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Java高级</title>
    <link href="http://thmasterplan.cn/JAVA/Java%E9%AB%98%E7%BA%A7/"/>
    <id>http://thmasterplan.cn/JAVA/Java%E9%AB%98%E7%BA%A7/</id>
    <published>2019-11-19T09:33:47.000Z</published>
    <updated>2019-11-24T12:45:48.540Z</updated>
    
    <content type="html"><![CDATA[<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><p><img src="clip_image001.png" alt="img"></p><p><img src="clip_image002.png" alt="img"></p><p><img src="clip_image004.jpg" alt="img"></p><p><strong>String常用方法：</strong></p><p>1)   比较</p><p><img src="clip_image005.png" alt="img"></p><p>2)   获取</p><p><img src="clip_image007.jpg" alt="img"></p><p>3)   截取子串</p><p><img src="clip_image009.jpg" alt="img"></p><p>4)   转换</p><p><img src="clip_image011.jpg" alt="img"></p><p>5)   分割</p><p><img src="clip_image012.png" alt="img"></p><p>补充：boolean <a href="http://tool.oschina.net/uploads/apidocs/jdk_7u4/java/lang/String.html#endsWith(java.lang.String" target="_blank" rel="noopener">endsWith</a>)(<a href="http://tool.oschina.net/uploads/apidocs/jdk_7u4/java/lang/String.html" target="_blank" rel="noopener">String</a> suffix);判断字符串是否是以suffix为后缀。</p><h1 id="Static关键字"><a href="#Static关键字" class="headerlink" title="Static关键字"></a>Static关键字</h1><p><img src="clip_image013.png" alt="img"></p><p><img src="clip_image014.png" alt="img"></p><p>1)   内存图：</p><p><img src="clip_image015.png" alt="img"></p><p><img src="clip_image016.png" alt="img"></p><p>2)   静态代码块：</p><p><img src="clip_image017.png" alt="img"></p><h1 id="Arrays常用方法"><a href="#Arrays常用方法" class="headerlink" title="Arrays常用方法"></a>Arrays常用方法</h1><p><img src="clip_image018.png" alt="img"></p><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><p><img src="clip_image019.png" alt="img"></p><p><img src="clip_image021.jpg" alt="img"></p><p><img src="clip_image022.png" alt="img"></p><h1 id="抽象类与接口"><a href="#抽象类与接口" class="headerlink" title="抽象类与接口"></a>抽象类与接口</h1><p><img src="clip_image023.png" alt="img"></p><p><img src="clip_image024.png" alt="img"></p><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><p><img src="clip_image025.png" alt="img"></p><p>向上转型，即父类引用指向子类对象，则引用无法调用原本<strong>子类特有的方法</strong>，例如Animal a = new Cat();</p><p>向下转型，也即<strong>还原</strong>a的类型为cat，使其可以访问cat特有的方法，例如Cat cat = (Cat) a;[类似于强制类型转换]。</p><h1 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h1><p>1)   修饰类：当前类不能有任何子类。</p><p>2)   修饰方法：该方法不能被子类覆盖重写。（显然对于类、方法来说，abstract和final无法同时使用）</p><p>3)   修饰局部变量：该变量（引用类型不能再指向其他变量）不能再改变。</p><p>4)   修饰成员变量：该变量必须直接赋值或者在构造方法中赋值。</p><h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h1><p>1)   成员内部类</p><p><img src="clip_image026.png" alt="img"></p><p>在内部类中访问重名的外部类成员变量：</p><p><img src="clip_image027.png" alt="img"></p><p>2)   局部内部类</p><p><img src="clip_image028.png" alt="img"></p><p><img src="clip_image029.png" alt="img"></p><p><img src="clip_image030.png" alt="img"></p><p>3)   局部内部类中的匿名内部类：</p><p><img src="clip_image031.png" alt="img"></p><p><img src="clip_image032.png" alt="img"></p><h1 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h1><p><img src="clip_image033.png" alt="img"></p><p>自动装箱与自动拆箱。</p><p>基本类型与字符串的转换：</p><p><img src="clip_image034.png" alt="img"></p><h1 id="集合框架"><a href="#集合框架" class="headerlink" title="集合框架"></a>集合框架</h1><p>+<img src="clip_image036.jpg" alt="img"></p><p><strong>1)</strong>   <strong>Collection</strong></p><p><img src="clip_image037.png" alt="img"></p><p><strong>2)</strong>   <strong>Iterator接口</strong></p><p><img src="clip_image038.png" alt="img"></p><p><img src="clip_image039.png" alt="img"></p><p><strong>3)</strong>   <strong>泛型</strong></p><p><img src="clip_image040.png" alt="img"></p><p><img src="clip_image041.png" alt="img"></p><p><img src="clip_image042.png" alt="img"></p><p><strong>4)</strong>   <strong>List</strong></p><p><img src="clip_image043.png" alt="img"></p><p><strong>List的子类：</strong></p><p><strong>A.</strong>   <strong>ArrayList:此实现不是同步的，底层是一个数组，增删慢，查询快。</strong></p><p><strong>B.</strong>   <strong>LinkedList:此实现不是同步的，底层是双向链表，增删快，查询慢。</strong></p><p><img src="clip_image044.png" alt="img"></p><p><strong>C.</strong>   <strong>Vector:底层是数组，同步，了解即可</strong></p><p><strong>5)</strong>   <strong>Set:set在调用add方法时，会调用元素的hashCode方法和equals方法判断元素是否重复，在存储自定义类型元素时，前提是需要重写对象中的hashCode和equals方法。</strong></p><p><img src="clip_image045.png" alt="img"></p><p><strong>A.</strong>   <strong>HashSet:不同步，底层是哈希表（查询速度快），无序。</strong></p><p><strong>哈希值：十进制整数，逻辑地址值，由哈希函数计算而得。</strong></p><p><strong>哈希表：jdk1.8之后，哈希表由数组+链表/红黑树构成。</strong></p><p><img src="clip_image046.png" alt="img"></p><p><strong>B.</strong>   <strong>LinkedHashSet:相较于HashSet多了一条链表记录元素的存储顺序，保证元素有序。</strong></p><p><strong>6)</strong>   <strong>可变参数：</strong></p><p><img src="clip_image047.png" alt="img"></p><p><img src="clip_image048.png" alt="img"></p><p><strong>7)</strong>   <strong>Collections集合工具类：</strong></p><p><img src="clip_image049.png" alt="img"></p><p><img src="clip_image050.png" alt="img"></p><p><strong>Comparator:</strong></p><p><img src="clip_image051.png" alt="img"></p><p><strong>Comparable:</strong></p><p><strong>要比较的类需要实现Comparable接口，同时覆盖compareTo方法：</strong></p><p><img src="clip_image052.png" alt="img"></p><p><strong>8)</strong>   <strong>Map</strong></p><p><strong>A.</strong>   <strong>概述</strong></p><p><img src="clip_image053.png" alt="img"></p><p><strong>B.</strong>   <strong>Map接口常用方法：</strong></p><p><img src="clip_image054.png" alt="img"></p><p><img src="clip_image055.png" alt="img"></p><p><img src="clip_image056.png" alt="img"></p><p><img src="clip_image057.png" alt="img"></p><p><strong>C.</strong>   <strong>Map遍历方法：</strong></p><p><strong>a)</strong>   <strong>键找值：</strong></p><p><img src="clip_image058.png" alt="img"></p><p><strong>b)</strong>   <strong>Entry键值对对象：Map.Entry，在Map接口中有一个内部接口Entry,Map集合一创建就会创建一个Entry对象，记录键值对对象。</strong></p><p><img src="clip_image059.png" alt="img"></p><p><strong>D.</strong>   <strong>HashMap存储自定义类型键值为防止键重复，必须重写自定义类型的hashCode和equals方法。</strong></p><p><strong>9)</strong>   <strong>HashTable:</strong></p><p><img src="clip_image060.png" alt="img"></p><h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><p><img src="clip_image061.png" alt="img"></p><p><img src="clip_image062.png" alt="img"></p><p><img src="clip_image063.png" alt="img"></p><p>自定义异常：</p><p><img src="clip_image065.jpg" alt="img"></p><p><img src="clip_image067.jpg" alt="img"></p><h1 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h1><p><strong>1.</strong>   <strong>线程状态图：</strong></p><p>​                         </p><p>​                                <img src="clip_image068.jpg" alt="img"></p><p>等待-唤醒案例：</p><p><img src="clip_image069.png" alt="img"></p><p>notifyAll唤醒所有waiting状态的线程，唤醒之后的线程要与其他线程竞争锁，获取锁之后才能继续执行wait()方法之后的代码。</p><p><strong>2.</strong>   <strong>创建线程第一种方法：</strong></p><p><img src="clip_image070.png" alt="img"></p><p>每个线程都有自己的栈空间。</p><p><strong>3.</strong>   <strong>Thread**</strong>类构造方法和常用方法：**</p><p><img src="clip_image071.png" alt="img"></p><p><strong>4.</strong>   <strong>创建线程第二种方法：实现Runnable接口</strong></p><p><img src="clip_image072.png" alt="img"></p><p><strong>5.</strong>   <strong>两种创建方式的区别</strong></p><p><img src="clip_image073.png" alt="img"></p><p><img src="clip_image074.png" alt="img"></p><p><strong>6.</strong>   <strong>匿名内部类两种方式创建线程：</strong></p><p><img src="clip_image075.png" alt="img"></p><p><img src="clip_image076.png" alt="img"></p><p><strong>7.</strong>   <strong>线程安全与线程同步：</strong></p><p><strong>1)</strong>   <strong>同步代码块</strong></p><p><img src="clip_image077.png" alt="img"></p><p><strong>（可以直接用synchronized(this){</strong></p><p>​      <strong>///////////**</strong>代码块**</p><p><strong>}**</strong>）this代表Runnable的实现类对象，唯一。**</p><p>同步中的线程，没有执行完代码块中的内容不会释放锁，其余线程没有锁就算获取cpu执行权也会阻塞；同步保证了只能有一个线程在同步中执行共享数据，保证了安全；但是程序频繁地判断锁，获取锁，释放锁，程序效率会降低。</p><p><strong>2)</strong>   <strong>同步方法</strong></p><p><img src="clip_image078.png" alt="img"></p><p><img src="clip_image079.png" alt="img"></p><p><strong>静态同步方法：</strong></p><p><img src="clip_image080.png" alt="img"></p><p><strong>3)</strong>   <strong>加lock锁</strong></p><p><img src="clip_image081.png" alt="img"></p><p><strong>8.</strong>   <strong>线程池：一个容纳多个线程的容器（例如LinkedList），其中的线程可以反复使用，无需反复创建线程而消耗过多资源。</strong></p><p><img src="clip_image082.png" alt="img"></p><p><img src="clip_image083.png" alt="img"></p><p><strong>9.</strong>   <strong>Lambda**</strong>表达式：省略了实现接口，重写方法等。**</p><p><strong>例：</strong><img src="clip_image084.png" alt="img"></p><p><img src="clip_image085.png" alt="img"></p><h1 id="File"><a href="#File" class="headerlink" title="File"></a>File</h1><p><strong>1.</strong>   <strong>File类的静态成员变量：</strong></p><p><img src="clip_image086.png" alt="img"></p><p><strong>2.</strong>   <strong>File类构造方法</strong></p><p>1)   File（String pathname){}；</p><p>2)   File(String Parent, String child){}：这个构造意思是根据一个目录和子目录得到File对象。如果我们想对某一个文件路径下的多个文件进行操作，这个时候采用这个构造函数就显示优势。</p><p>3)   File(File parent, String child){}：这个函数的好处就是可以对parent进行File相关的操作，例如打印父路径下有多少个文件等。</p><p><strong>3.</strong>   <strong>获取类方法：</strong></p><p><img src="clip_image087.png" alt="img"></p><p><strong>4.</strong>   <strong>判断类方法：</strong></p><p><img src="clip_image088.png" alt="img"></p><p><strong>5.</strong>   <strong>创建删除类方法：</strong></p><p><img src="clip_image089.png" alt="img"></p><p><strong>6.</strong>   <strong>目录遍历</strong></p><p><img src="clip_image090.png" alt="img"></p><p><img src="clip_image091.png" alt="img"></p><p><strong>7.</strong>   <strong>文件过滤器：FileFilter接口</strong></p><p><strong>listFiles(传递过滤器实现类对象，可直接用lambda表达式简化)。例如：</strong></p><p><img src="clip_image092.png" alt="img"></p><p><img src="clip_image094.jpg" alt="img"></p><h1 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h1><p><img src="clip_image096.png" alt="img"></p><p><img src="clip_image097.png" alt="img"></p><p><strong>1.</strong>   <strong>OutputStream:</strong></p><p><strong>1)</strong>   <strong>FileOutputStream</strong></p><p><img src="clip_image098.png" alt="img"></p><p><strong>2)</strong>   <strong>一次写一个字节</strong></p><p><img src="clip_image099.png" alt="img"></p><p><img src="clip_image100.png" alt="img"></p><p><strong>3)</strong>   <strong>一次写多个字节</strong></p><p><img src="clip_image101.png" alt="img"></p><p><img src="clip_image102.png" alt="img"></p><p><strong>4)</strong>   <strong>续写与换行</strong></p><p><img src="clip_image103.png" alt="img"></p><p><strong>2.</strong>   <strong>InputStream&amp;FileInputStream</strong></p><p><img src="clip_image104.png" alt="img"></p><p><img src="clip_image105.png" alt="img"></p><p><strong>1)</strong>   <strong>一次读一个字节，read()方法返回一个ASCII码值。</strong></p><p><strong>2)</strong>   <strong>一次读多个字节：</strong></p><p><img src="clip_image107.jpg" alt="img"></p><p><strong>若未读取到字节，则同样返回-1.</strong></p><p><strong>3.</strong>   <strong>练习：文件复制操作：</strong></p><p><img src="clip_image108.png" alt="img"></p><p><img src="clip_image109.png" alt="img"></p><p><strong>4.</strong>   <strong>使用字节流读取中文时，会出现乱码的问题；一个中文字符：GBK占2个字节，UTF-8占3个字节。因此需要使用字符流。</strong></p><p><strong>5.</strong>   <strong>Reader&amp;FileReader</strong></p><p><img src="clip_image110.png" alt="img"></p><p><img src="clip_image111.png" alt="img"></p><p><strong>6.</strong>   <strong>writer&amp;FileWriter</strong></p><p><img src="clip_image112.png" alt="img"></p><p><img src="clip_image113.png" alt="img"></p><p><strong>7.</strong>   <strong>IO中的异常处理</strong></p><p><strong>1)</strong>   <strong>常规</strong></p><p><img src="clip_image115.jpg" alt="img"></p><p><strong>2)</strong>   <strong>JDK7新特性</strong></p><p><img src="clip_image116.png" alt="img"></p><p><strong>8.</strong>   <strong>属性集</strong></p><p><img src="clip_image117.png" alt="img"></p><p><strong>1)</strong>   <strong>setProperty/getProperty/stringPropertyNames</strong></p><p><img src="clip_image119.jpg" alt="img"></p><p><strong>2)</strong>   <strong>store</strong></p><p><img src="clip_image120.png" alt="img"></p><p><strong>3)</strong>   <strong>load</strong></p><p><img src="clip_image121.png" alt="img"></p><p><strong>9.</strong>   <strong>缓冲流</strong></p><p><strong>1)</strong>   <strong>BufferedOutputStream</strong></p><p><img src="clip_image122.png" alt="img"></p><p><img src="clip_image123.png" alt="img"></p><p><strong>2)</strong>   <strong>BufferedInputStream</strong></p><p><img src="clip_image124.png" alt="img"></p><p><img src="clip_image125.png" alt="img"></p><p><strong>3)</strong>   <strong>BufferedWriter</strong></p><p><img src="clip_image126.png" alt="img"></p><p><img src="clip_image127.png" alt="img"></p><p><img src="clip_image128.png" alt="img"></p><p><strong>4)</strong>   <strong>BufferedReader</strong></p><p><img src="clip_image129.png" alt="img"></p><p><img src="clip_image130.png" alt="img"></p><p><img src="clip_image131.png" alt="img"></p><p><strong>10.</strong>  <strong>转换流</strong></p><p><strong>1)</strong>   <strong>字符编码和字符集：</strong></p><p><strong>A.</strong>   <strong>字符编码：一套自然语言的字符与二进制数之间的对应规则。</strong></p><p><strong>B.</strong>   <strong>字符集：即编码表，生活中文字与二进制对应规则</strong></p><p><strong>C.</strong>   <strong>常用字符集：</strong></p><p><strong>a)</strong>   <strong>ASCII：美国</strong></p><p><strong>b)</strong>   <strong>ISO：欧洲</strong></p><p><strong>c)</strong>   <strong>GBxxx:GB2312,GBK,GB18030国标。GBK两个字节表示一个汉字。</strong></p><p><strong>d)</strong>   <strong>Unicode：万国码。UTF-8/UTF-16/UTF-32。UTF-8三个字节表示一个汉字。</strong></p><p><strong>2)</strong>   <strong>编码引出的问题：</strong></p><p><strong>FileReader可以读取IDE默认编码格式UTF-8的文件，但是读取系统默认编码为GBK时会产生乱码。</strong></p><p><strong>FileReader底层调用的是FileInputStream方法读取字节流，再通过字符集转换为字符，其父类为InputStreamReader.</strong></p><p><strong>FileWriter同理。</strong></p><p><strong>3)</strong>   <strong>OutputStreamWriter</strong></p><p><img src="clip_image132.png" alt="img"></p><p><img src="clip_image133.png" alt="img"></p><p><strong>4)</strong>   <strong>InputStreamReader</strong></p><p><img src="clip_image134.png" alt="img"></p><p><strong>11.</strong>  <strong>序列化流</strong></p><p><img src="clip_image135.png" alt="img"></p><p><strong>1)</strong>   <strong>ObjectOutputStream</strong></p><p><img src="clip_image136.png" alt="img"></p><p><strong>只需要序列化的类implements Serializable接口即可，并不需要实现任何方法。</strong></p><p><img src="clip_image137.png" alt="img"></p><p><img src="clip_image138.png" alt="img"></p><p><strong>2)</strong>   <strong>ObjectInputStream</strong></p><p><strong>与序列化相似。</strong></p><p><strong>3)</strong>   <strong>静态变量不能被序列化或反序列化。</strong></p><p><strong>4)</strong>   <strong>使用transient关键字修饰变量避免序列化。</strong></p><p><strong>A.</strong>   <strong>一旦变量被transient修饰，变量将不再是对象持久化的一部分，该变量内容在序列化后无法获得访问。</strong></p><p><strong>B.</strong>   <strong>transient关键字只能修饰变量，而不能修饰方法和类。注意，本地变量是不能被transient关键字修饰的。变量如果是用户自定义类变量，则该类需要实现Serializable接口。</strong></p><p><strong>C.</strong>   <strong>被transient关键字修饰的变量不再能被序列化，一个静态变量不管是否被transient修饰，均不能被序列化。</strong></p><p><strong>5)</strong>   <strong>InvalidClassException:</strong></p><p><img src="clip_image139.png" alt="img"></p><p><strong>序列化一个类后，又修改类的内容后，序列号会改变，反序列化时会出现InvalidClassException。</strong></p><p><strong>12.</strong>  <strong>PrintStream打印流</strong></p><h1 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h1><p><strong>1.</strong>   <strong>客户端：</strong></p><p><img src="clip_image140.png" alt="img"></p><p><img src="clip_image141.png" alt="img"></p><p><img src="clip_image142.png" alt="img"></p><p>注意：在客户端发送完毕之后，要调用socket的shutdownOutput()方法，以免服务端的inputStream.read()方法阻塞。</p><p><strong>2.</strong>   <strong>服务器端</strong></p><p><img src="clip_image143.png" alt="img"></p><p><img src="clip_image144.png" alt="img"></p><h1 id="JDK8新特性：函数式接口"><a href="#JDK8新特性：函数式接口" class="headerlink" title="JDK8新特性：函数式接口"></a>JDK8新特性：函数式接口</h1><p><strong>1.</strong>   <strong>概念：函数式接口在Java中是指：有且仅有一个抽象方法的接口；</strong></p><p><strong>@FunctionalInterface注解：可以检测接口是否为一个函数式接口。</strong></p><p><strong>注意：使用匿名内部类编译时会有匿名内部类class文件，而lambda表达式不会有，效率更高。</strong></p><p><strong>2.</strong>   <strong>函数式编程：</strong></p><p><strong>Lambda表达式延迟加载：作为参数（即接口的实现）时会判断其他参数是否满足条件，如若不满足调用者的条件则不会执行lambda表达式方法体，提高性能。</strong></p><p><strong>3.</strong>   <strong>Java.util.function：</strong></p><p><strong>1)</strong>   <strong>Supplier</strong></p><p><img src="clip_image145.png" alt="img"></p><p><strong>2)</strong>   <strong>Consumer</strong></p><p><img src="clip_image146.png" alt="img"></p><p><img src="clip_image147.png" alt="img"></p><p><img src="clip_image148.png" alt="img"></p><p><strong>3)</strong>   <strong>Predicate</strong></p><p><strong>4)</strong>   <strong>Function</strong></p><p><strong>5)</strong>   <strong>Stream流</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;字符串&quot;&gt;&lt;a href=&quot;#字符串&quot; class=&quot;headerlink&quot; title=&quot;字符串&quot;&gt;&lt;/a&gt;字符串&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;clip_image001.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;clip_imag
      
    
    </summary>
    
    
      <category term="JAVA" scheme="http://thmasterplan.cn/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://thmasterplan.cn/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>文件权限与用户组管理</title>
    <link href="http://thmasterplan.cn/Linux/%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E4%B8%8E%E7%94%A8%E6%88%B7%E7%BB%84%E7%AE%A1%E7%90%86/"/>
    <id>http://thmasterplan.cn/Linux/%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E4%B8%8E%E7%94%A8%E6%88%B7%E7%BB%84%E7%AE%A1%E7%90%86/</id>
    <published>2019-11-17T16:16:20.000Z</published>
    <updated>2019-11-23T13:25:22.564Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Linux的文件权限与用户组管理"><a href="#Linux的文件权限与用户组管理" class="headerlink" title="Linux的文件权限与用户组管理"></a>Linux的文件权限与用户组管理</h3><ul><li><p>文件权限：<code>-rw-r--r-- 1 root root 4.0K 07-19 01:02 abc.log</code>:</p><ul><li>第1位：<ul><li>-：表示普通文件；</li><li>d：目录</li><li>b：设备文件（块文件，即可以用来存储的设备文件）</li><li>c：设备文件（字符文件，不能用来存储的设备文件）</li><li>l：软链接（快捷方式）</li></ul></li><li>p：管道文件pipe<ul><li>s：套接字文件socket</li></ul></li><li>后9位：r可读，w可写，x可执行。<ul><li>2-4位：用户的权限范围</li><li>5-7位：组的权限范围</li><li>8-10位：其余人的权限范围</li></ul></li><li>1表示该文件的硬链接数</li><li>第一个root表示该文件的所有者</li><li>第二个root表示该文件所属的组</li><li>4.0K表示该文件的大小</li><li>后面为最后一次修改的时间戳和文件名</li></ul></li><li><p>r/w/x权限对于目录的意义：</p><ul><li>r权限：可读取目录结构列表，即可查看目录下的文件名和子目录名。[注：不能查看文件内容]</li><li>w权限：可创建文件和目录，可删除，可重命名，可转移</li><li>x权限：可进入该目录。</li></ul></li><li><p>更改权限：<code>chmod</code></p><ul><li><code>chmod u+x,g+w,o-r abc.log</code>：abc.log权限由<code>-rw-r--r--</code>变为：<code>-rwxrw----</code></li><li><code>chmod a=r file</code>或者<code>chmod +r file</code>:表示对file的u,g,o同时都赋予可读权限</li><li>另一种更简单的权限赋予方式，令r = 4, w = 2, x = 1,则u,g,o的权限分别可用一个整数表示，例如<code>chmod 741 file</code>表示file的u,g,o权限为<code>-rwxr----x</code></li><li>参数-R：R及recursive（递归）；<code>chmod -R 741 directory</code>，表示改变目录及目录下所有文件的权限为741。</li></ul></li><li><p>更改文件的所有者：<code>chown</code></p><ul><li><code>chown user file</code>:将file的所有者改为user</li><li><code>chown user.group file</code>:将file的所有者改为user,同时更改其组为group</li><li><code>chown -R user directory</code>：若要更改目录的权限，则需要加-R才能将其里面所有内容的权限更改</li></ul></li><li><p>更改文件的所有组：<code>chgrp</code></p><ul><li><code>chgrp root file</code>: 将file的所有组改为root</li></ul></li><li><p>Linux组的类别：</p><ul><li>用户的主要组：用户必须属于一个且只有一个主组，组名同用户名，且仅包含用户自己。</li><li>用户的附加组：一个用户可属于0或多个附加组。</li><li><code>id 用户名</code>：查看用户的uid、gid（主组）、groups的id。管理员root的uid和gid为0。</li></ul></li><li><p>用户和组的配置文件：</p><ul><li><code>/etc/passwd</code>：用户及其属性信息(名称、UID、主组ID)。</li><li><code>/etc/group</code>：组及其属性信息。</li><li><code>/etc/shadow</code>：用户密码及其相关属性。</li><li><code>/etc/gshadow</code>：组密码及其相关信息。</li></ul></li><li><p>用户、组的增删改：</p><ul><li><code>useradd</code>，<code>userdel</code>，<code>usermod</code></li><li><code>groupadd</code>，<code>groupdel</code>，<code>groupmod</code></li><li><code>/etc/default/useradd</code>：创建用户时的默认设置</li></ul></li><li><p>文件与目录的默认权限与隐藏权限</p><ul><li><p>文件预设权限:在没有umask的情况下，目录默认权限为777，文件默认权限为666；<code>umask 022</code>，表示创建文件和目录，g和o都过滤掉写(2)权限。</p></li><li><p><code>lsattr -a</code>:显示所有隐藏属性</p></li><li><p><code>chattr [-RV][-v][+/-/=&lt;属性&gt;] [文件或目录]</code>:</p><ul><li>-R：递归处理，将指定目录下的所有文件及子目录一并处理</li><li>-v：&lt;版本编号&gt; 设置文件或目录版本</li><li>-V： 显示指令执行过程</li><li>+&lt;属性&gt;： 开启文件或目录的该项属性</li><li>-&lt;属性&gt; ：关闭文件或目录的该项属</li><li>=&lt;属性&gt;： 指定文件或目录的该项属性</li><li><p>属性：</p><ul><li><strong>a：让文件或目录只能加数据</strong>。</li><li><strong>i：不得任意更动文件或目录</strong>。</li><li>b：不更新文件或目录的最后存取时间。</li><li>c：将文件或目录压缩后存放。</li><li>d：将文件或目录排除在倾倒操作之外。</li><li>s：保密性删除文件或目录。</li><li>S：即时更新文件或目录。</li><li>u：预防意外删除。</li></ul></li><li><p>例如<code>chattr +a /var/log/messages</code>:让某个文件只能往里面追加数据，但不能删除，适用于各种日志文件</p></li></ul></li></ul></li><li><p>文件特殊权限</p><ul><li><p><strong>SUID</strong>（最常用）：<code>chmod u+s file</code>：使file文件x权限上显示为s，非用户(u)执行者可以获得u的所有权限</p><ul><li>SUID权限仅对二进制程序有效，不能用在脚本和目录上</li><li>执行者对于该程序有x的可执行权限</li><li>SUID权限仅在执行程序的过程中有效</li><li>让本没有相应权限的用户运行该程序时，可以获得其原本没有权限访问的资源</li></ul></li><li><p>SGID：非组(g)成员获得该组的权限</p><ul><li>非组成员对于该程序需要具备x的权限</li><li>SGID<strong>主要用于目录, 在该目录下创建的任何文件及子目录属于该目录所拥有的组</strong> 。</li></ul></li><li>SBIT: 目前只针对目录有效，切只能分配给其他人（o）;对于目录的作用是：当用户在该目录下建立文件或目录时，仅有<strong>自己与 root</strong>才有权力<strong>删除</strong>，例如/tmp。</li><li><strong>SUID/SGID/SBIT权限设置</strong> ：<ul><li><strong>文字法</strong> ：SUID: <strong>u+s</strong> ，SGID: <strong>g+s</strong>，SBIT: <strong>o+t</strong></li><li><em>数字法<strong>：将原来的三位数扩展为四位数即可，SUID为4，SGID为2，SBIT为1，把它们放在权限数字的最开头。例如设置SUID，可以写成</strong>4777<strong>，设置SGID可以写成，</strong>2777*</em> 。</li></ul></li></ul></li><li><p>ACL(Access Control List)实现灵活权限控制：</p><ul><li><p><code>setfacl -m u/g:用户名/组名:权限 file</code>。例如<code>setfacl -m u:Tom:rw abc.txt</code>，即Tom对abc.txt具有r和w权限，若不给权限则权限写<code>0</code>。</p></li><li><p><code>setfacl -x u/g:用户名/组名 file</code>：删除权限。</p></li><li><p><code>setfacl -R -b dir/</code>：删除dir下所有的ACL权限。</p></li><li><p><code>getfacl file</code>：显示file的ACL权限。</p></li><li><p>权限优先级：所有者&gt;ACL权限(用户&gt;组&gt;other)</p></li></ul></li></ul><ul><li><p>权限与指令间的关系(在用户模式下)</p><ul><li><p>用户能进入某目录：需要权限x</p><ul><li>进入目录后能利用ls查阅:需要权限r</li><li>进入目录后能够创建文件和目录:需要权限w</li></ul></li><li><p>用户在目录内打开读取文件：</p><ul><li>目录需要权限x</li><li>文件需要权限r</li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Linux的文件权限与用户组管理&quot;&gt;&lt;a href=&quot;#Linux的文件权限与用户组管理&quot; class=&quot;headerlink&quot; title=&quot;Linux的文件权限与用户组管理&quot;&gt;&lt;/a&gt;Linux的文件权限与用户组管理&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;文件权限：
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://thmasterplan.cn/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://thmasterplan.cn/tags/Linux/"/>
    
  </entry>
  
</feed>
