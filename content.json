{"meta":{"title":"TheMasterplan","subtitle":"TheMasterplan","description":"","author":"LSJ","url":"http://thmasterplan.cn","root":"/"},"pages":[{"title":"关于","date":"2019-11-18T07:09:59.687Z","updated":"2019-11-18T07:09:59.687Z","comments":false,"path":"about/index.html","permalink":"http://thmasterplan.cn/about/index.html","excerpt":"","text":"邮箱laishiji86@gmail.com githubhttps://github.com/Laishji 联系方式QQ：991327409"},{"title":"分类","date":"2019-11-18T06:42:54.196Z","updated":"2019-11-18T06:42:54.196Z","comments":false,"path":"categories/index.html","permalink":"http://thmasterplan.cn/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-11-19T10:40:54.593Z","updated":"2019-11-18T06:43:04.379Z","comments":false,"path":"tags/index.html","permalink":"http://thmasterplan.cn/tags/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2019-11-18T05:58:22.890Z","updated":"2019-11-18T05:58:22.890Z","comments":false,"path":"repository/index.html","permalink":"http://thmasterplan.cn/repository/index.html","excerpt":"","text":""}],"posts":[{"title":"正则表达式","slug":"正则表达式","date":"2019-11-20T07:16:10.000Z","updated":"2019-11-20T09:04:26.161Z","comments":true,"path":"2019/11/20/正则表达式/","link":"","permalink":"http://thmasterplan.cn/2019/11/20/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/","excerpt":"","text":"元字符分类：字符匹配、匹配次数、位置锚定、分组字符匹配 .：匹配任意单个字符 \\：转义字符，例如\\.表示匹配.本身而非任意单个字符。 []：匹配指定范围内任意单个字符 [^]：匹配指定范围外的任意单个字符 [:alnum:]：字母和数字 [:alpha:]：任何英文大小写字符 [:lower:]：小写字母 [:upper:]：大写字母 [:digit:]：十进制数字 [:xdigit:]：十六进制数字 [:blank:]：空白字符（空格和制表符） [:space:]：水平和垂直的空白字符 [:cntrl:]：不可打印的控制字符（退格、删除等） [:graph:]：可打印的非空白字符 [:print:]：可打印字符 [:punct:]：标点符号 匹配次数：用在用指定次数的字符后面，指定前面的字符出现的次数 *：匹配前面的字符0或多次。注意与文件名通配符里*的区别。 .*：任意长度的任意字符。 \\?：匹配前面的字符0或1次。 \\+：匹配前面的字符至少1次。 \\{n\\}：匹配前面的字符n次。 \\{m,n\\}：匹配前面的字符至少m次，至多n次。 \\{,n\\}：匹配前面的字符至多n次。 \\{n,\\}：匹配前面的字符至少n次。 位置锚定：定位出现的位置 ^：行首锚定，用于模式的最左侧。例如grep ^[^#] xxx表示显示xxx中所有非#开头的行，即显示非注释行。 $：行尾锚定，用于模式的最右侧。 ^PATTERN$：用于模式匹配整行。^$可表示空行。 \\b：词首或词尾锚定，用于单词模式的左/右侧。 分组：\\(\\) \\(string\\)：其中string会被正则表达式引擎记录与内部的变量中，这些变量的命名方式为：\\1,\\2,\\3,...。 示例：\\(string1\\(string2\\)\\)：\\1：string1\\(string2\\)；\\2：string2。 例如：\\(root\\)\\{1,3\\}：可匹配1-3个root字符串。","categories":[{"name":"regex","slug":"regex","permalink":"http://thmasterplan.cn/categories/regex/"}],"tags":[{"name":"regex","slug":"regex","permalink":"http://thmasterplan.cn/tags/regex/"}]},{"title":"常见文本处理命令","slug":"常见文本处理命令","date":"2019-11-19T11:49:20.000Z","updated":"2019-11-20T07:14:59.296Z","comments":true,"path":"2019/11/19/常见文本处理命令/","link":"","permalink":"http://thmasterplan.cn/2019/11/19/%E5%B8%B8%E8%A7%81%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E5%91%BD%E4%BB%A4/","excerpt":"","text":"查看文本内容： cat：适合查看小文本 -E：显示行结束符$ -n：对显示的每一行编号 -A：显示所有控制符 tac：反向显示 more、less：分页查看 文本截取： head -c#：获取前#字节 -#：获取前#行 tail -c#：获取后#字节 -#：获取后#行 -f：可用于日志监控，例如tail -f /var/log/messages，即时显示日志追加文本的变化。 按列抽取： cut：cut -d# -f1,3：以#作为分隔符，截取第1列和第3列 -d：指明分隔符 -f：指明字段 练习：获取网卡ip地址：ifconfig ens33 | head -2 | tail -1 | tr -s &quot; &quot; | cut -d&quot; &quot; -f3 排序和统计： 文本排序sort：把排序后的文本显示在STDOUT，不改变原始文件 -n：按照数字大小排序 -r：反向排序 -u：删除重复行 -t#：#作为字段界定符 -kX：选项按照使用#分隔的第X列来排序 uniq：删除连续重复的行 -c：显示重复出现的行的次数，常与sort命令一起使用；sort a.txt| uniq -c。 文本数据统计wc： wc test.txt：依次输出行数，单词数，字节数 -l：只计数行数 -w：只计数单词数 -c：只计数字节数 -m：只计数字符总数 -L：显示文件中最长行的长度 比较文件：diff和patch 按关键字抽取： grep：grep [选项] 模式 file文本搜索工具，根据指定模式[由正则表达式字符及文本字符所编写的过滤条件]对目标文本逐行进行匹配检查，打印匹配到的行。","categories":[{"name":"Linux","slug":"Linux","permalink":"http://thmasterplan.cn/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://thmasterplan.cn/tags/Linux/"}]},{"title":"java位运算","slug":"java位运算","date":"2019-11-19T10:25:55.000Z","updated":"2019-11-19T10:52:44.589Z","comments":true,"path":"2019/11/19/java位运算/","link":"","permalink":"http://thmasterplan.cn/2019/11/19/java%E4%BD%8D%E8%BF%90%E7%AE%97/","excerpt":"","text":"JAVA位运算符 &amp; ：按位与。同时为1才为1，否则为0。 | ：按位或。有一个为1则为1。 ~ ：按位取反。例如3：补码：0b00000000000000000000000000000011。~3–&gt;得:0b11111111111111111111111111111100。(依旧为补码)。减一后取反得原码(原码-&gt;补码的逆运算)：0b1000000000000000000000000000100。故3取反后为-4。 ^ ：按位异或。不同为1，相同为0。 一个数据对相同的数据异或两次，值不变,常应用于加密。即a^b^b == a。 使用异或实现两个变量值交换。a = a^b; b = a^b; a = a^b。 &lt;&lt; ：左移。左操作数乘以2的n次幂。n是右操作数，即左移的位数。右边空出两位补0，左边两位被挤掉。 &gt;&gt; ：右移。左操作数除以2的n次幂。n是右操作数，即右移的位数。左边空出两位用符号位填充，右边两位被挤掉。 例如：-32 &gt;&gt; 2 ：原码：10000000000000000000000000100000，反码：11111111111111111111111111011111，补码：11111111111111111111111111100000。右移后为：11111111111111111111111111111000。求得原码为：10000000000000000000000000001000。得-8。 &gt;&gt;&gt; ：无符号右移。左边空出的位置用0补全。例如-32 &gt;&gt;&gt; 2变成一个很大的正数。 位运算均针对补码进行。正数的符号位为0，原、反、补码均为其本身；负数的符号位为1，其反码为对原码除符号位其余所有位求反，补码为对反码+1。 对于有符号数，计算机中存储的是补码。","categories":[{"name":"java","slug":"java","permalink":"http://thmasterplan.cn/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"http://thmasterplan.cn/tags/java/"}]},{"title":"网络安全总结","slug":"网络安全总结","date":"2019-11-19T10:21:36.000Z","updated":"2019-11-19T10:43:12.746Z","comments":true,"path":"2019/11/19/网络安全总结/","link":"","permalink":"http://thmasterplan.cn/2019/11/19/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%80%BB%E7%BB%93/","excerpt":"","text":"Security一、 介绍 网络安全五个特征： 保密性：信息不泄露给非授权用户、实体或过程，或供其利用的特性。 完整性：数据未经授权不能进行改变的特性。即信息在存储或传输过程中保持不被修改、不被破坏和丢失的特性。 可用性：可被授权实体访问并按需求使用的特性。即当需要时能否存取所需网络安全解决措施的信息。例如网络环境下拒绝服务、破坏网络和有关系统的正常运行等都属于对可用性的攻击； 可控性：对信息的传播及内容具有控制能力。 不可否认性：出现的安全问题时提供依据与手段。 安全机制: 加密机制 数字签名机制 访问控制机制 数据完整性机制 认证交换机制 通信业务流填充 路由控制 公证机制 普遍性安全机制 网络攻击方法: 被动攻击 主动攻击 物理临近攻击 内部人员攻击 软硬件装配攻击 二、 古典加密技术 代替密码：明文中的每个字符被替换成密文中的另一个字符 凯撒码 将明文转换为数字，使用加密函数E（m）=m+k(mod 26)得密文。解密函数D（c）=c-k(mod 26)。（只是字母简单的偏移） 维吉尼亚密码 密钥：一个字符串，对应一个数表 暴力破解需要26的k次方 代替密码特点： 单字母代换密码 ：明文中字母的出现频度、重复字母的模式和字母相互之间的结合模式等统计特性不变，安全性差。 多字母代替密码 ：字符块被成组加密 ，有利于抗击统计分析。 置换密码：又称换位密码（transposition cipher） ，并没有改变明文字母，只改变了这些字母的出现顺序。在对密文进行统计之后，易于判断该密文是否使用了置换密码加密方案。 Kerckhoffs假设：假定密码分析者知道对方所使用的密码系统，包括明文的统计特性，加密体制（操作方式、处理方法和加/解密算法）、密钥空间及其统计特性。但是，不知道密钥。在设计一个密码系统时，目标是在Kerckhoffs假设的前提下实现安全。 密码分析方法：尝试发现明文或密钥的过程 唯密文攻击：知道部分密文试图恢复明文，并试图推算密钥 已知明文攻击：知道部分消息密文及对应明文，试图推导密钥或算法 选择明文攻击：事先选择部分明文让被攻击者加密，并得到相应密文，试图推导出密钥或算法。 选择密文攻击：密码分析者需要掌握的内容包括：加密算法、截获的部分密文、自己选择的密文消息以及相应的被解密的明文。密码分析者事先任意搜集一定数量的密文，让这些密文透过被攻击的加密算法解密，透过未知的密钥获得解密后的明文。由此能够计算出加密者的私钥或者分解模数，运用这些信息，攻击者可以恢复所有的明文。 维吉尼亚密码的密码分析 字母频率统计用于猜测 Kasiski测试法确定密钥长度 重合指数法破译密文 三、 对称加密 分组密码的设计原则 混乱原则：密码设计应保证明文与密文之间的依赖关系足够复杂。 扩散原则：密码设计应保证密钥的每位数字能够影响密文中的多位数字（避免对密钥逐段破译），同时应保证明文的每位数字能够影响密文中的多位数字（隐藏明文的统计特性）。 分组密码特点 优点：易于标准化，易于实现同步 缺点：不善于隐藏明文的数据模式，对于重放、插入、删除等攻击方式的抵御能力不强。 对称加密算法：DES/AES 分组密码工作模式 ECB（Electronic Codebook）: 电码本 用相同的密钥分别对明文分组独立加密 对长明文不安全，因为重复的明文块在密文中也是重复的 CBC（Cipher Block Chaining）：密文分组链接 加密算法的输入是上一个密文组和下一个明文组的异或 优点：能够隐蔽明文的数据模式；能够一定程度上防止分组的重放、插入和删除攻击。 缺点：易导致错误传播。任意一个明文或密文组出错会导致其后的密文分组出错。 CFB（Cipher Feedback）:密文反馈 一次处理s位（明文和密文均是），加密算法的输入是上一块密文，加密后产生的伪随机数输出与明文异或作为下一单元的密文。 实质是一种自同步流密码 适用于必须按比特或字符对明文进行加密的情况 OFB（Output Feedback）：输出反馈 与CFB类似，只是加密算法的输入是上一次加密算法的输出，且使用整个分组 优点：能够克服错误传播 缺点：很难发现密文被篡改；不具备自同步能力 CTR计数器 每个明文分组都与一个经过加密的计数器相异或。对每个后续分组计数器递增 并行加密效率高 分组密码典型攻击方法 依据攻击者所掌握的信息：唯密文攻击、已知明文攻击、选择明文攻击 根据采用的技术方法 强力攻击（适用于任何分组密码算法）：穷尽密钥搜索、字典、查表、时间-存储权衡 差分密码分析 线性密码分析 差分-线性密码分析 攻击复杂度：数据复杂度（实施攻击所需输入的数据量）和处理复杂度（处理数据所需的计算量）。 对称密钥编码问题：通信密钥太多，管理与分发困难 四、 公钥加密 RSA原理 计算：(a x b) mod n = [(a mod n) x (b mod n)] mod n. RSA实现上的问题在构造n时应选择p和q的长度相差不大 RSA适合低频少量数据交换，如密钥分发；不适合数据量大，实时性强的场合（因为运算量大，慢） 五、 消息鉴别 概念：消息接收者对消息进行验证（真实性：确认并非假冒）（完整性：内容未被篡改）。 网络通信安全威胁：泄露、伪造、篡改、行为抵赖 鉴别与保密：鉴别不能自动提供保密性，保密性不能自动提供鉴别功能。 报文鉴别系统功能：鉴别算法（鉴别函数f产生鉴别码），鉴别协议，鉴别函数f是决定鉴别系统特性的主要因素。 鉴别函数分类： 以整个报文的密文作为鉴别符； 对称密钥加密：加密的同时提供保密和鉴别（强制明文具有某种结构） 附加报文鉴别结构：发送端：校验码C = f（M），密文X = Ek[M || C]; 接收端：Y = Dk(X) = [M’ || C’], 若f(M’) = C’,则报文可信。 公钥加密：提供报文鉴别和签名，不提供加密功能。 报文鉴别码(MAC)：核心是一个类似于加密的算法Ck()（k为密钥）, Ck(M)输出一个较短的定长数据分组也即MAC。发送[MAC || M]。接收端同样计算MAC，比较两个MAC是否相同。PS：MAC与加密函数比较：MAC可以是单向的，而加密函数必须可逆；MAC算法不能提供保密性。 散列函数方式（采用一个公共散列函数，将任意长度的报文映射为一个定长的散列值，并以散列值作为鉴别符）。（常用SHA-3，MD5）散列函数特性： 输入任意大小数据块，输出定长 容易计算 单向性：对任意散列值h要找到一个M使得H(M) = h不可行。 弱抗冲突性：对任意给定M，要找到M’ != M,使得H(M)=H(M’)计算上不可行。该性质可防止伪造。 强抗冲突性：要找到两报文M和N使他们散列值相同不可行。该性质指出散列函数对“生日攻击”的抵抗能力。 生日悖论攻击：伪造消息报文使hash值不变 中间符合攻击概念 六、 密钥建立和管理 密钥建立的模式：点到点（通信双方直接通信，分布式）；密钥分配中心KDC（用户与KDC有共享主密钥，KDC生成并分配会话密钥，集中式）；密钥转换中心KTC（只负责转发，集中式） Diff-Hellman密钥交换 如图，双方都计算出密钥为2 公钥加密体制的密钥分配：公钥的分配；使用公钥体制来分配对称密钥密码体制的密钥。 伪随机数生成器:线性同余算法；基于密码算法的随机数生成器（循环加密方式，DES的OFB模式）；BBS生成器； 密钥控制技术：密钥标签（DES的64位密钥中的8个校验位作为控制使用这一密钥的标签）；控制矢量 七、 用户认证 身份认证：密码，令牌（磁条卡，存储卡，智能卡），生物识别（虹膜，视网膜，指纹，签名，声音，脸） 口令破解：字典攻击，密码猜测，彩虹表攻击（可见密码不能明文存储，要求哈希后加salt，盐：随机字符） 口令的脆弱性：离线字典攻击；特定账户攻击；流行密码的攻击；单个用户的密码猜测；工作站劫持；电子监控；利用用户失误 Bad Passwords:过短的密码；易猜测的密码 Countermeasures：阻止未经授权访问密码文件；入侵检测措施；帐户锁定机制；自动工作站注销；加密的网络链接 八、 身份认证协议 Kerberos身份认证协议：集中式的认证服务器结构，认证服务器的功能是实现用户与其访问的服务器间的相互鉴别；采用对称加密技术 数字签名：直接数字签名仅涉及通信双方 使用公钥算法进行数字签名 假定接收方知道发送方的公钥 发送方用私钥加密整个消息或者消息的散列码 接收方用公钥解密即可确认发送方的身份 公钥基础设施(PKI) 提供三种安全服务： 认证：身份认证，采用数字签名实现 完整性：数据完整性，采用数字签名或消息认证码 机密性：采用对称加密 包括：认证机构CA，证书库，证书撤销，密钥备份和恢复，自动密钥更新，密钥历史档案，交叉认证，时间戳… X.509认证服务： X.509协议实现基于公钥加密算法和数字签名技术 证书由CA创建，CA用其私钥对证书签名，用户可用CA的公钥验证证书有效性并提取被认证的用户的公钥 九、 互联网安全协议和标准 IPSec:提供认证、保密性、密钥管理。优点：在传输层下，因而对应用程序、用户透明；抵抗旁路攻击；保护路由架构… IPSec架构： IPv6强制，IPv4可选 安全关联SA： 发送方和接收方之间的单向的关系，为数据流提供安全保障 由三个参数定义：Security Parameters Index (SPI)；IP Destination Address；Security Protocol Identifier 有一个安全关联数据库（） SA管理： 创建：先协商SA参数，再更新SAD；可人工创建，也可动态创建 删除：有效期过期；密钥遭破坏；另一端要求删除该SA 认证头(AH)： 提供数据整合和IP包认证 有限地抗重播攻击 基于消息认证码（MAC） 重放攻击：攻击者发送一个目的主机已接收过的包，来达到欺骗系统的目的，主要用于身份认证过程，破坏认证的正确性。 抗重播服务： 序列号字段：创建一个新的SA时，发送者会将序列号计数器初始化为0； 每当在这一SA上发送一个数据包，序列号计数器的值就加1并将序列号字段设置成计数器的值； 当达到其最大值2³²-1时，就应建立一个新的SA。 一种滑动窗口机制：IP是无连接的、不可靠的 ，需设立窗口；窗口的最左端对应于窗口起始位置的数据包序列号N，则最右端对应于可以接收的合法分组的最高序号N+WindowSize-1 ESP:提供保密性和抗重播服务 密钥管理:密钥生成和分发；AH和ESP各一对密钥； 安全套接层SSL： SSL的两个重要概念： SSL连接： 一个连接是一个提供一种合适类型服务的传输 SSL连接是端对端的 连接是暂时的 SSL会话： 一个SSL会话是在客户端和服务器之间的一个关联 会话由Handshake Protocal创建。会话定义了一组可供多个连接共享的加密安全参数 会话用以：避免为每一个连接提供新的安全参数所需的昂贵的谈判代价 十、 Hacking 攻击思路：信息收集，获取权限，安装后门（木马），扩大影响（攻击该网络其他主机），清除痕迹 安全评估 TCSEC，CC 十一、 信息收集（选择题） Web与搜索引擎服务 目标：获取目标网络或公司的URL，获取目标网络的拓扑结构 扫描目的：查看目标网络中哪些主机是存活的，查看存活的主机运行了哪些服务，查看主机提供的服务有无漏洞 IP扫描：判断目标网络有多少台主机存活（ping）（ping使用ICMP协议） 端口扫描：判断目标主机有哪些端口是打开的(TCP端口和UDP端口)（端口是入侵的通道） TCP扫描：TCP Connect，SYN，FIN UDP扫描 漏洞扫描 操作系统类型探测 十二、 缓冲区溢出 缓冲区：应用程序保存用户输入数据，程序临时数据的内存空间。缓冲区本质：数组。位置：堆、栈、数据段 溢出：用户输入数据长度超出了程序为其分配的内存空间，这些数据会覆盖其他程序数据的内存空间。 危害：程序异常，系统崩溃，程序跳到恶意代码，控制权被窃 溢出种类：堆溢出、栈溢出、整型溢出、格式化字符串溢出、其他溢出 溢出的共性：大对象向小对象复制数据，容纳不下造成溢出 避免缓冲区溢出漏洞： 人编写正确的代码 编译器进行数组边界检查 使用类型安全语言 RunTime保护 操作系统 硬件 十三、 Web脚本攻击 SQL注入攻击 ：把SQL命令插入到Web表单提交或输入域名或页面请求的查询字符串中，最终达到欺骗服务器执行恶意的SQL命令。步骤 绕过认证：conditions：账号密码的查询是同一条查询语句；密码没有加密保护 判断能否进行SQL注入 判断数据库类型及注入方法 猜测表名和字段名 猜测用户名和密码 预防 过滤关键字 限制输入长度 秘密字段使用散列函数保护 XSS跨站脚本攻击：通过在链接中插入恶意代码就能盗取用户信息。 预防 对动态生成页面的字符进行编码 对输入进行过滤限制 对动态内容使用HTML和URL编码 设置浏览器不执行任何脚本下载 十四、 DOS攻击 概念：利用网络协议漏洞或其他系统以及应用软件的漏洞耗尽被攻击目标资源，使得被攻击目标无法正常提供服务，直至系统停止响应甚至崩溃的攻击方式。 原理：攻击者向服务器发送众多的带有虚假地址的请求，服务器发送回复信息后无限等待进而无法释放资源，连接超时后攻击者再度发送虚假请求。 DOS分类：SYN Flood（请求方不发送ACK），ping of death（ping请求数据包声称超过64K，接收方TCP/IP堆栈崩溃），teardrop… 发现僵尸网络：IDS（提取僵尸程序指纹信息），行为监测（僵尸程序行为模式），蜜獾捕获（捕获僵尸程序样本） 十五、 恶意代码、病毒、蠕虫 计算机病毒：是一个指令序列，能够把自身拷贝插入到其他主程序中 病毒模块：引导、传染、表现 病毒按链接方式分类： 操作系统病毒：用自己的运行逻辑取代系统的正常逻辑模块 外壳型：将病毒本身包围在宿主程序周围，对原来程序不作修改 入侵型：将病毒插入攻击目标之中，一旦感染难以发现清除 源码病毒：利用java, VBS等网络语言编写放在e-mail附件或HTML主页中。 按传染对象分类：磁盘引导型（磁盘引导区），文件型（可执行文件），宏病毒（office系列） 检测病毒方法： 特征代码法：采样，提取特征代码，特征代码纳入病毒特征数据库，打开被检测文件检索，若出现新病毒重复1-3步 校验和法：在文件被感染前根据文件内容计算校验和保存在其他文件中。优点：既可发现已知病毒又可发现未知病毒；缺点：只能判断文件是否被修改，而不能识别病毒种类和名称，且对隐蔽性病毒无效。 行为监测法：利用病毒的特有行为来监测病毒的方法。 蠕虫：一种可以通过网络连接进行自身复制的程序，与以往病毒方式不同，文件型病毒、宏病毒需要在计算机的硬盘、软盘或文件系统中繁殖，而典型的蠕虫只会在内存中维持一个活动副本，甚至根本不向硬盘写入任何信息。 十六、 防火墙 概念：防火墙指应用于内部网络和外部网络之间的，用来保护内部网络免受非法访问和破坏的网络安全系统。 主要功能： 过滤进出网络的数据 防止不安全的协议和服务 管理进出网络的访问行为 记录通过防火墙的信息内容与活动 对网络攻击进行检测与告警 防止外部对内部网络信息的获取 提供与外部连接的集中管理 不能防范的攻击：内部威胁、病毒、应用程序漏洞、木马、社会工程、不当配置 防火墙分类：按实现技术（包过滤型（静态，动态），代理型（应用代理，电路代理，NAT））；按体系结构（双宿/多宿主机，屏蔽主机（双重保护安全性更高），屏蔽子网，混合结构）。 静态包过滤（传输层和网络层）：对包头内容进行简单过滤（源和目的IP，IP选项，IP上层协议，TCP和UDP源及目的端口，ICMP报文类型和代码）。 防火墙规则制定策略：a.拒绝任何访问，除非被规则特别允许。b.允许任何访问，除非规则特别禁止 过滤的两种基本方式：按服务过滤（如Telnet，SMTP，FTP等等）；按规则过滤。 静态包过滤的优缺点：速度快，价格低，对用户透明；配置难把握，防范能力低，没有用户身份验证机制。 动态包过滤（网络层）（状态检测防火墙）：不仅以一个数据包的内容作为过滤依据，还根据这个数据包在信息流位置加以判断 动态包过滤优缺点：基于应用程序信息验证一个包状态的能力，记录通过的每个包的详细信息；造成网络连接的迟滞，系统资源要求较高。 应用代理防火墙（应用层）：对所有规则内允许的应用程序作中转转发；牺牲了对应用程序的透明性。 应用代理优缺点：可以隐藏内部网络信息，具有强大的日志审核，实现内容过滤；价格高，速度慢，失效时造成网络瘫痪。 电路级代理（传输层）优缺点：隐藏内部网络信息，配置简单（无需为每个应用程序配置一个代理）；多数电路级网关都是基于TCP端口配置，不对数据包检测可能会有漏洞。 NAT优缺点：管理方便并且节约IP地址资源，隐藏内部IP地址信息；外部应用程序不能方便地与NAT网关后的应用程序联系。- 理解防火墙的四种体系结构 十七、 入侵检测IDS 由于防火墙无法发现和阻止:a.对合法服务的攻击。b.源自其他入口的攻击。c.来自内部网络的攻击。d.来自木马的威胁。入侵检测技术通过对计算机网络或计算机系统中若干关键点信息的收集和分析，从中发现网络或系统中是否有违反安全策略行为和被攻击迹象的一种安全技术。 IDS任务：从系统正常运行产生的和攻击者进行攻击时产生的混合数据中找出入侵痕迹。 通用入侵检测框架CIDF：体系结构；组件通信（事件产生器（数据获取）；事件分析器（数据分析）；事件数据库（数据管理）；响应单元（行为响应））；语言规范；编程接口。 小结：入侵检测技术收集主机日志及网络流量等信息，通过模式匹配、统计分析或完整性分析，能够有效发现入侵行为。入侵检测形成了网络的纵深防御，成为防火墙技术的有益补充。网络技术的发展给入侵检测带来各种新的困难，同时也带来机遇。","categories":[{"name":"安全","slug":"安全","permalink":"http://thmasterplan.cn/categories/%E5%AE%89%E5%85%A8/"}],"tags":[{"name":"安全","slug":"安全","permalink":"http://thmasterplan.cn/tags/%E5%AE%89%E5%85%A8/"}]},{"title":"Git笔记","slug":"Git笔记","date":"2019-11-19T10:18:31.000Z","updated":"2019-11-19T10:43:31.442Z","comments":true,"path":"2019/11/19/Git笔记/","link":"","permalink":"http://thmasterplan.cn/2019/11/19/Git%E7%AC%94%E8%AE%B0/","excerpt":"","text":"一.设置12git config --global user.name &quot;Your Name&quot;git config --global user.email &quot;email@example.com&quot; 二.创建版本库 创建空目录 隐藏目录.git为版本库git init 添加 123git add xxx.txtgit add xxxx.txtgit add xxxxx.txt 提交git commit -m &quot;说明文字&quot; 三.版本回退 查看版本日志git log 回退 12git reset --hard [HEAD^,HEAD^^，HEAD~100]回退到以前某个版本git reset --hard [回退之前的版本号] 撤销回退 查看命令历史，以便确定回到未来哪个版本git reflog 四.版本库的工作区与暂存区、分支git add命令实际上就是把要提交的所有修改放到暂存区（Stage），然后，执行git commit就可以一次性把暂存区的所有修改提交到分支。 五.每次修改，如果不用git add到暂存区，那就不会commit。六.撤销修改 直接丢弃工作区的修改，用命令git checkout -- file。[误删也是一种修改] 当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD &lt;file&gt;，就回到了场景1，第二步按场景1操作。 已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。 七.删除文件 12git rm filegit commit 八.推送到github git push origin master 九.克隆远程库到本地git clone git@github.com:Laishiji/directoryName.git 十.分支 查看分支：git branch 创建分支：git branch name 切换分支：git checkout name 创建+切换分支：git checkout -b name 合并某分支到当前分支：git merge name 删除分支：git branch -d name 十一.分支合并失败当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。用git log --graph命令可以看到分支合并图。","categories":[{"name":"git","slug":"git","permalink":"http://thmasterplan.cn/categories/git/"}],"tags":[{"name":"git","slug":"git","permalink":"http://thmasterplan.cn/tags/git/"}]},{"title":"Java高级","slug":"Java高级","date":"2019-11-19T09:33:47.000Z","updated":"2019-11-19T10:52:25.575Z","comments":true,"path":"2019/11/19/Java高级/","link":"","permalink":"http://thmasterplan.cn/2019/11/19/Java%E9%AB%98%E7%BA%A7/","excerpt":"","text":"JAVA复习笔记 字符串 String常用方法： 1) 比较 2) 获取 3) 截取子串 4) 转换 5) 分割 补充：boolean endsWith(String suffix);判断字符串是否是以suffix为后缀。 Static关键字 1) 内存图： 2) 静态代码块： Arrays常用方法 继承 抽象类与接口 多态 向上转型，即父类引用指向子类对象，则引用无法调用原本子类特有的方法，例如Animal a = new Cat(); 向下转型，也即还原a的类型为cat，使其可以访问cat特有的方法，例如Cat cat = (Cat) a;[类似于强制类型转换]。 final关键字1) 修饰类：当前类不能有任何子类。 2) 修饰方法：该方法不能被子类覆盖重写。（显然对于类、方法来说，abstract和final无法同时使用） 3) 修饰局部变量：该变量（引用类型不能再指向其他变量）不能再改变。 4) 修饰成员变量：该变量必须直接赋值或者在构造方法中赋值。 内部类1) 成员内部类 在内部类中访问重名的外部类成员变量： 2) 局部内部类 3) 局部内部类中的匿名内部类： 包装类 自动装箱与自动拆箱。 基本类型与字符串的转换： 集合框架+ 1) Collection 2) Iterator接口 3) 泛型 4) List List的子类： A. ArrayList:此实现不是同步的，底层是一个数组，增删慢，查询快。 B. LinkedList:此实现不是同步的，底层是双向链表，增删快，查询慢。 C. Vector:底层是数组，同步，了解即可 5) Set:set在调用add方法时，会调用元素的hashCode方法和equals方法判断元素是否重复，在存储自定义类型元素时，前提是需要重写对象中的hashCode和equals方法。 A. HashSet:不同步，底层是哈希表（查询速度快），无序。 哈希值：十进制整数，逻辑地址值，由哈希函数计算而得。 哈希表：jdk1.8之后，哈希表由数组+链表/红黑树构成。 B. LinkedHashSet:相较于HashSet多了一条链表记录元素的存储顺序，保证元素有序。 6) 可变参数： 7) Collections集合工具类： Comparator: Comparable: 要比较的类需要实现Comparable接口，同时覆盖compareTo方法： 8) Map A. 概述 B. Map接口常用方法： C. Map遍历方法： a) 键找值： b) Entry键值对对象：Map.Entry，在Map接口中有一个内部接口Entry,Map集合一创建就会创建一个Entry对象，记录键值对对象。 D. HashMap存储自定义类型键值为防止键重复，必须重写自定义类型的hashCode和equals方法。 9) HashTable: 异常 自定义异常： 并发1. 线程状态图： ​ ​ 等待-唤醒案例： notifyAll唤醒所有waiting状态的线程，唤醒之后的线程要与其他线程竞争锁，获取锁之后才能继续执行wait()方法之后的代码。 2. 创建线程第一种方法： 每个线程都有自己的栈空间。 3. Thread**类构造方法和常用方法：** 4. 创建线程第二种方法：实现Runnable接口 5. 两种创建方式的区别 6. 匿名内部类两种方式创建线程： 7. 线程安全与线程同步： 1) 同步代码块 （可以直接用synchronized(this){ ​ ///////////**代码块** }**）this代表Runnable的实现类对象，唯一。** 同步中的线程，没有执行完代码块中的内容不会释放锁，其余线程没有锁就算获取cpu执行权也会阻塞；同步保证了只能有一个线程在同步中执行共享数据，保证了安全；但是程序频繁地判断锁，获取锁，释放锁，程序效率会降低。 2) 同步方法 静态同步方法： 3) 加lock锁 8. 线程池：一个容纳多个线程的容器（例如LinkedList），其中的线程可以反复使用，无需反复创建线程而消耗过多资源。 9. Lambda**表达式：省略了实现接口，重写方法等。** 例： File1. File类的静态成员变量： 2. File类构造方法 1) File（String pathname){}； 2) File(String Parent, String child){}：这个构造意思是根据一个目录和子目录得到File对象。如果我们想对某一个文件路径下的多个文件进行操作，这个时候采用这个构造函数就显示优势。 3) File(File parent, String child){}：这个函数的好处就是可以对parent进行File相关的操作，例如打印父路径下有多少个文件等。 3. 获取类方法： 4. 判断类方法： 5. 创建删除类方法： 6. 目录遍历 7. 文件过滤器：FileFilter接口 listFiles(传递过滤器实现类对象，可直接用lambda表达式简化)。例如： IO 1. OutputStream: 1) FileOutputStream 2) 一次写一个字节 3) 一次写多个字节 4) 续写与换行 2. InputStream&amp;FileInputStream 1) 一次读一个字节，read()方法返回一个ASCII码值。 2) 一次读多个字节： 若未读取到字节，则同样返回-1. 3. 练习：文件复制操作： 4. 使用字节流读取中文时，会出现乱码的问题；一个中文字符：GBK占2个字节，UTF-8占3个字节。因此需要使用字符流。 5. Reader&amp;FileReader 6. writer&amp;FileWriter 7. IO中的异常处理 1) 常规 2) JDK7新特性 8. 属性集 1) setProperty/getProperty/stringPropertyNames 2) store 3) load 9. 缓冲流 1) BufferedOutputStream 2) BufferedInputStream 3) BufferedWriter 4) BufferedReader 10. 转换流 1) 字符编码和字符集： A. 字符编码：一套自然语言的字符与二进制数之间的对应规则。 B. 字符集：即编码表，生活中文字与二进制对应规则 C. 常用字符集： a) ASCII：美国 b) ISO：欧洲 c) GBxxx:GB2312,GBK,GB18030国标。GBK两个字节表示一个汉字。 d) Unicode：万国码。UTF-8/UTF-16/UTF-32。UTF-8三个字节表示一个汉字。 2) 编码引出的问题： FileReader可以读取IDE默认编码格式UTF-8的文件，但是读取系统默认编码为GBK时会产生乱码。 FileReader底层调用的是FileInputStream方法读取字节流，再通过字符集转换为字符，其父类为InputStreamReader. FileWriter同理。 3) OutputStreamWriter 4) InputStreamReader 11. 序列化流 1) ObjectOutputStream 只需要序列化的类implements Serializable接口即可，并不需要实现任何方法。 2) ObjectInputStream 与序列化相似。 3) 静态变量不能被序列化或反序列化。 4) 使用transient关键字修饰变量避免序列化。 A. 一旦变量被transient修饰，变量将不再是对象持久化的一部分，该变量内容在序列化后无法获得访问。 B. transient关键字只能修饰变量，而不能修饰方法和类。注意，本地变量是不能被transient关键字修饰的。变量如果是用户自定义类变量，则该类需要实现Serializable接口。 C. 被transient关键字修饰的变量不再能被序列化，一个静态变量不管是否被transient修饰，均不能被序列化。 5) InvalidClassException: 序列化一个类后，又修改类的内容后，序列号会改变，反序列化时会出现InvalidClassException。 12. PrintStream打印流 网络编程1. 客户端： 注意：在客户端发送完毕之后，要调用socket的shutdownOutput()方法，以免服务端的inputStream.read()方法阻塞。 2. 服务器端 JDK8新特性：函数式接口1. 概念：函数式接口在Java中是指：有且仅有一个抽象方法的接口； @FunctionalInterface注解：可以检测接口是否为一个函数式接口。 注意：使用匿名内部类编译时会有匿名内部类class文件，而lambda表达式不会有，效率更高。 2. 函数式编程： Lambda表达式延迟加载：作为参数（即接口的实现）时会判断其他参数是否满足条件，如若不满足调用者的条件则不会执行lambda表达式方法体，提高性能。 3. Java.util.function： 1) Supplier 2) Consumer 3) Predicate 4) Function 5) Stream流","categories":[{"name":"java","slug":"java","permalink":"http://thmasterplan.cn/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"http://thmasterplan.cn/tags/java/"}]},{"title":"文件权限与用户组管理","slug":"文件权限与用户组管理","date":"2019-11-17T16:16:20.000Z","updated":"2019-11-19T05:04:52.858Z","comments":true,"path":"2019/11/18/文件权限与用户组管理/","link":"","permalink":"http://thmasterplan.cn/2019/11/18/%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E4%B8%8E%E7%94%A8%E6%88%B7%E7%BB%84%E7%AE%A1%E7%90%86/","excerpt":"","text":"Linux的文件权限与用户组管理 文件权限：-rw-r--r-- 1 root root 4.0K 07-19 01:02 abc.log: 第1位： -：表示普通文件； d：目录 b：设备文件（块文件，即可以用来存储的设备文件） c：设备文件（字符文件，不能用来存储的设备文件） l：软链接（快捷方式） p：管道文件pipe s：套接字文件socket 后9位：r可读，w可写，x可执行。 2-4位：用户的权限范围 5-7位：组的权限范围 8-10位：其余人的权限范围 1表示该文件的硬链接数 第一个root表示该文件的所有者 第二个root表示该文件所属的组 4.0K表示该文件的大小 后面为最后一次修改的时间戳和文件名 r/w/x权限对于目录的意义： r权限：可读取目录结构列表，即可查看目录下的文件名和子目录名。[注：不能查看文件内容] w权限：可创建文件和目录，可删除，可重命名，可转移 x权限：可进入该目录。 更改权限：chmod chmod u+x,g+w,o-r abc.log：abc.log权限由-rw-r--r--变为：-rwxrw---- chmod a=r file或者chmod +r file:表示对file的u,g,o同时都赋予可读权限 另一种更简单的权限赋予方式，令r = 4, w = 2, x = 1,则u,g,o的权限分别可用一个整数表示，例如chmod 741 file表示file的u,g,o权限为-rwxr----x 参数-R：R及recursive（递归）；chmod -R 741 directory，表示改变目录及目录下所有文件的权限为741。 更改文件的所有者：chown chown user file:将file的所有者改为user chown user.group file:将file的所有者改为user,同时更改其组为group chown -R user directory：若要更改目录的权限，则需要加-R才能将其里面所有内容的权限更改 更改文件的所有组：chgrp chgrp root file: 将file的所有组改为root Linux组的类别： 用户的主要组：用户必须属于一个且只有一个主组，组名同用户名，且仅包含用户自己。 用户的附加组：一个用户可属于0或多个附加组。 id 用户名：查看用户的uid、gid（主组）、groups的id。管理员root的uid和gid为0。 用户和组的配置文件： /etc/passwd：用户及其属性信息(名称、UID、主组ID)。 /etc/group：组及其属性信息。 /etc/shadow：用户密码及其相关属性。 /etc/gshadow：组密码及其相关信息。 用户、组的增删改： useradd，userdel，usermod groupadd，groupdel，groupmod /etc/default/useradd：创建用户时的默认设置 文件与目录的默认权限与隐藏权限 文件预设权限:在没有umask的情况下，目录默认权限为777，文件默认权限为666；umask 022，表示创建文件和目录，g和o都过滤掉写(2)权限。 lsattr -a:显示所有隐藏属性 chattr [-RV][-v][+/-/=&lt;属性&gt;] [文件或目录]: -R：递归处理，将指定目录下的所有文件及子目录一并处理 -v：&lt;版本编号&gt; 设置文件或目录版本 -V： 显示指令执行过程 +&lt;属性&gt;： 开启文件或目录的该项属性 -&lt;属性&gt; ：关闭文件或目录的该项属 =&lt;属性&gt;： 指定文件或目录的该项属性 属性： a：让文件或目录只能加数据。 i：不得任意更动文件或目录。 b：不更新文件或目录的最后存取时间。 c：将文件或目录压缩后存放。 d：将文件或目录排除在倾倒操作之外。 s：保密性删除文件或目录。 S：即时更新文件或目录。 u：预防意外删除。 例如chattr +a /var/log/messages:让某个文件只能往里面追加数据，但不能删除，适用于各种日志文件 文件特殊权限 SUID（最常用）：chmod u+s file：使file文件x权限上显示为s，非用户(u)执行者可以获得u的所有权限 SUID权限仅对二进制程序有效，不能用在脚本和目录上 执行者对于该程序有x的可执行权限 SUID权限仅在执行程序的过程中有效 让本没有相应权限的用户运行该程序时，可以获得其原本没有权限访问的资源 SGID：非组(g)成员获得该组的权限 非组成员对于该程序需要具备x的权限 SGID主要用于目录, 在该目录下创建的任何文件及子目录属于该目录所拥有的组 。 SBIT: 目前只针对目录有效，切只能分配给其他人（o）;对于目录的作用是：当用户在该目录下建立文件或目录时，仅有自己与 root才有权力删除，例如/tmp。 SUID/SGID/SBIT权限设置 ： 文字法 ：SUID: u+s ，SGID: g+s，SBIT: o+t 数字法*：将原来的三位数扩展为四位数即可，SUID为4，SGID为2，SBIT为1，把它们放在权限数字的最开头。例如设置SUID，可以写成4777，设置SGID可以写成，2777 。 ACL(Access Control List)实现灵活权限控制： setfacl -m u/g:用户名/组名:权限 file。例如setfacl -m u:Tom:rw abc.txt，即Tom对abc.txt具有r和w权限，若不给权限则权限写0。 setfacl -x u/g:用户名/组名 file：删除权限。 setfacl -R -b dir/：删除dir下所有的ACL权限。 getfacl file：显示file的ACL权限。 权限优先级：所有者&gt;ACL权限(用户&gt;组&gt;other) 权限与指令间的关系(在用户模式下) 用户能进入某目录：需要权限x 进入目录后能利用ls查阅:需要权限r 进入目录后能够创建文件和目录:需要权限w 用户在目录内打开读取文件： 目录需要权限x 文件需要权限r","categories":[{"name":"Linux","slug":"Linux","permalink":"http://thmasterplan.cn/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://thmasterplan.cn/tags/Linux/"}]},{"title":"文件链接","slug":"文件链接","date":"2019-11-17T16:15:31.000Z","updated":"2019-11-17T16:32:05.287Z","comments":true,"path":"2019/11/18/文件链接/","link":"","permalink":"http://thmasterplan.cn/2019/11/18/%E6%96%87%E4%BB%B6%E9%93%BE%E6%8E%A5/","excerpt":"","text":"文件链接 硬链接：一个inode号对应多个文件名，硬链接也即同一个文件使用了多个别名，由命令ln oldfile newfile创建。 文件有相同的inode和data block 只能对已存在的文件进行创建，链接计数加1 不能交叉文件系统进行硬链接的创建 不能对目录进行创建，只可对文件创建 删除一个硬链接文件并不影响其他有相同inode号的文件 软链接（符号链接）：软链接的data block中存放的内容是另一文件的路径名的指向。软链接有自己的inode号和data block。由命令ln -s oldfile newfile创建，其中oldfile的相对路径为相对于newfile的，而newfile的相对路径是相对于当前工作目录的。rm -rf a.link/删除的是链接指向的文件，而rm -rf a.link删除的才是链接。 软链接有自己的文件属性及权限 可对不存在的文件或目录创建软链接 软链接可交叉文件系统 软链接可对文件或目录创建 创建软链接时，链接计数不会增加 删除软链接并不影响被指向的文件，但若被指向的原文件被删除，则相关软连接被称为死链接（即 dangling link，若被指向路径文件被重新创建，死链接可恢复为正常的软链接）","categories":[{"name":"Linux","slug":"Linux","permalink":"http://thmasterplan.cn/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://thmasterplan.cn/tags/Linux/"}]},{"title":"目录配置与文件目录管理","slug":"目录配置与文件目录管理","date":"2019-11-17T16:14:20.000Z","updated":"2019-11-17T16:33:05.292Z","comments":true,"path":"2019/11/18/目录配置与文件目录管理/","link":"","permalink":"http://thmasterplan.cn/2019/11/18/%E7%9B%AE%E5%BD%95%E9%85%8D%E7%BD%AE%E4%B8%8E%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E7%AE%A1%E7%90%86/","excerpt":"","text":"目录配置与文件目录管理 目录配置：可参考FHS标准 /bin:存放二进制文件，常用命令 /boot：系统启动项文件,内核 /dev:设备文件，硬盘等 /etc：配置文件 /home:用户家目录，每一个用户在/home下都有一个文件夹 /lib：链接库文件 /media：媒体自动挂载点，比如U盘，光盘等 /mnt：媒体挂载点，手动挂载 /opt：自定义软件安装处，默认安装处为/usr/local /root：超级用户目录 /sbin：存放系统管理员所能执行的命令 /tmp：临时文件 /usr：类似于二层根目录 /var:存放缓存，日志，数据库文件；该文件夹需要分配的空间较大，因此在磁盘分区时挂载在/var的分区要大一些。 /proc：内存中的进程信息 /sys：硬件相关信息 文件与目录管理 常用命令： cd ~:切换到home;cd -:切换到上一次所在目录 pwd：打印当前目录 basename 和 dirname：分别获取当前路径的文件名和目录名 touch xx:若xx不存在，则创建一个新文件xx。若xx存在，把xx的修改时间改为当前。 &gt; xx：若文件不存在，则创建一个空文件xx；若文件存在，则清空现有文件xx(可用于清空大文件)。 mkdir 目录名 目录名 目录名 ... mkdir -p test/{a,b,c}/{d,e}:递归创建目录，分别在a,b,c三个目录下创建d,e两个目录。 rmdir 目录名:只能删除空目录 rm -rf目录:删除目录下所有东西（慎用rm） cp [选项] /PATH1/xx /PATH2/yy:若yy是一个目录，则把文件xx拷贝到yy下；若yy不是一个目录，则把文件xx拷贝到PATH2目录下并重命名为yy。cp不能直接拷贝目录，需要加选项参数，cp -rfp /目录1 /目录2 == cp -a /目录1 /目录2：将目录1及其所有子目录及文件拷贝到目录2。参数：-r即递归，-f即强制,-p同时复制属性信息。 mv [选项] /PATH1/xx /PATH2/yy：若yy是一个目录，则把文件xx剪切到yy下；若yy不是一个目录，则把文件xx剪切到PATH2目录下并重命名为yy。例如mv xx yy:就是把xx重命名为yy。 rename .log .logabc *：重命名，把所有文件名中的.log改为.logabc 关于执行文件路径的变量：执行程序必须在其所在目录下才能执行，亦可使用绝对路径调用，若要直接敲命令就可以执行，则需要设置PATH，把命令所在目录添加在PATH后面。 文件的三个时间属性: atime:access time mtime:modify time ctime:change time 文件名规则： 文件名最长255字节 蓝色–&gt;目录；绿色–&gt;可执行文件；红色–&gt;压缩文件；浅蓝色–&gt;链接文件；黄色–&gt;设备文件；粉色–&gt;套接字文件；棕色–&gt;管道文件；灰色–&gt;其他文件 文件通配符： *：匹配0个或多个字符 ?：匹配任意一个字符 [1-5]：匹配字符1,2,3,4,5 [a-c]：匹配字符a、A、b、B、c(没有C)。 [A-C]：匹配A，b，B，c，C [^abcd]：匹配除abcd外的所有单个字母 文件内容查阅 cat 文件名:显示所有文件内容，适合查看小文件，参数-n显示行数。cat -n 文件名== nl 文件名。 tac：从最后一行显示，倒数显示。 more/less 文件名:按空格一屏一屏地显示，按回车一行一行地显示。同时在文档下方输入/字符串即可查找文档中的字符串。 head -n 21 文件名:查看文件的前21行 tail -n 21 文件名:查看文件的尾21行；参数-f,监测日志，实时监测日志的变化。 od:查看非文本文档，比如二进制文件。 命令与文件的查询： which -a 命令:在PATH路径中搜寻命令位置 whereis 命令:返回命令路径及其帮助文档的路径；参数-b只返回命令路径。 locate 字符串:在/var/lib/mlocate/mlocate.db中查询所有文件名中包含该字符串的文件并返回，该数据库每天定时更新，亦可通过updatedb更新。 find [paths] [expression] [actions]: 若不写paths则默认在当前目录下递归查找； expression: 根据文件名检索 find 命令中的 -name 选项可以根据文件名称进行检索（区分大小写）。如需要忽略文件名中的大小写，可以使用 -iname 选项。 -name 和 -iname 两个选项都支持 wildcards 。如： ? 可以表示任意一个单一的符号 * 可以表示任意数量（包括 0）的未知符号 find /usr -name &#39;*.txt&#39; 查找 /usr 目录下所有文件名以 .txt 结尾的文件find /usr -name &#39;????&#39; 查找 /usr 目录下所有文件名刚好为 4 个字符的文件 有些时候，你需要在搜索时匹配某个文件或目录的完整路径，而不仅仅是匹配文件名。可以使用 -path 或 -ipath 选项。 如查找 /usr 下所有文件名以 .txt 结尾的文件或目录，且该文件的父目录必须是 src。可以使用以下命令： find /usr -path &#39;*/src/*.txt&#39; 根据文件类型检索 如果只想搜索得到文件或目录，即不想它们同时出现在结果中。可以使用 -type 选项指定文件类型。 -type 选项最常用的参数如下： f: 文件 d: 目录 l: 符号链接 find /usr -type d -name &#39;python*&#39; 检索 /usr 下所有文件名以 python 开头的目录 检索空文件 find 命令支持 -empty 选项用来检索为空的文件或目录。空文件即文件里没有任何内容，空目录即目录中没有任何文件或子目录。 find ~ -type d -empty 检索用户主目录下所有的空目录 反义匹配 find 命令也允许用户对当前的匹配条件进行“反义”（类似于逻辑非操作）。 如需要检索 /usr 下所有文件名不以 .txt 为后缀的文件。可以使用以下命令： find /usr -type f ! -name &#39;*.txt&#39; 也可以“翻转”任何其他的筛选条件，如： find /usr -type f ! -empty 检索 /usr 下所有内容不为空的文件 根据文件的所属权检索 为了检索归属于特定用户的文件或目录，可以使用 -user 选项。 find / -type f -user starky 检索根目录下所有属主为 starky 的文件 类似于 -user选项，-group 选项则可以根据文件或目录的属组进行检索。 根据时间日期进行检索 有些时候，需要根据文件创建或修改的时间进行检索。 Linux 系统中，与文件相关联的时间参数有以下三种： 修改时间（Modification time）：最后一次文件内容有过更改的时间点 访问时间（Access time）：最后一次文件有被读取过的时间点 变更时间（Change time）：最后一次文件有被变更过的时间点（如内容被修改，或权限等 metadata 被修改） 与此对应的是 find 命令中的 -mtime，-atime 和 -ctime 三个选项。 这三个选项的使用遵循以下示例中的规则： -mtime 2：该文件 2 天前被修改过 -mtime -2：该文件 2 天以内被修改过 -mtime +2：该文件距离上次修改已经超过 2 天时间 find /usr -type f -mtime 2 检索 /usr 下两天前被修改过的文件 如果觉得 -mtime 等选项以天为单位时间有点长，还可以使用 -mmin，-amin，-cmin 三个选项： find /usr -type f -mtime +50 -mtime -100 检索 /usr 下 50 到 100 天之前修改过的文件 find /usr -type f -mtime 2 -amin 5 检索 /usr 下两天前被修改过且 5 分钟前又读取过的文件 根据文件大小检索 -size 选项允许用户通过文件大小进行搜索（只适用于文件，目录没有大小……）。 表示文件大小的单位由以下字符组成： c：字节 k：Kb M：Mb G：Gb 另外，还可以使用 + 或 - 符号表示大于或小于当前条件。 find / -size +1G 检索文件大小高于 1 GB 的文件 根据文件权限检索 find 命令可以使用 -perm 选项以文件权限为依据进行搜索。 使用符号形式如需要检索 /usr 目录下权限为 rwxr-xr-x 的文件，可以使用以下命令： find /usr -perm u=rwx,g=rx,o=rx 搜索 /usr 目录下所有权限为 r-xr-xr-x（即系统中的所有用户都只有读写权限）的文件和目录，可以使用以下命令： find /usr -perm a=rx 很多时候，我们只想匹配文件权限的一个子集。比如，检索可以直接被任何用户执行的文件，即只关心文件的执行权限，而不用管其读写权限是什么。 上述的需求可以通过以下命令实现：find / -type f -perm /a=x 其中 a=x 前面的 / 符号即用来表示只匹配权限的某个子集（执行权限），而不用关心其他权限的具体设置。 使用数字形式-perm 选项也支持数字形式的文件权限标记。 find /usr -perm 644 搜索 /usr 目录下权限为 644（即 rwxr-xr-x）的文件 限制遍历的层数 find 命令默认是以递归的方式检索项目的，这有时候会导致得到的结果数量非常巨大。可以使用 -maxdepth 限制 find 命令递归的层数。 find / -maxdepth 3 搜索时向下递归的层数最大为 3 逻辑组合 在之前的例子中有出现多个搜索条件的组合以及对某个搜索条件的反转。 实际上 find 命令支持 “and” 和 “or” 两种逻辑运算，对应的命令选项分别是 -a 和 -o。通过这两个选项可以对搜索条件进行更复杂的组合。 此外还可以使用小括号对搜索条件进行分组。注意 find 命令中的小括号常需要用单引号包裹起来。因小括号在 Shell 中有特殊的含义。 如检索 /usr 下文件名以 python 开头且类型为目录的文件 find /usr -type d -name &#39;python*&#39; 该命令等同于： find /usr -type d -a -name &#39;python*&#39; 更复杂的组合形式如： find / &#39;(&#39; -mmin -5 -o -mtime +50 &#39;)&#39; -a -type f 对搜索结果执行actions： 删除文件 -delete 选项可以用来删除搜索到的文件和目录。 如删除 home 目录下所有的空目录： find ~ -type d -empty -delete 执行自定义命令 -exec 选项可以对搜索到的结果执行特定的命令。 如需要将 home 目录下所有的 MP3 音频文件复制到移动存储设备（假设路径是 /media/MyDrive），可使用下面的命令： find ~ -type f -name &#39;*.mp3&#39; -exec cp {} /media/MyDrive &#39;;&#39; 其中的大括号（{}）作为检索到的文件的 占位符 ，而分号（ ;）作为命令结束的标志。因为分号是 Shell 中有特殊含义的符号，所以需要使用单引号括起来。 每当 find 命令检索到一个符合条件的文件，会使用其完整路径取代命令中的 {}，然后执行 -exec 后面的命令一次。 另一个很重要的用法是，在多个文件中检索某个指定的字符串。 如在用户主目录下的所有文件中检索字符串 hello ，可以使用如下命令： find ~ -type f -exec grep -l hello {} &#39;;&#39; -exec 选项中的 + 符号创建 Gzip 格式的压缩文件的命令为：tar -czvf filename.tar.gz 现在假设需要将用户主目录下所有的 MP3 文件添加到压缩包 music.tar.gz 中，直观的感觉是，其命令应为如下形式： find ~ -type f -name &#39;*.mp3&#39; -exec tar -czvf music.tar.gz {} &#39;;&#39; 实际情况是，这样得到的 music.tar.gz 其实只包含一个 MP3 文件。 原因是 find 命令每次发现一个音频文件，都会再执行一次 -exec 选项后面的压缩命令。导致先前生成的压缩包被覆盖。 可以先让 find 命令检索出所有符合条件的音频文件，再将得到的文件列表传递给后面的压缩命令。完整的命令如下： find ~ -type f -name &#39;*.mp3&#39; -exec tar -czvf music.tar.gz {} + 显示文件信息如果想浏览搜索到的文件（目录）的详细信息（如权限和大小等），可以直接使用 -ls 选项。 find / -type file -size +1G -ls 浏览所有 1G 以上大小的文件的详细信息","categories":[{"name":"Linux","slug":"Linux","permalink":"http://thmasterplan.cn/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://thmasterplan.cn/tags/Linux/"}]},{"title":"磁盘与文件系统简介","slug":"磁盘与文件系统简介","date":"2019-11-17T16:12:54.000Z","updated":"2019-11-17T17:49:39.647Z","comments":true,"path":"2019/11/18/磁盘与文件系统简介/","link":"","permalink":"http://thmasterplan.cn/2019/11/18/%E7%A3%81%E7%9B%98%E4%B8%8E%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%AE%80%E4%BB%8B/","excerpt":"","text":"Linux磁盘与文件系统简介(centOS7之后使用xfs，centOS6使用ext4) 文件系统特性 索引式文件系统：对于linux，文件的权限和属性放置到inode中，文件的实际数据放在data block中。 superblock:记录此filesystem的整体信息，包括inode/block的总量、使用量、剩余量,以及文件系统的格式与相关信息等。 inode:记录文件的属性，一个文件占用一个inode，同时记录此文件的数据所在的block号码。 block:实际记录文件的内容，若文件过大一般会占用多个block。 linux的EXT2 ext2文件系统示意图 data clock：ext2文件系统所支持的block大小有1K,2K和4K三种 Block大小 1KB 2KB 4KB 最大单一文件限制 16GB 256GB 2TB 最大文件系统总容量 2TB 8TB 16TB 除非重新格式化，block的大小与数量在格式化完就不能再改变 每个blcok内最多只能放置一个文件的数据 若文件大于block,则一个文件占用多个block；若文件小于block，则该blcok的剩余容量就不能再被使用。 inode table:记录文件的权限，拥有者与群组，容量，建立、最近一次读取、更改的时间。。。 每个inode大小均为固定128字节（ext4和xfs可设定到256字节） 每个文件仅占用一个inode 系统读取文件时需要先找到inode，并分析inode所记录的权限与用户是否符合。 superblock：一般为1024字节 dumpe2fs：查询EXT系列superblock信息的指令 文件系统与目录树的关系 目录：当在linux下的文件系统建立一个目录时，文件系统会分配一个inode与至少一块block给该目录，其中inode记录该目录的相关权限和属性，并记录分配的那块block号码，而block则记录在这个目录下的文件名与该文件名占用的inode号；ls -i查询当前目录下文件的inode号码。 文件:在ext2建立一个文件时，ext2会分配一个inode和相对于该文件大小的block数量。 目录树:例如读取/etc/passwd过程:/的inode -&gt; /的block -&gt; etc/的inode -&gt; etc/的block -&gt; passwd的inode -&gt; passwd的block。 日志式文件系统 挂载点的意义：挂载点一定是目录，该目录为进入该文件系统的入口。 Linux VFS用于管理所有类型的filesystem","categories":[{"name":"Linux","slug":"Linux","permalink":"http://thmasterplan.cn/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://thmasterplan.cn/tags/Linux/"}]},{"title":"常用命令入门","slug":"常用命令入门","date":"2019-11-17T16:11:48.000Z","updated":"2019-11-17T17:02:15.820Z","comments":true,"path":"2019/11/18/常用命令入门/","link":"","permalink":"http://thmasterplan.cn/2019/11/18/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%85%A5%E9%97%A8/","excerpt":"","text":"常用命令入门 Xwindow与命令行界面的切换：ctrl + alt + f1...f7，其中只有f7为图形化界面，启动图形化界面也可以用startx命令。 命令帮助： whatis 命令：列出命令的作用以及man帮助的章节。 命令 --help：命令用法 man 章节号 命令：命令更详细的用法 info 命令 man -k 字符串:查找所有包含该字符串的命令 help：列出所有的内部命令 常见命令与快捷键： ls -a/-l:列出当前目录所有文件；ls -l == ll;ls -d .*/：列出所有目录 date:获取当前日期 cal:获取日历 bc:进入计算器,scale = n,n表示计算的精度 [Tab]:命令、文件名、选项、参数补全，连续两次Tab键可列出所有选项 ctrl c:终止目前程序 ctrl d :等同于输入exit shift pageup/pagedown:翻页 nano:一个简单的文本编辑器 reboot/shutdown -r:重启；shutdown/poweroff:关机；shutdown -h 1:定时1分钟关机；shutdown -h 8:20:8:20关机 su -/su root：获取root权限 sync：将内存中的数据写入磁盘，防止丢失 clear:清屏 file 文件名:查看文件类型 tree:查询当前目录的树形结构,需要安装；选项-d只显示目录；选项-L显示指定层级；例如tree -d /boot -L 1。 passwd：更改密码 hostname：查看主机名；hostnamectl set-hostname 名字：更改主机名。 ls -l $(which passwd)：命令的嵌套执行，用$()表示。 修改提示符颜色:修改PS1变量的值，并保存在配置文件/etc/profile.d/env.sh中。 type 命令：查看命令类型，内部命令集成在shell中。 enable：查看所有内部命令；enable -n 命令:禁用内部命令 Hash缓存表:系统初始hash表为空，当外部命令执行时，默认会从PATH路径下寻找该命令，找到后会将该命令的路径记录到hash表中，当再次使用该命令时，shell解释器首先查看hash表，存在则执行命令，不存在则去PATH路径下寻找，利用hash缓存表可大大提高命令的调用速率。 hash：显示hash缓存 将外部命令路径添加到/etc/profile文件的PATH=$PATH:/xxx/yy中，再用source /etc/profile即可在任意路径下使用该外部命令。 alias 别名 = &#39;常用命令&#39;：设立别名；在centos7中，需在/root/.bashrc中保存。 alias可列出所有别名。 命令执行优先级:别名&gt;内部命令&gt;外部命令hash表&gt;$PATH。 若别名与原命令同名，可通过\\命令名执行原命令。 编辑配置文件不会立即生效，可通过. 配置文件名使bash进程重新读取配置文件使编辑生效。 多个命令可以用;分开一起执行，一个长命令可以用\\分成多行。 echo：回显字符串；显示变量 单引号：单引号中的内容就是字符串 反向单引号：其中的内容命令和变量均能识别。例如：touch `date +%F`.log：创建以当前时间命名的文件。反向单引号等价于$()。 双引号：能识别变量不能识别命令 {}：打印重复字符串；例如touch file{1..10}：创建了10个文件分别为file1,file2,,,file10。 Alt 数字n:重复显示字符n次","categories":[{"name":"Linux","slug":"Linux","permalink":"http://thmasterplan.cn/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://thmasterplan.cn/tags/Linux/"}]},{"title":"标准IO和重定向","slug":"标准IO和重定向","date":"2019-11-17T16:09:31.000Z","updated":"2019-11-17T16:30:58.678Z","comments":true,"path":"2019/11/18/标准IO和重定向/","link":"","permalink":"http://thmasterplan.cn/2019/11/18/%E6%A0%87%E5%87%86IO%E5%92%8C%E9%87%8D%E5%AE%9A%E5%90%91/","excerpt":"","text":"标准IO和重定向 三种I/O设备 标准输入(STDIN)：（文件描述符0） 默认接收来自键盘的输入 标准输出（STDOUT）：（文件描述符1） 默认输出到终端窗口 标准错误（STDERR）：（文件描述符2） 默认输出到终端窗口 I/O重定向至文件 标准输出重定向：&gt;；例如hostname &gt; /dev/pts/2将输出重定向至另一设备；若为文件，则清空文件再写入。&gt;&gt;则是追加，而不清空原文件；例如hostname &gt;&gt; /data/abc.log。 标准错误重定向：2&gt;；&gt;&gt;则是追加。 &amp;&gt;：标准输出和标准错误一起重定向。 标准输入重定向：&lt;；例如bc &lt; bc.txt，将bc.txt文件作为输入用bc计算。 tr [选项] set1 set2 ：将输入的文本中所有的s1替换为s2。· -d：删除所有属于set1的字符。 -s：把连续重复的字符以单独一个字符表示。 -t：把set1对应字符转换为set2对应字符。 cat &gt; abc.log：标准输入单行重定向到文件；cat &lt;&lt;EOF &gt;abc.log标准输入多行重定向至文件，输入EOF才写入文件。 使用管道 管道命令1 | 命令2 | 命令3 | ...：将命令1的STDOUT发送给命令2的STDIN，再将命令2的STDOUT发送给命令3的STDIN。。。 STDERR默认不能通过管道转发，可利用|&amp;实现。 例子：echo {1..100} | tr &#39; &#39; + | bc：计算1到100的和。","categories":[{"name":"Linux","slug":"Linux","permalink":"http://thmasterplan.cn/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://thmasterplan.cn/tags/Linux/"}]},{"title":"VIM的简单使用","slug":"VIM的简单使用","date":"2019-11-17T16:08:02.000Z","updated":"2019-11-17T16:29:57.944Z","comments":true,"path":"2019/11/18/VIM的简单使用/","link":"","permalink":"http://thmasterplan.cn/2019/11/18/VIM%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/","excerpt":"","text":"VIM：一个模式编辑器 三种主要模式： Normal（命令）模式：默认模式，可移动光标，剪切/粘贴文本。 -&gt; Insert模式：输入i,a,o,I,A,O任意一个； -&gt; extended command模式:输入:； h:左; l:右; j:下; k:上； )：下一句；(：上一句 }：下一段；{：上一段 ctrl d：向下翻半屏 ctrl u：向上翻半屏 /字符串：全文查找字符串 Insert(编辑)模式：可修改文本。 -&gt; Normal模式:ESC键； 扩展命令(extended command)模式：保存，退出等。 -&gt; Normal模式：ESC键； wq：存盘退出； q!：不存盘退出； w：临时保存，类似于win下的ctrl+s； r filename：将filename的文件内容读到当前文件中； w filename：将当前文件内容写入filename文件中； !命令：在不退出vim的情况下执行命令； r!命令：在不退出vim的情况下，将执行命令的结果写入当前文件。 set number：显示行号；输入数字再输入+或-则向下或向上跳相应行数。","categories":[{"name":"Linux","slug":"Linux","permalink":"http://thmasterplan.cn/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://thmasterplan.cn/tags/Linux/"}]}]}