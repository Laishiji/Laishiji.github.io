{"meta":{"title":"TheMasterplan","subtitle":"TheMasterplan","description":"","author":"LSJ","url":"http://thmasterplan.cn","root":"/"},"pages":[{"title":"关于","date":"2019-11-18T07:02:49.528Z","updated":"2019-11-18T07:02:49.524Z","comments":false,"path":"about/index.html","permalink":"http://thmasterplan.cn/about/index.html","excerpt":"","text":"##邮箱laishiji86@gmail.com ##githubhttps://github.com/Laishji ##联系方式QQ：991327409"},{"title":"Repositories","date":"2019-11-18T05:58:22.890Z","updated":"2019-11-18T05:58:22.890Z","comments":false,"path":"repository/index.html","permalink":"http://thmasterplan.cn/repository/index.html","excerpt":"","text":""},{"title":"分类","date":"2019-11-18T06:42:54.196Z","updated":"2019-11-18T06:42:54.196Z","comments":false,"path":"categories/index.html","permalink":"http://thmasterplan.cn/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-11-18T06:43:04.379Z","updated":"2019-11-18T06:43:04.379Z","comments":false,"path":"tags/index.html","permalink":"http://thmasterplan.cn/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"文件权限与用户组管理","slug":"文件权限与用户组管理","date":"2019-11-17T16:16:20.000Z","updated":"2019-11-17T16:32:16.227Z","comments":true,"path":"2019/11/18/文件权限与用户组管理/","link":"","permalink":"http://thmasterplan.cn/2019/11/18/%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E4%B8%8E%E7%94%A8%E6%88%B7%E7%BB%84%E7%AE%A1%E7%90%86/","excerpt":"","text":"Linux的文件权限与用户组管理 文件权限：-rw-r--r-- 1 root root 4.0K 07-19 01:02 abc.log: 第1位： -：表示普通文件； d：目录 b：设备文件（块文件，即可以用来存储的设备文件） c：设备文件（字符文件，不能用来存储的设备文件） l：软链接（快捷方式） p：管道文件pipe s：套接字文件socket 后9位：r可读，w可写，x可执行。 2-4位：用户的权限范围 5-7位：组的权限范围 8-10位：其余人的权限范围 1表示该文件的硬链接数 第一个root表示该文件的所有者 第二个root表示该文件所属的组 4.0K表示该文件的大小 后面为最后一次修改的时间戳和文件名 r/w/x权限对于目录的意义： r权限：可读取目录结构列表，即可查看目录下的文件名和子目录名。[注：不能查看文件内容] w权限：可创建文件和目录，可删除，可重命名，可转移 x权限：可进入该目录。 更改权限：chmod chmod u+x,g+w,o-r abc.log：abc.log权限由-rw-r--r--变为：-rwxrw---- chmod a=r file或者chmod +r file:表示对file的u,g,o同时都赋予可读权限 另一种更简单的权限赋予方式，令r = 4, w = 2, x = 1,则u,g,o的权限分别可用一个整数表示，例如chmod 741 file表示file的u,g,o权限为-rwxr----x 参数-R：R及recursive（递归）；chmod -R 741 directory，表示改变目录及目录下所有文件的权限为741。 更改文件的所有者：chown chown user file:将file的所有者改为user chown user.group file:将file的所有者改为user,同时更改其组为group chown -R user directory：若要更改目录的权限，则需要加-R才能将其里面所有内容的权限更改 更改文件的所有组：chgrp chgrp root file: 将file的所有组改为root Linux组的类别： 用户的主要组：用户必须属于一个且只有一个主组，组名同用户名，且仅包含用户自己。 用户的附加组：一个用户可用属于0或多个附加组。 id 用户名：查看用户的uid、gid（主组）、groups的id。管理员root的uid和gid为0。 用户和组的配置文件： /etc/passwd：用户及其属性信息(名称、UID、主组ID)。 /etc/group：组及其属性信息。 /etc/shadow：用户密码及其相关属性。 /etc/gshadow：组密码及其相关信息。 文件与目录的默认权限与隐藏权限 文件预设权限:在没有umask的情况下，目录默认权限为777，文件默认权限为666；umask 022，表示创建文件和目录，g和o都过滤掉写(2)权限。 lsattr -a:显示所有隐藏属性 chattr [-RV][-v][+/-/=&lt;属性&gt;] [文件或目录]: -R：递归处理，将指定目录下的所有文件及子目录一并处理 -v：&lt;版本编号&gt; 设置文件或目录版本 -V： 显示指令执行过程 +&lt;属性&gt;： 开启文件或目录的该项属性 -&lt;属性&gt; ：关闭文件或目录的该项属 =&lt;属性&gt;： 指定文件或目录的该项属性 属性： a：让文件或目录只能加数据。 i：不得任意更动文件或目录。 b：不更新文件或目录的最后存取时间。 c：将文件或目录压缩后存放。 d：将文件或目录排除在倾倒操作之外。 s：保密性删除文件或目录。 S：即时更新文件或目录。 u：预防意外删除。 例如chattr +a /var/log/messages:让某个文件只能往里面追加数据，但不能删除，适用于各种日志文件 文件特殊权限 SUID（最常用）：chmod u+s file：使file文件x权限上显示为s，非用户(u)执行者可以获得u的所有权限 SUID权限仅对二进制程序有效，不能用在脚本和目录上 执行者对于该程序有x的可执行权限 SUID权限仅在执行程序的过程中有效 让本没有相应权限的用户运行该程序时，可以获得其原本没有权限访问的资源 SGID：非组(g)成员获得该组的权限 非组成员对于该程序需要具备x的权限 SGID主要用于目录, 在该目录下创建的任何文件及子目录属于该目录所拥有的组 。 SBIT: 目前只针对目录有效，切只能分配给其他人（o）;对于目录的作用是：当用户在该目录下建立文件或目录时，仅有自己与 root才有权力删除，例如/tmp。 SUID/SGID/SBIT权限设置 ： 文字法 ：SUID: u+s ，SGID: g+s，SBIT: o+t 数字法*：将原来的三位数扩展为四位数即可，SUID为4，SGID为2，SBIT为1，把它们放在权限数字的最开头。例如设置SUID，可以写成4777，设置SGID可以写成，2777 。 ACL(Access Control List)实现灵活权限控制： setfacl -m u/g:用户名/组名:权限 file。例如setfacl -m u:Tom:rw abc.txt，即Tom对abc.txt具有r和w权限，若不给权限则权限写0。 setfacl -x u/g:用户名/组名 file：删除权限。 setfacl -R -b dir/：删除dir下所有的ACL权限。 getfacl file：显示file的ACL权限。 权限优先级：所有者&gt;ACL权限(用户&gt;组&gt;other) 权限与指令间的关系(在用户模式下) 用户能进入某目录：需要权限x 进入目录后能利用ls查阅:需要权限r 进入目录后能够创建文件和目录:需要权限w 用户在目录内打开读取文件： 目录需要权限x 文件需要权限r","categories":[{"name":"Linux","slug":"Linux","permalink":"http://thmasterplan.cn/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://thmasterplan.cn/tags/Linux/"}]},{"title":"文件链接","slug":"文件链接","date":"2019-11-17T16:15:31.000Z","updated":"2019-11-17T16:32:05.287Z","comments":true,"path":"2019/11/18/文件链接/","link":"","permalink":"http://thmasterplan.cn/2019/11/18/%E6%96%87%E4%BB%B6%E9%93%BE%E6%8E%A5/","excerpt":"","text":"文件链接 硬链接：一个inode号对应多个文件名，硬链接也即同一个文件使用了多个别名，由命令ln oldfile newfile创建。 文件有相同的inode和data block 只能对已存在的文件进行创建，链接计数加1 不能交叉文件系统进行硬链接的创建 不能对目录进行创建，只可对文件创建 删除一个硬链接文件并不影响其他有相同inode号的文件 软链接（符号链接）：软链接的data block中存放的内容是另一文件的路径名的指向。软链接有自己的inode号和data block。由命令ln -s oldfile newfile创建，其中oldfile的相对路径为相对于newfile的，而newfile的相对路径是相对于当前工作目录的。rm -rf a.link/删除的是链接指向的文件，而rm -rf a.link删除的才是链接。 软链接有自己的文件属性及权限 可对不存在的文件或目录创建软链接 软链接可交叉文件系统 软链接可对文件或目录创建 创建软链接时，链接计数不会增加 删除软链接并不影响被指向的文件，但若被指向的原文件被删除，则相关软连接被称为死链接（即 dangling link，若被指向路径文件被重新创建，死链接可恢复为正常的软链接）","categories":[{"name":"Linux","slug":"Linux","permalink":"http://thmasterplan.cn/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://thmasterplan.cn/tags/Linux/"}]},{"title":"目录配置与文件目录管理","slug":"目录配置与文件目录管理","date":"2019-11-17T16:14:20.000Z","updated":"2019-11-17T16:33:05.292Z","comments":true,"path":"2019/11/18/目录配置与文件目录管理/","link":"","permalink":"http://thmasterplan.cn/2019/11/18/%E7%9B%AE%E5%BD%95%E9%85%8D%E7%BD%AE%E4%B8%8E%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E7%AE%A1%E7%90%86/","excerpt":"","text":"目录配置与文件目录管理 目录配置：可参考FHS标准 /bin:存放二进制文件，常用命令 /boot：系统启动项文件,内核 /dev:设备文件，硬盘等 /etc：配置文件 /home:用户家目录，每一个用户在/home下都有一个文件夹 /lib：链接库文件 /media：媒体自动挂载点，比如U盘，光盘等 /mnt：媒体挂载点，手动挂载 /opt：自定义软件安装处，默认安装处为/usr/local /root：超级用户目录 /sbin：存放系统管理员所能执行的命令 /tmp：临时文件 /usr：类似于二层根目录 /var:存放缓存，日志，数据库文件；该文件夹需要分配的空间较大，因此在磁盘分区时挂载在/var的分区要大一些。 /proc：内存中的进程信息 /sys：硬件相关信息 文件与目录管理 常用命令： cd ~:切换到home;cd -:切换到上一次所在目录 pwd：打印当前目录 basename 和 dirname：分别获取当前路径的文件名和目录名 touch xx:若xx不存在，则创建一个新文件xx。若xx存在，把xx的修改时间改为当前。 &gt; xx：若文件不存在，则创建一个空文件xx；若文件存在，则清空现有文件xx(可用于清空大文件)。 mkdir 目录名 目录名 目录名 ... mkdir -p test/{a,b,c}/{d,e}:递归创建目录，分别在a,b,c三个目录下创建d,e两个目录。 rmdir 目录名:只能删除空目录 rm -rf目录:删除目录下所有东西（慎用rm） cp [选项] /PATH1/xx /PATH2/yy:若yy是一个目录，则把文件xx拷贝到yy下；若yy不是一个目录，则把文件xx拷贝到PATH2目录下并重命名为yy。cp不能直接拷贝目录，需要加选项参数，cp -rfp /目录1 /目录2 == cp -a /目录1 /目录2：将目录1及其所有子目录及文件拷贝到目录2。参数：-r即递归，-f即强制,-p同时复制属性信息。 mv [选项] /PATH1/xx /PATH2/yy：若yy是一个目录，则把文件xx剪切到yy下；若yy不是一个目录，则把文件xx剪切到PATH2目录下并重命名为yy。例如mv xx yy:就是把xx重命名为yy。 rename .log .logabc *：重命名，把所有文件名中的.log改为.logabc 关于执行文件路径的变量：执行程序必须在其所在目录下才能执行，亦可使用绝对路径调用，若要直接敲命令就可以执行，则需要设置PATH，把命令所在目录添加在PATH后面。 文件的三个时间属性: atime:access time mtime:modify time ctime:change time 文件名规则： 文件名最长255字节 蓝色–&gt;目录；绿色–&gt;可执行文件；红色–&gt;压缩文件；浅蓝色–&gt;链接文件；黄色–&gt;设备文件；粉色–&gt;套接字文件；棕色–&gt;管道文件；灰色–&gt;其他文件 文件通配符： *：匹配0个或多个字符 ?：匹配任意一个字符 [1-5]：匹配字符1,2,3,4,5 [a-c]：匹配字符a、A、b、B、c(没有C)。 [A-C]：匹配A，b，B，c，C [^abcd]：匹配除abcd外的所有单个字母 文件内容查阅 cat 文件名:显示所有文件内容，适合查看小文件，参数-n显示行数。cat -n 文件名== nl 文件名。 tac：从最后一行显示，倒数显示。 more/less 文件名:按空格一屏一屏地显示，按回车一行一行地显示。同时在文档下方输入/字符串即可查找文档中的字符串。 head -n 21 文件名:查看文件的前21行 tail -n 21 文件名:查看文件的尾21行；参数-f,监测日志，实时监测日志的变化。 od:查看非文本文档，比如二进制文件。 命令与文件的查询： which -a 命令:在PATH路径中搜寻命令位置 whereis 命令:返回命令路径及其帮助文档的路径；参数-b只返回命令路径。 locate 字符串:在/var/lib/mlocate/mlocate.db中查询所有文件名中包含该字符串的文件并返回，该数据库每天定时更新，亦可通过updatedb更新。 find [paths] [expression] [actions]: 若不写paths则默认在当前目录下递归查找； expression: 根据文件名检索 find 命令中的 -name 选项可以根据文件名称进行检索（区分大小写）。如需要忽略文件名中的大小写，可以使用 -iname 选项。 -name 和 -iname 两个选项都支持 wildcards 。如： ? 可以表示任意一个单一的符号 * 可以表示任意数量（包括 0）的未知符号 find /usr -name &#39;*.txt&#39; 查找 /usr 目录下所有文件名以 .txt 结尾的文件find /usr -name &#39;????&#39; 查找 /usr 目录下所有文件名刚好为 4 个字符的文件 有些时候，你需要在搜索时匹配某个文件或目录的完整路径，而不仅仅是匹配文件名。可以使用 -path 或 -ipath 选项。 如查找 /usr 下所有文件名以 .txt 结尾的文件或目录，且该文件的父目录必须是 src。可以使用以下命令： find /usr -path &#39;*/src/*.txt&#39; 根据文件类型检索 如果只想搜索得到文件或目录，即不想它们同时出现在结果中。可以使用 -type 选项指定文件类型。 -type 选项最常用的参数如下： f: 文件 d: 目录 l: 符号链接 find /usr -type d -name &#39;python*&#39; 检索 /usr 下所有文件名以 python 开头的目录 检索空文件 find 命令支持 -empty 选项用来检索为空的文件或目录。空文件即文件里没有任何内容，空目录即目录中没有任何文件或子目录。 find ~ -type d -empty 检索用户主目录下所有的空目录 反义匹配 find 命令也允许用户对当前的匹配条件进行“反义”（类似于逻辑非操作）。 如需要检索 /usr 下所有文件名不以 .txt 为后缀的文件。可以使用以下命令： find /usr -type f ! -name &#39;*.txt&#39; 也可以“翻转”任何其他的筛选条件，如： find /usr -type f ! -empty 检索 /usr 下所有内容不为空的文件 根据文件的所属权检索 为了检索归属于特定用户的文件或目录，可以使用 -user 选项。 find / -type f -user starky 检索根目录下所有属主为 starky 的文件 类似于 -user选项，-group 选项则可以根据文件或目录的属组进行检索。 根据时间日期进行检索 有些时候，需要根据文件创建或修改的时间进行检索。 Linux 系统中，与文件相关联的时间参数有以下三种： 修改时间（Modification time）：最后一次文件内容有过更改的时间点 访问时间（Access time）：最后一次文件有被读取过的时间点 变更时间（Change time）：最后一次文件有被变更过的时间点（如内容被修改，或权限等 metadata 被修改） 与此对应的是 find 命令中的 -mtime，-atime 和 -ctime 三个选项。 这三个选项的使用遵循以下示例中的规则： -mtime 2：该文件 2 天前被修改过 -mtime -2：该文件 2 天以内被修改过 -mtime +2：该文件距离上次修改已经超过 2 天时间 find /usr -type f -mtime 2 检索 /usr 下两天前被修改过的文件 如果觉得 -mtime 等选项以天为单位时间有点长，还可以使用 -mmin，-amin，-cmin 三个选项： find /usr -type f -mtime +50 -mtime -100 检索 /usr 下 50 到 100 天之前修改过的文件 find /usr -type f -mtime 2 -amin 5 检索 /usr 下两天前被修改过且 5 分钟前又读取过的文件 根据文件大小检索 -size 选项允许用户通过文件大小进行搜索（只适用于文件，目录没有大小……）。 表示文件大小的单位由以下字符组成： c：字节 k：Kb M：Mb G：Gb 另外，还可以使用 + 或 - 符号表示大于或小于当前条件。 find / -size +1G 检索文件大小高于 1 GB 的文件 根据文件权限检索 find 命令可以使用 -perm 选项以文件权限为依据进行搜索。 使用符号形式如需要检索 /usr 目录下权限为 rwxr-xr-x 的文件，可以使用以下命令： find /usr -perm u=rwx,g=rx,o=rx 搜索 /usr 目录下所有权限为 r-xr-xr-x（即系统中的所有用户都只有读写权限）的文件和目录，可以使用以下命令： find /usr -perm a=rx 很多时候，我们只想匹配文件权限的一个子集。比如，检索可以直接被任何用户执行的文件，即只关心文件的执行权限，而不用管其读写权限是什么。 上述的需求可以通过以下命令实现：find / -type f -perm /a=x 其中 a=x 前面的 / 符号即用来表示只匹配权限的某个子集（执行权限），而不用关心其他权限的具体设置。 使用数字形式-perm 选项也支持数字形式的文件权限标记。 find /usr -perm 644 搜索 /usr 目录下权限为 644（即 rwxr-xr-x）的文件 限制遍历的层数 find 命令默认是以递归的方式检索项目的，这有时候会导致得到的结果数量非常巨大。可以使用 -maxdepth 限制 find 命令递归的层数。 find / -maxdepth 3 搜索时向下递归的层数最大为 3 逻辑组合 在之前的例子中有出现多个搜索条件的组合以及对某个搜索条件的反转。 实际上 find 命令支持 “and” 和 “or” 两种逻辑运算，对应的命令选项分别是 -a 和 -o。通过这两个选项可以对搜索条件进行更复杂的组合。 此外还可以使用小括号对搜索条件进行分组。注意 find 命令中的小括号常需要用单引号包裹起来。因小括号在 Shell 中有特殊的含义。 如检索 /usr 下文件名以 python 开头且类型为目录的文件 find /usr -type d -name &#39;python*&#39; 该命令等同于： find /usr -type d -a -name &#39;python*&#39; 更复杂的组合形式如： find / &#39;(&#39; -mmin -5 -o -mtime +50 &#39;)&#39; -a -type f 对搜索结果执行actions： 删除文件 -delete 选项可以用来删除搜索到的文件和目录。 如删除 home 目录下所有的空目录： find ~ -type d -empty -delete 执行自定义命令 -exec 选项可以对搜索到的结果执行特定的命令。 如需要将 home 目录下所有的 MP3 音频文件复制到移动存储设备（假设路径是 /media/MyDrive），可使用下面的命令： find ~ -type f -name &#39;*.mp3&#39; -exec cp {} /media/MyDrive &#39;;&#39; 其中的大括号（{}）作为检索到的文件的 占位符 ，而分号（ ;）作为命令结束的标志。因为分号是 Shell 中有特殊含义的符号，所以需要使用单引号括起来。 每当 find 命令检索到一个符合条件的文件，会使用其完整路径取代命令中的 {}，然后执行 -exec 后面的命令一次。 另一个很重要的用法是，在多个文件中检索某个指定的字符串。 如在用户主目录下的所有文件中检索字符串 hello ，可以使用如下命令： find ~ -type f -exec grep -l hello {} &#39;;&#39; -exec 选项中的 + 符号创建 Gzip 格式的压缩文件的命令为：tar -czvf filename.tar.gz 现在假设需要将用户主目录下所有的 MP3 文件添加到压缩包 music.tar.gz 中，直观的感觉是，其命令应为如下形式： find ~ -type f -name &#39;*.mp3&#39; -exec tar -czvf music.tar.gz {} &#39;;&#39; 实际情况是，这样得到的 music.tar.gz 其实只包含一个 MP3 文件。 原因是 find 命令每次发现一个音频文件，都会再执行一次 -exec 选项后面的压缩命令。导致先前生成的压缩包被覆盖。 可以先让 find 命令检索出所有符合条件的音频文件，再将得到的文件列表传递给后面的压缩命令。完整的命令如下： find ~ -type f -name &#39;*.mp3&#39; -exec tar -czvf music.tar.gz {} + 显示文件信息如果想浏览搜索到的文件（目录）的详细信息（如权限和大小等），可以直接使用 -ls 选项。 find / -type file -size +1G -ls 浏览所有 1G 以上大小的文件的详细信息","categories":[{"name":"Linux","slug":"Linux","permalink":"http://thmasterplan.cn/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://thmasterplan.cn/tags/Linux/"}]},{"title":"磁盘与文件系统简介","slug":"磁盘与文件系统简介","date":"2019-11-17T16:12:54.000Z","updated":"2019-11-17T17:49:39.647Z","comments":true,"path":"2019/11/18/磁盘与文件系统简介/","link":"","permalink":"http://thmasterplan.cn/2019/11/18/%E7%A3%81%E7%9B%98%E4%B8%8E%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%AE%80%E4%BB%8B/","excerpt":"","text":"Linux磁盘与文件系统简介(centOS7之后使用xfs，centOS6使用ext4) 文件系统特性 索引式文件系统：对于linux，文件的权限和属性放置到inode中，文件的实际数据放在data block中。 superblock:记录此filesystem的整体信息，包括inode/block的总量、使用量、剩余量,以及文件系统的格式与相关信息等。 inode:记录文件的属性，一个文件占用一个inode，同时记录此文件的数据所在的block号码。 block:实际记录文件的内容，若文件过大一般会占用多个block。 linux的EXT2 ext2文件系统示意图 data clock：ext2文件系统所支持的block大小有1K,2K和4K三种 Block大小 1KB 2KB 4KB 最大单一文件限制 16GB 256GB 2TB 最大文件系统总容量 2TB 8TB 16TB 除非重新格式化，block的大小与数量在格式化完就不能再改变 每个blcok内最多只能放置一个文件的数据 若文件大于block,则一个文件占用多个block；若文件小于block，则该blcok的剩余容量就不能再被使用。 inode table:记录文件的权限，拥有者与群组，容量，建立、最近一次读取、更改的时间。。。 每个inode大小均为固定128字节（ext4和xfs可设定到256字节） 每个文件仅占用一个inode 系统读取文件时需要先找到inode，并分析inode所记录的权限与用户是否符合。 superblock：一般为1024字节 dumpe2fs：查询EXT系列superblock信息的指令 文件系统与目录树的关系 目录：当在linux下的文件系统建立一个目录时，文件系统会分配一个inode与至少一块block给该目录，其中inode记录该目录的相关权限和属性，并记录分配的那块block号码，而block则记录在这个目录下的文件名与该文件名占用的inode号；ls -i查询当前目录下文件的inode号码。 文件:在ext2建立一个文件时，ext2会分配一个inode和相对于该文件大小的block数量。 目录树:例如读取/etc/passwd过程:/的inode -&gt; /的block -&gt; etc/的inode -&gt; etc/的block -&gt; passwd的inode -&gt; passwd的block。 日志式文件系统 挂载点的意义：挂载点一定是目录，该目录为进入该文件系统的入口。 Linux VFS用于管理所有类型的filesystem","categories":[{"name":"Linux","slug":"Linux","permalink":"http://thmasterplan.cn/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://thmasterplan.cn/tags/Linux/"}]},{"title":"常用命令入门","slug":"常用命令入门","date":"2019-11-17T16:11:48.000Z","updated":"2019-11-17T17:02:15.820Z","comments":true,"path":"2019/11/18/常用命令入门/","link":"","permalink":"http://thmasterplan.cn/2019/11/18/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%85%A5%E9%97%A8/","excerpt":"","text":"常用命令入门 Xwindow与命令行界面的切换：ctrl + alt + f1...f7，其中只有f7为图形化界面，启动图形化界面也可以用startx命令。 命令帮助： whatis 命令：列出命令的作用以及man帮助的章节。 命令 --help：命令用法 man 章节号 命令：命令更详细的用法 info 命令 man -k 字符串:查找所有包含该字符串的命令 help：列出所有的内部命令 常见命令与快捷键： ls -a/-l:列出当前目录所有文件；ls -l == ll;ls -d .*/：列出所有目录 date:获取当前日期 cal:获取日历 bc:进入计算器,scale = n,n表示计算的精度 [Tab]:命令、文件名、选项、参数补全，连续两次Tab键可列出所有选项 ctrl c:终止目前程序 ctrl d :等同于输入exit shift pageup/pagedown:翻页 nano:一个简单的文本编辑器 reboot/shutdown -r:重启；shutdown/poweroff:关机；shutdown -h 1:定时1分钟关机；shutdown -h 8:20:8:20关机 su -/su root：获取root权限 sync：将内存中的数据写入磁盘，防止丢失 clear:清屏 file 文件名:查看文件类型 tree:查询当前目录的树形结构,需要安装；选项-d只显示目录；选项-L显示指定层级；例如tree -d /boot -L 1。 passwd：更改密码 hostname：查看主机名；hostnamectl set-hostname 名字：更改主机名。 ls -l $(which passwd)：命令的嵌套执行，用$()表示。 修改提示符颜色:修改PS1变量的值，并保存在配置文件/etc/profile.d/env.sh中。 type 命令：查看命令类型，内部命令集成在shell中。 enable：查看所有内部命令；enable -n 命令:禁用内部命令 Hash缓存表:系统初始hash表为空，当外部命令执行时，默认会从PATH路径下寻找该命令，找到后会将该命令的路径记录到hash表中，当再次使用该命令时，shell解释器首先查看hash表，存在则执行命令，不存在则去PATH路径下寻找，利用hash缓存表可大大提高命令的调用速率。 hash：显示hash缓存 将外部命令路径添加到/etc/profile文件的PATH=$PATH:/xxx/yy中，再用source /etc/profile即可在任意路径下使用该外部命令。 alias 别名 = &#39;常用命令&#39;：设立别名；在centos7中，需在/root/.bashrc中保存。 alias可列出所有别名。 命令执行优先级:别名&gt;内部命令&gt;外部命令hash表&gt;$PATH。 若别名与原命令同名，可通过\\命令名执行原命令。 编辑配置文件不会立即生效，可通过. 配置文件名使bash进程重新读取配置文件使编辑生效。 多个命令可以用;分开一起执行，一个长命令可以用\\分成多行。 echo：回显字符串；显示变量 单引号：单引号中的内容就是字符串 反向单引号：其中的内容命令和变量均能识别。例如：touch `date +%F`.log：创建以当前时间命名的文件。反向单引号等价于$()。 双引号：能识别变量不能识别命令 {}：打印重复字符串；例如touch file{1..10}：创建了10个文件分别为file1,file2,,,file10。 Alt 数字n:重复显示字符n次","categories":[{"name":"Linux","slug":"Linux","permalink":"http://thmasterplan.cn/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://thmasterplan.cn/tags/Linux/"}]},{"title":"标准IO和重定向","slug":"标准IO和重定向","date":"2019-11-17T16:09:31.000Z","updated":"2019-11-17T16:30:58.678Z","comments":true,"path":"2019/11/18/标准IO和重定向/","link":"","permalink":"http://thmasterplan.cn/2019/11/18/%E6%A0%87%E5%87%86IO%E5%92%8C%E9%87%8D%E5%AE%9A%E5%90%91/","excerpt":"","text":"标准IO和重定向 三种I/O设备 标准输入(STDIN)：（文件描述符0） 默认接收来自键盘的输入 标准输出（STDOUT）：（文件描述符1） 默认输出到终端窗口 标准错误（STDERR）：（文件描述符2） 默认输出到终端窗口 I/O重定向至文件 标准输出重定向：&gt;；例如hostname &gt; /dev/pts/2将输出重定向至另一设备；若为文件，则清空文件再写入。&gt;&gt;则是追加，而不清空原文件；例如hostname &gt;&gt; /data/abc.log。 标准错误重定向：2&gt;；&gt;&gt;则是追加。 &amp;&gt;：标准输出和标准错误一起重定向。 标准输入重定向：&lt;；例如bc &lt; bc.txt，将bc.txt文件作为输入用bc计算。 tr [选项] set1 set2 ：将输入的文本中所有的s1替换为s2。· -d：删除所有属于set1的字符。 -s：把连续重复的字符以单独一个字符表示。 -t：把set1对应字符转换为set2对应字符。 cat &gt; abc.log：标准输入单行重定向到文件；cat &lt;&lt;EOF &gt;abc.log标准输入多行重定向至文件，输入EOF才写入文件。 使用管道 管道命令1 | 命令2 | 命令3 | ...：将命令1的STDOUT发送给命令2的STDIN，再将命令2的STDOUT发送给命令3的STDIN。。。 STDERR默认不能通过管道转发，可利用|&amp;实现。 例子：echo {1..100} | tr &#39; &#39; + | bc：计算1到100的和。","categories":[{"name":"Linux","slug":"Linux","permalink":"http://thmasterplan.cn/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://thmasterplan.cn/tags/Linux/"}]},{"title":"VIM的简单使用","slug":"VIM的简单使用","date":"2019-11-17T16:08:02.000Z","updated":"2019-11-17T16:29:57.944Z","comments":true,"path":"2019/11/18/VIM的简单使用/","link":"","permalink":"http://thmasterplan.cn/2019/11/18/VIM%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/","excerpt":"","text":"VIM：一个模式编辑器 三种主要模式： Normal（命令）模式：默认模式，可移动光标，剪切/粘贴文本。 -&gt; Insert模式：输入i,a,o,I,A,O任意一个； -&gt; extended command模式:输入:； h:左; l:右; j:下; k:上； )：下一句；(：上一句 }：下一段；{：上一段 ctrl d：向下翻半屏 ctrl u：向上翻半屏 /字符串：全文查找字符串 Insert(编辑)模式：可修改文本。 -&gt; Normal模式:ESC键； 扩展命令(extended command)模式：保存，退出等。 -&gt; Normal模式：ESC键； wq：存盘退出； q!：不存盘退出； w：临时保存，类似于win下的ctrl+s； r filename：将filename的文件内容读到当前文件中； w filename：将当前文件内容写入filename文件中； !命令：在不退出vim的情况下执行命令； r!命令：在不退出vim的情况下，将执行命令的结果写入当前文件。 set number：显示行号；输入数字再输入+或-则向下或向上跳相应行数。","categories":[{"name":"Linux","slug":"Linux","permalink":"http://thmasterplan.cn/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://thmasterplan.cn/tags/Linux/"}]},{"title":"Java_final关键字","slug":"Java-final关键字","date":"2019-11-17T15:59:03.000Z","updated":"2019-11-17T16:29:15.503Z","comments":true,"path":"2019/11/17/Java-final关键字/","link":"","permalink":"http://thmasterplan.cn/2019/11/17/Java-final%E5%85%B3%E9%94%AE%E5%AD%97/","excerpt":"","text":"1) 修饰类：当前类不能有任何子类。2) 修饰方法：该方法不能被子类覆盖重写。（显然对于类、方法来说，abstract和final无法同时使用）3) 修饰局部变量：该变量（引用类型不能再指向其他变量）不能再改变。4) 修饰成员变量：该变量必须直接赋值或者在构造方法中赋值。","categories":[{"name":"JAVA","slug":"JAVA","permalink":"http://thmasterplan.cn/categories/JAVA/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"http://thmasterplan.cn/tags/JAVA/"}]}]}